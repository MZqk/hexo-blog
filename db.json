{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/huhu/source/style/index.styl","path":"style/index.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/demo.woff2","path":"font/demo.woff2","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/demo2.woff2","path":"font/demo2.woff2","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/iconfont.eot","path":"font/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/California-Medium.woff2","path":"font/California-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/Radikal-Bold.woff2","path":"font/Radikal-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/iconfont.svg","path":"font/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/iconfont.woff","path":"font/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/iconfont.ttf","path":"font/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/huhu/source/font/iconfont.woff2","path":"font/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/logo.jpeg","path":"images/logo.jpeg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/9.jpg","path":"images/9.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/8.jpg","path":"images/8.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/5.jpg","path":"images/5.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/scripts/index.js","path":"scripts/index.js","modified":1,"renderable":1},{"_id":"themes/huhu/source/scripts/viewer.js","path":"scripts/viewer.js","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/font.styl","path":"style/font.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/highlight.styl","path":"style/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/media.styl","path":"style/media.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/reset.styl","path":"style/reset.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/style.styl","path":"style/style.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/scripts/dg.js","path":"scripts/dg.js","modified":1,"renderable":1},{"_id":"themes/huhu/source/scripts/header.js","path":"scripts/header.js","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/viewer.css","path":"style/viewer.css","modified":1,"renderable":1},{"_id":"themes/huhu/source/style/variables.styl","path":"style/variables.styl","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/eye-fill.svg","path":"svg/eye-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/facebook-fill.svg","path":"svg/facebook-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/dingtalk-circle-fill.svg","path":"svg/dingtalk-circle-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/QQ-circle-fill.svg","path":"svg/QQ-circle-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/heart-fill.svg","path":"svg/heart-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/github-fill.svg","path":"svg/github-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/underline.svg","path":"svg/underline.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/weibo-circle-fill.svg","path":"svg/weibo-circle-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/svg/wechat-fill.svg","path":"svg/wechat-fill.svg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/2.jpg","path":"images/2.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/6.jpg","path":"images/6.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/scripts/jquery.js","path":"scripts/jquery.js","modified":1,"renderable":1},{"_id":"themes/huhu/source/pic/2.jpg","path":"pic/2.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/7.jpg","path":"images/7.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/4.jpg","path":"images/4.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/pic/1.jpg","path":"pic/1.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/3.jpg","path":"images/3.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":1},{"_id":"themes/huhu/source/images/10.jpg","path":"images/10.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"c4a2a6a1bdffc6f366fa992cdbbb76f8d0a74150","modified":1564027500165},{"_id":"source/CNAME","hash":"bf1d7020a0bc3226d90edd53ef537f973d0306aa","modified":1564027566019},{"_id":"themes/huhu/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1563969758158},{"_id":"themes/huhu/README.md","hash":"24608d35c41b72cd027f9362e142e649cf1a7fca","modified":1563969758160},{"_id":"themes/huhu/_config.yml","hash":"e81765a49fbe11401ebb75b80fe7a3e1403fbffb","modified":1564034451556},{"_id":"themes/huhu/package.json","hash":"db6899147fd0da6c1e57645c16015bd71bc3bd5d","modified":1563969758166},{"_id":"themes/huhu/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1563969758159},{"_id":"source/_posts/GIT生成ssh秘钥.md","hash":"e3d6c44a9b93f773cc4a2fa153509ed1ee46d4d2","modified":1563872297055},{"_id":"source/_posts/3种PHP连接MYSQL数据库的常用方法.md","hash":"95dc16225948a64d62e326290cb4c6c1ac5d5e54","modified":1563872297054},{"_id":"source/_posts/Eslint 配置参数说明.md","hash":"fdd2f71fa261df71d306f0aecd49655592e008bd","modified":1563872297055},{"_id":"source/_posts/PWA功能.md","hash":"1c064abbc6851c4ea4907593e6779be155b18c27","modified":1563872297057},{"_id":"source/_posts/H5与Native交互.md","hash":"25694d3c4702615d7e64f3a9bd194dcedcefa0b2","modified":1563872297056},{"_id":"source/_posts/Linux安装NodeJS.md","hash":"01b81174760e1afbb150ad82e85ae016f8b5cc81","modified":1563872297057},{"_id":"source/_posts/VScode常用插件.md","hash":"94deb023a97eb3d73a4ef37a9e863b71e6a1a922","modified":1563872297058},{"_id":"source/_posts/css浮动后父元素高度坍塌.md","hash":"d154cf8640e23fbdd9bdb5d93b119207af273ce0","modified":1563872297059},{"_id":"source/_posts/React生命周期.md","hash":"e418b38b6315cb5707eca196eb5ecb5596bca5fd","modified":1563872297058},{"_id":"source/_posts/array_diff 数组差集.md","hash":"d9af1562f7ef57f023693450d8542e2912278582","modified":1563872297058},{"_id":"source/_posts/git新建远程版本库.md","hash":"71e58c5aa367c62554cb1d9c53d4a8075b232098","modified":1563872297059},{"_id":"source/_posts/parseInt兼容性.md","hash":"8004c8560f45b7faea694b7847653878785c81fe","modified":1563872297061},{"_id":"source/_posts/ngixn开启gzip配置.md","hash":"db52bb6d7db0a3d65de12074d67997b4996062f3","modified":1563872297060},{"_id":"source/_posts/usort 自定义排序.md","hash":"4e35bfdf4dde67105eb38745b3cc29accf9d9629","modified":1563872297062},{"_id":"source/_posts/函数防抖.md","hash":"8e5a40781617b6dae7e6a27c7a3216a3dfcc50ce","modified":1563872297063},{"_id":"source/_posts/hasOwnProperty原型链方法.md","hash":"ff4d718864ddc032f138f46458d143196bcae593","modified":1563872297060},{"_id":"source/_posts/代码规范.md","hash":"b4dcf8d0887fb2054308b50e874e10f1356b28db","modified":1563872297062},{"_id":"source/_posts/判断函数是否是Promise函数.md","hash":"c9af1245d0b51655aa8d469201c888d4db408f10","modified":1563872297063},{"_id":"source/_posts/slice、splice、split异同.md","hash":"32ab054f58eb8e51cb3c3545cfbbdc8d5803b42b","modified":1563872297061},{"_id":"source/_posts/南京游.md","hash":"a2c3052009ee82e6bd5f42dc60ce00b700e9445f","modified":1563872297063},{"_id":"source/_posts/总结笔记20181017.md","hash":"285eef04744bd45d294d67eea278b259b7d46df3","modified":1563872297088},{"_id":"source/_posts/总结笔记20190614.md","hash":"cef49c2aea4fdd5a4796ef2fad015cf513cad82a","modified":1563872297090},{"_id":"source/_posts/天空.md","hash":"12c0a21743311ac446d77ac753b8fed89e713487","modified":1563872297081},{"_id":"source/_posts/总结笔记20190415.md","hash":"bf9258db29532600d9b01bb83171a4305d4c9015","modified":1563872297089},{"_id":"source/_posts/总结笔记20190104.md","hash":"a9cecb2207f399858b9f76c9a6ee162358db344d","modified":1563872297089},{"_id":"themes/huhu/.git/COMMIT_EDITMSG","hash":"23ac0c6169c9f61911dbd772db8b6c6acf7a9b09","modified":1563971245781},{"_id":"source/_posts/无重复字符的最长子串.md","hash":"33b989c9229c37a7e9c62db8caf5c3fd77b7b647","modified":1563872297090},{"_id":"source/_posts/JavaScript深拷贝.md","hash":"34c42efe9fec9b7866b8396b7ac424732cbf2681","modified":1563872297056},{"_id":"source/_posts/获取首字符拼音首字母.md","hash":"3ee410c87f396ec6a7c68ce6fdb503753fce5533","modified":1563872297092},{"_id":"source/_posts/滚动置顶元素.md","hash":"f65b677a26aacd9e3ed21536745c62d9537e7eda","modified":1563872297091},{"_id":"themes/huhu/.git/FETCH_HEAD","hash":"e1568faec5445e5b193916ea83eca10ec314d99e","modified":1564035831601},{"_id":"source/_posts/正向代理、反向代理.md","hash":"90226312e448f5b7e3bf2f2f647a431af15412c8","modified":1563872297091},{"_id":"themes/huhu/.git/config","hash":"9a04cc8dcbf6ba7eaec4ee17adad36f954064180","modified":1563969758139},{"_id":"themes/huhu/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1563969639933},{"_id":"themes/huhu/.git/index","hash":"b63d0d68d03c736d6ceb6d2943bc599aa60ad7d9","modified":1563971245763},{"_id":"themes/huhu/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1563969758106},{"_id":"themes/huhu/.git/packed-refs","hash":"990fd9f0766039de7ccec0799851b4b65f8e7647","modified":1563969758091},{"_id":"source/about/index.md","hash":"8009b769812c594541075a6d359c06112061db1f","modified":1563761545337},{"_id":"themes/huhu/layout/layout.ejs","hash":"c874302f2fa7463a3b7f873a53365d650ae947be","modified":1564034772982},{"_id":"themes/huhu/.git/sourcetreeconfig","hash":"c2eb6e30cdc5238b0aab9ce4abeaa0103e4e742b","modified":1563972232995},{"_id":"themes/huhu/layout/archive.ejs","hash":"e482749c41eee6c1a0f2f5d965d94f6a38eb194a","modified":1564023663761},{"_id":"source/_posts/记博客搭建.md","hash":"b61113b2b05ad625fbbf69ba0a02a213590ca1d3","modified":1563872297092},{"_id":"themes/huhu/layout/post.ejs","hash":"a13c0ae386022e0550dd1631db190e2eb961276a","modified":1563969758166},{"_id":"themes/huhu/layout/index.ejs","hash":"b59263282e8cf83aba4c63ec5e2739d05b4e18bf","modified":1563969758165},{"_id":"themes/huhu/languages/default.yml","hash":"b01bc282cacc55d3ffb465e0d29395ef5f0e57ff","modified":1563969758163},{"_id":"themes/huhu/languages/zh-CN.yml","hash":"b01bc282cacc55d3ffb465e0d29395ef5f0e57ff","modified":1563969758163},{"_id":"themes/huhu/source/style/index.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563969758279},{"_id":"themes/huhu/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1563969640006},{"_id":"themes/huhu/.git/logs/HEAD","hash":"f99adb0ebe4bf6d64752f28729be21367b6708b5","modified":1563971245826},{"_id":"themes/huhu/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1563969639940},{"_id":"themes/huhu/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1563969639949},{"_id":"themes/huhu/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1563969639955},{"_id":"themes/huhu/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1563969639945},{"_id":"themes/huhu/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1563969639970},{"_id":"themes/huhu/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1563969639963},{"_id":"themes/huhu/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1563969639984},{"_id":"themes/huhu/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1563969639977},{"_id":"themes/huhu/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1563969639991},{"_id":"themes/huhu/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1563969640000},{"_id":"themes/huhu/source/font/demo.woff2","hash":"67c9510c17e34c0de970997171214696ee6b27c6","modified":1563969758176},{"_id":"themes/huhu/source/font/demo2.woff2","hash":"8d97d62959b593105abc453f08af6a974b1b983d","modified":1563969758178},{"_id":"themes/huhu/source/font/iconfont.eot","hash":"2a0728d8ad1ba98fa7456321f35c82d61914355f","modified":1563969758180},{"_id":"themes/huhu/source/font/California-Medium.woff2","hash":"99ab6e4b3c0c53952497f66e1aee51829058d107","modified":1563969758171},{"_id":"themes/huhu/source/font/Radikal-Bold.woff2","hash":"99430164d5d1dd80ee5ea9c7efc16bb882910602","modified":1563969758173},{"_id":"themes/huhu/source/font/iconfont.svg","hash":"1e1ada8ab5b47f755907aaf1a572472ff8b00e0c","modified":1563969758183},{"_id":"themes/huhu/source/font/iconfont.woff","hash":"a4c9d6cedb5cbd00d51c216a0e96aed39f5a718f","modified":1563969758188},{"_id":"themes/huhu/source/font/iconfont.ttf","hash":"bec7794aa3370435ecd13b37add08263b8b5eee7","modified":1563969758185},{"_id":"themes/huhu/source/font/iconfont.woff2","hash":"69e8c59597859b6d3d73762d8610ba428779c2d3","modified":1563969758189},{"_id":"themes/huhu/source/images/favicon.ico","hash":"7ac7a1982d81c5e911c0fa7863c83c0f17804715","modified":1564026824839},{"_id":"themes/huhu/source/images/logo.jpeg","hash":"037ebeaa24db27cf039ad42e9887c4b63e7c0e61","modified":1563969758268},{"_id":"themes/huhu/source/images/9.jpg","hash":"b6fdca01280850a4c3cb5a264bc4e83ff075e774","modified":1563969758267},{"_id":"themes/huhu/source/images/8.jpg","hash":"5bb7c16de8a973ce25a82440e9c29d225c2c08ee","modified":1563969758266},{"_id":"themes/huhu/source/images/5.jpg","hash":"a2b1c29ffdc27158041d2ba6cfc4b13544396571","modified":1563969758260},{"_id":"themes/huhu/source/scripts/index.js","hash":"4ec3725113bad2653d79a6a671e9d5ac2c70fd85","modified":1563970448243},{"_id":"themes/huhu/source/scripts/viewer.js","hash":"abe215872222c323a151453bd1ca19b74018654c","modified":1563969758277},{"_id":"themes/huhu/source/style/font.styl","hash":"2c1735bd7a824cb818a30b97fd0b7c86f8cba6e5","modified":1563969758278},{"_id":"themes/huhu/source/style/highlight.styl","hash":"9c8bb2ccf41961c045f60aee1757cd4b940e8006","modified":1563969758278},{"_id":"themes/huhu/source/style/media.styl","hash":"f856d23b61adeb68293f389a5ae979de78e959b9","modified":1563969758279},{"_id":"themes/huhu/source/style/reset.styl","hash":"deb2db7459aa5dcb9c9218f7da0207243fdd6688","modified":1564033850359},{"_id":"themes/huhu/source/style/style.styl","hash":"3dd8d4a4f48578e9a1438062b208b961022c3c5d","modified":1564036542538},{"_id":"themes/huhu/source/scripts/dg.js","hash":"3d80cedf24a7dab4801796b910f433e43c479dd7","modified":1563969758273},{"_id":"themes/huhu/source/scripts/header.js","hash":"99118db2c5d36e1a735e0668b3b5d197a005d7e6","modified":1563969758274},{"_id":"themes/huhu/source/style/viewer.css","hash":"94c5930db734647d332b82b95278a70f0463b2fa","modified":1564026327310},{"_id":"themes/huhu/source/style/variables.styl","hash":"0fb3144fd67dee96bcd374090b2ad81ad9a42649","modified":1564036190167},{"_id":"themes/huhu/source/svg/eye-fill.svg","hash":"1d6a2a3eaf768ee9f7be9b8911b275a6e81a14ea","modified":1563969758295},{"_id":"themes/huhu/source/svg/facebook-fill.svg","hash":"986d9ce3c94dd164deb5a50aa34a926a8b66c58a","modified":1563969758297},{"_id":"themes/huhu/source/svg/dingtalk-circle-fill.svg","hash":"85d602255ce2a16b1f871ed254985bde37eb7f0c","modified":1563969758293},{"_id":"themes/huhu/source/svg/QQ-circle-fill.svg","hash":"0310595f3666c6852b579ea1ea394fd91261faa7","modified":1563969758291},{"_id":"themes/huhu/source/svg/heart-fill.svg","hash":"c321dd4fcaedd32411b0d72139b7233a3818bed6","modified":1563969758298},{"_id":"themes/huhu/source/svg/github-fill.svg","hash":"efa2da6b1bd9a797c36e5f03beb325c079000d2a","modified":1563969758298},{"_id":"themes/huhu/source/svg/underline.svg","hash":"e4a37c907241ca2c95425fba9697e695c7e1cce6","modified":1563969758299},{"_id":"themes/huhu/source/svg/weibo-circle-fill.svg","hash":"7da84811218360abf4ab932035bc343d59ac5ff1","modified":1563969758300},{"_id":"themes/huhu/source/svg/wechat-fill.svg","hash":"c21d793659c2c2a65dff5cdfe89355503523271f","modified":1563969758299},{"_id":"themes/huhu/source/images/2.jpg","hash":"3e83a7b40df33848e9fe64ffa4c9a3af0ce8648a","modified":1563969758237},{"_id":"themes/huhu/source/images/6.jpg","hash":"00626c0f5114ec454f1c432122191305a63c2ed5","modified":1563969758263},{"_id":"themes/huhu/source/scripts/jquery.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1563969758276},{"_id":"themes/huhu/source/pic/2.jpg","hash":"3e83a7b40df33848e9fe64ffa4c9a3af0ce8648a","modified":1563969758272},{"_id":"source/_posts/天空/1.jpeg","hash":"d5190e02f1f20ee7685d947e4eb5e3ef774ff6fc","modified":1563872297083},{"_id":"source/_posts/天空/3.jpeg","hash":"7dc00930f5ae8706520b2739ac81fa92c4e0fb43","modified":1563872297088},{"_id":"themes/huhu/.git/objects/10/75c151b5c66640f1f9975c0f12ed40ea566fad","hash":"463066c5b5ee552c49ac74cf4a67f0bbc16df88f","modified":1563971245745},{"_id":"themes/huhu/.git/objects/87/98f2b0c89b99e19b4764c01911f1779f9650cb","hash":"d9e0ca2396c4d0c73ccae7d9dda642150f938123","modified":1563971229187},{"_id":"themes/huhu/.git/objects/ea/04f8510553866dbd66feb6e263dbca40fc2d7b","hash":"f1db4904e3c9ab7d3c7a901426e46bfdfb6d1e70","modified":1563971245794},{"_id":"themes/huhu/.git/objects/fb/65d3c19c71eb643321cd41959b12fd0db1b59a","hash":"7c7d3342f8d7730e5d2d9fb470ef10fe803276a7","modified":1563971245750},{"_id":"themes/huhu/.git/objects/pack/pack-9f4f456236a2ad514bb81937358344a526e8310d.idx","hash":"8ec744857067ee293bdaa5a0df3444b53fd5e2ac","modified":1563969757940},{"_id":"themes/huhu/.git/refs/heads/master","hash":"39115542ea872ae6ab40fa8084042069e74f73f4","modified":1563971245819},{"_id":"themes/huhu/source/images/7.jpg","hash":"3208b3bb1ad81dbad183a1a7af5c282c9486ce87","modified":1563969758266},{"_id":"themes/huhu/.git/objects/41/4a315f658dcb73f3961c99cf870db60d6a6dc8","hash":"650f48fbefadafdc3958e53471f1147e0be87d10","modified":1563971245754},{"_id":"source/_posts/天空/2.jpeg","hash":"9ae7a8558ccb1ef5a88e05a0a63f88996fb79645","modified":1563872297086},{"_id":"themes/huhu/source/images/4.jpg","hash":"6ab65abd36321faf684414e30799d8cb43997c05","modified":1563969758257},{"_id":"source/_posts/南京游/2.jpeg","hash":"e4bc42f6a014519d44df2e20bcd33ffd8de92b0a","modified":1563872297070},{"_id":"source/_posts/南京游/5.jpeg","hash":"c6c94a753a8f2ffde76fd1c9f5e1042ca301147c","modified":1563872297080},{"_id":"source/_posts/南京游/3.jpeg","hash":"4236f68797470af694330d8955e98f8424cb9dc6","modified":1563872297074},{"_id":"themes/huhu/.git/logs/refs/heads/master","hash":"f99adb0ebe4bf6d64752f28729be21367b6708b5","modified":1563971245830},{"_id":"themes/huhu/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1563969758102},{"_id":"themes/huhu/.git/refs/remotes/origin/master","hash":"39115542ea872ae6ab40fa8084042069e74f73f4","modified":1563971332047},{"_id":"themes/huhu/source/pic/1.jpg","hash":"dd7de02cc6216ff63fa0005641d81facc549ed51","modified":1563969758271},{"_id":"source/_posts/南京游/4.jpeg","hash":"babac23aa627f7ae0d5804380d6e2e21aab4c37e","modified":1563872297077},{"_id":"source/_posts/南京游/1.jpeg","hash":"3241fad861794c85acd8a120d5c73c3f6ccd0e7e","modified":1563872297067},{"_id":"themes/huhu/source/images/3.jpg","hash":"1e49e1d1532f9ff69058df4fd3c7327669d0facb","modified":1563969758252},{"_id":"themes/huhu/.git/logs/refs/remotes/origin/master","hash":"52e9309d6331ddb57ca47ac48b530861a849b0d7","modified":1563971332049},{"_id":"themes/huhu/.git/logs/refs/remotes/origin/HEAD","hash":"62d815d0e1acbe38cfc7d70c5d99327ee9f3b62a","modified":1563969758101},{"_id":"themes/huhu/source/images/1.jpg","hash":"bc7b514128ab82729eca33c3f78025139b91f62f","modified":1563969758195},{"_id":"themes/huhu/source/images/10.jpg","hash":"d96a85c8eb74325b226190034076462ab700253a","modified":1563969758230},{"_id":"themes/huhu/.git/objects/pack/pack-9f4f456236a2ad514bb81937358344a526e8310d.pack","hash":"2f11aa22bc199fdab2f37ddeeafeb178dc85109f","modified":1563969757941}],"Category":[{"name":"Code","_id":"cjyiazwbj0003ygf00wo5r1wh"},{"name":"Note","_id":"cjyiazwc4000kygf0rvp9ftk9"},{"name":"代码","_id":"cjyiazwc9000rygf0crszabuf"},{"name":"Travel","_id":"cjyiazwe1002mygf07xhjato5"},{"name":"Daily","_id":"cjyiazwe8002wygf0tjir867a"},{"name":"LeetCode","_id":"cjyiazwef0036ygf0x9cn43ry"},{"name":"Code","parent":"cjyiazwef0036ygf0x9cn43ry","_id":"cjyiazweo003iygf06x5gncyf"}],"Data":[],"Page":[{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta name=\"generator\" content=\"Hexo 3.8.0\" />\n    <meta charset=\"UTF-8\" />\n    <title>404</title>\n  </head>\n  <body></body>\n</html>\n<script\n  type=\"text/javascript\"\n  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\"\n  charset=\"utf-8\"\n  homePageUrl=\"https://blog.utone.xyz/\"\n  homePageName=\"回到我的主页\"\n></script>\n","source":"404.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta name=\"generator\" content=\"Hexo 3.8.0\" />\n    <meta charset=\"UTF-8\" />\n    <title>404</title>\n  </head>\n  <body></body>\n</html>\n<script\n  type=\"text/javascript\"\n  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\"\n  charset=\"utf-8\"\n  homePageUrl=\"https://blog.utone.xyz/\"\n  homePageName=\"回到我的主页\"\n></script>\n","date":"2019-07-25T04:05:00.165Z","updated":"2019-07-25T04:05:00.165Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjyiazwah0000ygf0vm4jek92","content":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>404</title>\n  </head>\n  <body></body>\n</html>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://blog.utone.xyz/\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta name=\"generator\" content=\"Hexo 3.8.0\">\n    <meta charset=\"UTF-8\">\n    <title>404</title>\n  </head>\n  <body></body>\n</html>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://blog.utone.xyz/\" homepagename=\"回到我的主页\"></script>\n"},{"title":"关于","date":"2018-10-12T15:41:42.000Z","noDate":"true","_content":"\n> 也尝试过花里胡哨\n> 发现背驰了写技术博客的初衷\n> 记录技术，展示文字，才是写博客的初心\n> 简洁、突出文字输出，是 Utone 主题的格调\n\n#### 介绍\n\n- 虎虎\n- 94 生人\n- 目前上海\n- 就职携程\n- 喜欢电子前沿物件，但没钱\n- 做过 PHPer，现在做一个前端 er\n- 熟练使用 Linux、NodeJS、PHP、JavaScript、CSS\n- 喜欢周杰伦，还没有和喜欢的人，一起看周董演唱会\n- 在健身，但还不是肌肉男\n- 有时文艺，有时逗比，有时话痨\n\n#### 联系\n\n- Email asjdr123@163.com\n- 建议或意见，请至[github](https://github.com/shixiaohu2206)留 issues\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-10-12 23:41:42\nnoDate: \"true\"\n---\n\n> 也尝试过花里胡哨\n> 发现背驰了写技术博客的初衷\n> 记录技术，展示文字，才是写博客的初心\n> 简洁、突出文字输出，是 Utone 主题的格调\n\n#### 介绍\n\n- 虎虎\n- 94 生人\n- 目前上海\n- 就职携程\n- 喜欢电子前沿物件，但没钱\n- 做过 PHPer，现在做一个前端 er\n- 熟练使用 Linux、NodeJS、PHP、JavaScript、CSS\n- 喜欢周杰伦，还没有和喜欢的人，一起看周董演唱会\n- 在健身，但还不是肌肉男\n- 有时文艺，有时逗比，有时话痨\n\n#### 联系\n\n- Email asjdr123@163.com\n- 建议或意见，请至[github](https://github.com/shixiaohu2206)留 issues\n","updated":"2019-07-22T02:12:25.337Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjyiazwd6001wygf0yj7dcfx9","content":"<blockquote>\n<p>也尝试过花里胡哨<br>发现背驰了写技术博客的初衷<br>记录技术，展示文字，才是写博客的初心<br>简洁、突出文字输出，是 Utone 主题的格调</p>\n</blockquote>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ul>\n<li>虎虎</li>\n<li>94 生人</li>\n<li>目前上海</li>\n<li>就职携程</li>\n<li>喜欢电子前沿物件，但没钱</li>\n<li>做过 PHPer，现在做一个前端 er</li>\n<li>熟练使用 Linux、NodeJS、PHP、JavaScript、CSS</li>\n<li>喜欢周杰伦，还没有和喜欢的人，一起看周董演唱会</li>\n<li>在健身，但还不是肌肉男</li>\n<li>有时文艺，有时逗比，有时话痨</li>\n</ul>\n<h4 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h4><ul>\n<li>Email <a href=\"mailto:asjdr123@163.com\" target=\"_blank\" rel=\"noopener\">asjdr123@163.com</a></li>\n<li>建议或意见，请至<a href=\"https://github.com/shixiaohu2206\" target=\"_blank\" rel=\"noopener\">github</a>留 issues</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>也尝试过花里胡哨<br>发现背驰了写技术博客的初衷<br>记录技术，展示文字，才是写博客的初心<br>简洁、突出文字输出，是 Utone 主题的格调</p>\n</blockquote>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ul>\n<li>虎虎</li>\n<li>94 生人</li>\n<li>目前上海</li>\n<li>就职携程</li>\n<li>喜欢电子前沿物件，但没钱</li>\n<li>做过 PHPer，现在做一个前端 er</li>\n<li>熟练使用 Linux、NodeJS、PHP、JavaScript、CSS</li>\n<li>喜欢周杰伦，还没有和喜欢的人，一起看周董演唱会</li>\n<li>在健身，但还不是肌肉男</li>\n<li>有时文艺，有时逗比，有时话痨</li>\n</ul>\n<h4 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h4><ul>\n<li>Email <a href=\"mailto:asjdr123@163.com\" target=\"_blank\" rel=\"noopener\">asjdr123@163.com</a></li>\n<li>建议或意见，请至<a href=\"https://github.com/shixiaohu2206\" target=\"_blank\" rel=\"noopener\">github</a>留 issues</li>\n</ul>\n"}],"Post":[{"title":"git生成ssh秘钥","date":"2017-10-19T16:00:00.000Z","_content":"\n```bash\n// 查看是否存在秘钥\n$ cd ~/.ssh\n\n// 配置用户相关信息\n$ git config –global user.name ‘xxxxx’\n$ git config –global user.email ‘xxx@xx.xxx’\n\n// 查看用户配置的相关信息\n$ git config user.name\n$ git config user.email\n\n// 生成秘钥 (邮箱为上方配置的邮箱)\n$ ssh-keygen -t rsa -C ‘xxx@xx.xxx’\n\n// 连按三个空格\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /c/Users/Mr.Yang/.ssh/id_rsa.\nYour public key has been saved in /c/Users/Mr.Yang/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)\nThe key\"s randomart image is:\n+---[RSA 2048]----+\n|    +E .         |\n| ..+oo+          |\n| oo+*+.o         |\n|o.*===+o         |\n|==+*... S        |\n|B.+.o .o         |\n|++o. +  .        |\n| +o.+ .          |\n|.  o.o           |\n+----[SHA256]-----+\n```\n\n**~/ .ssh 文件夹下，生成两个文件，id_rsa（私有秘钥）和 id_rsa.pub（公有密钥）\nd_rsa.pub（公有密钥）可上传至远端，免密 push**\n","source":"_posts/GIT生成ssh秘钥.md","raw":"---\ntitle: git生成ssh秘钥\ndate: 2017-10-20\ntags:\n  - Git\n  - SSH\ncategories:\n  - Code\n---\n\n```bash\n// 查看是否存在秘钥\n$ cd ~/.ssh\n\n// 配置用户相关信息\n$ git config –global user.name ‘xxxxx’\n$ git config –global user.email ‘xxx@xx.xxx’\n\n// 查看用户配置的相关信息\n$ git config user.name\n$ git config user.email\n\n// 生成秘钥 (邮箱为上方配置的邮箱)\n$ ssh-keygen -t rsa -C ‘xxx@xx.xxx’\n\n// 连按三个空格\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /c/Users/Mr.Yang/.ssh/id_rsa.\nYour public key has been saved in /c/Users/Mr.Yang/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)\nThe key\"s randomart image is:\n+---[RSA 2048]----+\n|    +E .         |\n| ..+oo+          |\n| oo+*+.o         |\n|o.*===+o         |\n|==+*... S        |\n|B.+.o .o         |\n|++o. +  .        |\n| +o.+ .          |\n|.  o.o           |\n+----[SHA256]-----+\n```\n\n**~/ .ssh 文件夹下，生成两个文件，id_rsa（私有秘钥）和 id_rsa.pub（公有密钥）\nd_rsa.pub（公有密钥）可上传至远端，免密 push**\n","slug":"GIT生成ssh秘钥","published":1,"updated":"2019-07-23T08:58:17.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbe0001ygf0bfck0jga","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看是否存在秘钥</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置用户相关信息</span><br><span class=\"line\">$ git config –global user.name ‘xxxxx’</span><br><span class=\"line\">$ git config –global user.email ‘xxx@xx.xxx’</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看用户配置的相关信息</span><br><span class=\"line\">$ git config user.name</span><br><span class=\"line\">$ git config user.email</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成秘钥 (邮箱为上方配置的邮箱)</span><br><span class=\"line\">$ ssh-keygen -t rsa -C ‘xxx@xx.xxx’</span><br><span class=\"line\"></span><br><span class=\"line\">// 连按三个空格</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):</span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)</span><br><span class=\"line\">The key<span class=\"string\">\"s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">|    +E .         |</span></span><br><span class=\"line\"><span class=\"string\">| ..+oo+          |</span></span><br><span class=\"line\"><span class=\"string\">| oo+*+.o         |</span></span><br><span class=\"line\"><span class=\"string\">|o.*===+o         |</span></span><br><span class=\"line\"><span class=\"string\">|==+*... S        |</span></span><br><span class=\"line\"><span class=\"string\">|B.+.o .o         |</span></span><br><span class=\"line\"><span class=\"string\">|++o. +  .        |</span></span><br><span class=\"line\"><span class=\"string\">| +o.+ .          |</span></span><br><span class=\"line\"><span class=\"string\">|.  o.o           |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>\n<p><strong>~/ .ssh 文件夹下，生成两个文件，id_rsa（私有秘钥）和 id_rsa.pub（公有密钥）<br>d_rsa.pub（公有密钥）可上传至远端，免密 push</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查看是否存在秘钥</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置用户相关信息</span><br><span class=\"line\">$ git config –global user.name ‘xxxxx’</span><br><span class=\"line\">$ git config –global user.email ‘xxx@xx.xxx’</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看用户配置的相关信息</span><br><span class=\"line\">$ git config user.name</span><br><span class=\"line\">$ git config user.email</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成秘钥 (邮箱为上方配置的邮箱)</span><br><span class=\"line\">$ ssh-keygen -t rsa -C ‘xxx@xx.xxx’</span><br><span class=\"line\"></span><br><span class=\"line\">// 连按三个空格</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):</span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)</span><br><span class=\"line\">The key<span class=\"string\">\"s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">|    +E .         |</span></span><br><span class=\"line\"><span class=\"string\">| ..+oo+          |</span></span><br><span class=\"line\"><span class=\"string\">| oo+*+.o         |</span></span><br><span class=\"line\"><span class=\"string\">|o.*===+o         |</span></span><br><span class=\"line\"><span class=\"string\">|==+*... S        |</span></span><br><span class=\"line\"><span class=\"string\">|B.+.o .o         |</span></span><br><span class=\"line\"><span class=\"string\">|++o. +  .        |</span></span><br><span class=\"line\"><span class=\"string\">| +o.+ .          |</span></span><br><span class=\"line\"><span class=\"string\">|.  o.o           |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>\n<p><strong>~/ .ssh 文件夹下，生成两个文件，id_rsa（私有秘钥）和 id_rsa.pub（公有密钥）<br>d_rsa.pub（公有密钥）可上传至远端，免密 push</strong></p>\n"},{"title":"PHP连接MySql常用方法","date":"2017-11-29T16:00:00.000Z","_content":"\n## 面向过程连接\n\n```php\n// 配置\n$mysql_server=\"localhost\";\n$mysql_username=\"数据库用户名\";\n$mysql_password=\"数据库密码\";\n$mysql_database=\"数据库名\";\n// 建立数据库链接\n$conn = mysql_connect($mysql_server,$mysql_username,$mysql_password) or die(\"数据库链接错误\");\n// 选择某个数据库\nmysql_select_db($mysql_database,$conn);\nmysql_query(\"set names \"utf8\"\");\n// 执行MySQL语句\n$result=mysql_query(\"SELECT id,name FROM 数据库表\");\n// 提取数据\n$row=mysql_fetch_row($result);\n```\n\n<!--more-->\n\n## 面向对象连接\n\n```php\n$db=new mysqli($dbhost,$username,$userpass,$dbdatabase);\nif(mysqli_connect_error()){\necho \"Could not connect to database.\";\nexit;\n}\n$result=$db->query(\"SELECT id,name FROM user\");\n$row=$result->fetch_row();\n```\n\n## PDO 连接方式\n\n```php\n$dsn=\"mysql:host=\".$dbhost.\";dbname=\".$dbdatabase.\";\"\n$dbh=new PDO($dsn,$username,$userpass);\n$stmt=$dbh->query(\"SELECT id,name FROM user\");\n$row=$stmt->fetch();\n```\n","source":"_posts/3种PHP连接MYSQL数据库的常用方法.md","raw":"---\ntitle: PHP连接MySql常用方法\ndate: 2017-11-30\ntags:\n  - PHP\n  - MySql\ncategories:\n  - Code\n---\n\n## 面向过程连接\n\n```php\n// 配置\n$mysql_server=\"localhost\";\n$mysql_username=\"数据库用户名\";\n$mysql_password=\"数据库密码\";\n$mysql_database=\"数据库名\";\n// 建立数据库链接\n$conn = mysql_connect($mysql_server,$mysql_username,$mysql_password) or die(\"数据库链接错误\");\n// 选择某个数据库\nmysql_select_db($mysql_database,$conn);\nmysql_query(\"set names \"utf8\"\");\n// 执行MySQL语句\n$result=mysql_query(\"SELECT id,name FROM 数据库表\");\n// 提取数据\n$row=mysql_fetch_row($result);\n```\n\n<!--more-->\n\n## 面向对象连接\n\n```php\n$db=new mysqli($dbhost,$username,$userpass,$dbdatabase);\nif(mysqli_connect_error()){\necho \"Could not connect to database.\";\nexit;\n}\n$result=$db->query(\"SELECT id,name FROM user\");\n$row=$result->fetch_row();\n```\n\n## PDO 连接方式\n\n```php\n$dsn=\"mysql:host=\".$dbhost.\";dbname=\".$dbdatabase.\";\"\n$dbh=new PDO($dsn,$username,$userpass);\n$stmt=$dbh->query(\"SELECT id,name FROM user\");\n$row=$stmt->fetch();\n```\n","slug":"3种PHP连接MYSQL数据库的常用方法","published":1,"updated":"2019-07-23T08:58:17.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbh0002ygf05cbs7j99","content":"<h2 id=\"面向过程连接\"><a href=\"#面向过程连接\" class=\"headerlink\" title=\"面向过程连接\"></a>面向过程连接</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置</span></span><br><span class=\"line\">$mysql_server=<span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">$mysql_username=<span class=\"string\">\"数据库用户名\"</span>;</span><br><span class=\"line\">$mysql_password=<span class=\"string\">\"数据库密码\"</span>;</span><br><span class=\"line\">$mysql_database=<span class=\"string\">\"数据库名\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 建立数据库链接</span></span><br><span class=\"line\">$conn = mysql_connect($mysql_server,$mysql_username,$mysql_password) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"数据库链接错误\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 选择某个数据库</span></span><br><span class=\"line\">mysql_select_db($mysql_database,$conn);</span><br><span class=\"line\">mysql_query(<span class=\"string\">\"set names \"</span>utf8<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 执行MySQL语句</span></span><br><span class=\"line\">$result=mysql_query(<span class=\"string\">\"SELECT id,name FROM 数据库表\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 提取数据</span></span><br><span class=\"line\">$row=mysql_fetch_row($result);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"面向对象连接\"><a href=\"#面向对象连接\" class=\"headerlink\" title=\"面向对象连接\"></a>面向对象连接</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db=<span class=\"keyword\">new</span> mysqli($dbhost,$username,$userpass,$dbdatabase);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mysqli_connect_error())&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Could not connect to database.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">exit</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$result=$db-&gt;query(<span class=\"string\">\"SELECT id,name FROM user\"</span>);</span><br><span class=\"line\">$row=$result-&gt;fetch_row();</span><br></pre></td></tr></table></figure>\n<h2 id=\"PDO-连接方式\"><a href=\"#PDO-连接方式\" class=\"headerlink\" title=\"PDO 连接方式\"></a>PDO 连接方式</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dsn=<span class=\"string\">\"mysql:host=\"</span>.$dbhost.<span class=\"string\">\";dbname=\"</span>.$dbdatabase.<span class=\"string\">\";\"</span></span><br><span class=\"line\">$dbh=<span class=\"keyword\">new</span> PDO($dsn,$username,$userpass);</span><br><span class=\"line\">$stmt=$dbh-&gt;query(<span class=\"string\">\"SELECT id,name FROM user\"</span>);</span><br><span class=\"line\">$row=$stmt-&gt;fetch();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"面向过程连接\"><a href=\"#面向过程连接\" class=\"headerlink\" title=\"面向过程连接\"></a>面向过程连接</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置</span></span><br><span class=\"line\">$mysql_server=<span class=\"string\">\"localhost\"</span>;</span><br><span class=\"line\">$mysql_username=<span class=\"string\">\"数据库用户名\"</span>;</span><br><span class=\"line\">$mysql_password=<span class=\"string\">\"数据库密码\"</span>;</span><br><span class=\"line\">$mysql_database=<span class=\"string\">\"数据库名\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 建立数据库链接</span></span><br><span class=\"line\">$conn = mysql_connect($mysql_server,$mysql_username,$mysql_password) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">\"数据库链接错误\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 选择某个数据库</span></span><br><span class=\"line\">mysql_select_db($mysql_database,$conn);</span><br><span class=\"line\">mysql_query(<span class=\"string\">\"set names \"</span>utf8<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 执行MySQL语句</span></span><br><span class=\"line\">$result=mysql_query(<span class=\"string\">\"SELECT id,name FROM 数据库表\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 提取数据</span></span><br><span class=\"line\">$row=mysql_fetch_row($result);</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"面向对象连接\"><a href=\"#面向对象连接\" class=\"headerlink\" title=\"面向对象连接\"></a>面向对象连接</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$db=<span class=\"keyword\">new</span> mysqli($dbhost,$username,$userpass,$dbdatabase);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(mysqli_connect_error())&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Could not connect to database.\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">exit</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$result=$db-&gt;query(<span class=\"string\">\"SELECT id,name FROM user\"</span>);</span><br><span class=\"line\">$row=$result-&gt;fetch_row();</span><br></pre></td></tr></table></figure>\n<h2 id=\"PDO-连接方式\"><a href=\"#PDO-连接方式\" class=\"headerlink\" title=\"PDO 连接方式\"></a>PDO 连接方式</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dsn=<span class=\"string\">\"mysql:host=\"</span>.$dbhost.<span class=\"string\">\";dbname=\"</span>.$dbdatabase.<span class=\"string\">\";\"</span></span><br><span class=\"line\">$dbh=<span class=\"keyword\">new</span> PDO($dsn,$username,$userpass);</span><br><span class=\"line\">$stmt=$dbh-&gt;query(<span class=\"string\">\"SELECT id,name FROM user\"</span>);</span><br><span class=\"line\">$row=$stmt-&gt;fetch();</span><br></pre></td></tr></table></figure>"},{"title":"Eslint 配置参数说明","date":"2019-04-15T09:39:06.000Z","_content":"\n### Eslint 配置参数说明\n\n- 0 或’off’：关闭规则。\n- 1 或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。\n- 2 或’error’：打开规则，并且作为一个错误 (退出码为 1，检查不通过)。\n\n<!--more-->\n\n### ESLint 常用配置\n\n- Possible Errors 可能的错误或逻辑错误\n- no-cond-assign 禁止条件表达式中出现模棱两可的赋值操作符\n- no-console 禁用 console\n- no-constant-condition 禁止在条件中使用常量表达式\n- no-debugger 禁用 debugger\n- no-dupe-args 禁止 function 定义中出现重名参数\n- no-dupe-keys 禁止对象字面量中出现重复的 key\n- no-duplicate-case 禁止出现重复的 case 标签\n- no-empty 禁止出现空语句块\n- no-ex-assign 禁止对 catch 子句的参数重新赋值\n- no-extra-boolean-cast 禁止不必要的布尔转换\n- no-extra-parens 禁止不必要的括号\n- no-extra-semi 禁止不必要的分号\n- no-func-assign 禁止对 function 声明重新赋值\n- no-inner-declarations 禁止在嵌套的块中出现变量声明或 function 声明\n- no-irregular-whitespace 禁止在字符串和注释之外不规则的空白\n- no-obj-calls 禁止把全局对象作为函数调用\n- no-sparse-arrays 禁用稀疏数组\n- no-prototype-builtins 禁止直接使用 Object.prototypes 的内置属性\n- no-unexpected-multiline 禁止出现令人困惑的多行表达式\n- no-unreachable 禁止在 return、throw、continue 和 break 语句之后出现不可达代码\n- use-isnan 要求使用 isNaN() 检查 NaN\n- valid-typeof 强制 typeof 表达式与有效的字符串进行比较\n\n### Best Practices 最佳实践\n\n- array-callback-return 强制数组方法的回调函数中有 return 语句\n- block-scoped-var 强制把变量的使用限制在其定义的作用域范围内\n- complexity 指定程序中允许的最大环路复杂度\n- consistent-return 要求 return 语句要么总是指定返回的值，要么不指定\n- curly 强制所有控制语句使用一致的括号风格\n- default-case 要求 switch 语句中有 default 分支\n- dot-location 强制在点号之前和之后一致的换行\n- dot-notation 强制在任何允许的时候使用点号\n- eqeqeq 要求使用 === 和 !==\n- guard-for-in 要求 for-in 循环中有一个 if 语句\n- no-alert 禁用 alert、confirm 和 prompt\n- no-case-declarations 不允许在 case 子句中使用词法声明\n- no-else-return 禁止 if 语句中有 return 之后有 else\n- no-empty-function 禁止出现空函数\n- no-eq-null 禁止在没有类型检查操作符的情况下与 null 进行比较\n- no-eval 禁用 eval()\n- no-extra-bind 禁止不必要的 .bind() 调用\n- no-fallthrough 禁止 case 语句落空\n- no-floating-decimal 禁止数字字面量中使用前导和末尾小数点\n- no-implicit-coercion 禁止使用短符号进行类型转换\n- no-implicit-globals 禁止在全局范围内使用 var 和命名的 function 声明\n- no-invalid-this: 禁止 this 关键字出现在类和类对象之外\n- no-lone-blocks 禁用不必要的嵌套块\n- no-loop-func 禁止在循环中出现 function 声明和表达式\n- no-magic-numbers 禁用魔术数字\n- no-multi-spaces 禁止使用多个空格\n- no-multi-str 禁止使用多行字符串\n- no-new 禁止在非赋值或条件语句中使用 new 操作符\n- no-new-func 禁止对 Function 对象使用 new 操作符\n- no-new-wrappers 禁止对 String，Number 和 Boolean 使用 new 操作符\n- no-param-reassign 不允许对 function 的参数进行重新赋值\n- no-redeclare 禁止使用 var 多次声明同一变量\n- no-return-assign 禁止在 return 语句中使用赋值语句\n- no-script-url 禁止使用 javascript: url\n- no-self-assign 禁止自我赋值\n- no-self-compare 禁止自身比较\n- no-sequences 禁用逗号操作符\n- no-unmodified-loop-condition 禁用一成不变的循环条件\n- no-unused-expressions 禁止出现未使用过的表达式\n- no-useless-call 禁止不必要的 .call() 和 .apply()\n- no-useless-concat 禁止不必要的字符串字面量或模板字面量的连接\n- vars-on-top 要求所有的 var 声明出现在它们所在的作用域顶部\n- Strict Mode 使用严格模式和严格模式指\n- strict 要求或禁止使用严格模式指令\n\n### Variables 变量声明\n\n- init-declarations 要求或禁止 var 声明中的初始化\n- no-catch-shadow 不允许 catch 子句的参数与外层作用域中的变量同名\n- no-restricted-globals 禁用特定的全局变量\n- no-shadow 禁止 var 声明 与外层作用域的变量同名\n- no-undef 禁用未声明的变量，除非它们在 /global / 注释中被提到\n- no-undef-init 禁止将变量初始化为 undefined\n- no-unused-vars 禁止出现未使用过的变量\n- no-use-before-define 不允许在变量定义之前使用它们\n\n### Nodejs and CommonJS Node.js,CommonJS\n\n- global-require 要求 require() 出现在顶层模块作用域中\n- handle-callback-err 要求回调函数中有容错处理\n- no-mixed-requires 禁止混合常规 var 声明和 require 调用\n- no-new-require 禁止调用 require 时使用 new 操作符\n- no-path-concat 禁止对 dirname 和 filename 进行字符串连接\n- no-restricted-modules 禁用指定的通过 require 加载的模块\n\n### Stylistic Issues 风格指南\n\n- array-bracket-spacing 强制数组方括号中使用一致的空格\n- block-spacing 强制在单行代码块中使用一致的空格\n- brace-style 强制在代码块中使用一致的大括号风格\n- camelcase 强制使用骆驼拼写法命名约定\n- comma-spacing 强制在逗号前后使用一致的空格\n- comma-style 强制使用一致的逗号风格\n- computed-property-spacing 强制在计算的属性的方括号中使用一致的空格\n- eol-last 强制文件末尾至少保留一行空行\n- func-names 强制使用命名的 function 表达式\n- func-style 强制一致地使用函数声明或函数表达式\n- indent 强制使用一致的缩进\n- jsx-quotes 强制在 JSX 属性中一致地使用双引号或单引号\n- key-spacing 强制在对象字面量的属性中键和值之间使用一致的间距\n- keyword-spacing 强制在关键字前后使用一致的空格\n- linebreak-style 强制使用一致的换行风格\n- lines-around-comment 要求在注释周围有空行\n- max-depth 强制可嵌套的块的最大深度\n- max-len 强制一行的最大长度\n- max-lines 强制最大行数\n- max-nested-callbacks 强制回调函数最大嵌套深度\n- max-params 强制 function 定义中最多允许的参数数量\n- max-statements 强制 function 块最多允许的的语句数量\n- max-statements-per-line 强制每一行中所允许的最大语句数量\n- new-cap 要求构造函数首字母大写\n- new-parens 要求调用无参构造函数时有圆括号\n- newline-after-var 要求或禁止 var 声明语句后有一行空行\n- newline-before-return 要求 return 语句之前有一空行\n- newline-per-chained-call 要求方法链中每个调用都有一个换行符\n- no-array-constructor 禁止使用 Array 构造函数\n- no-continue 禁用 continue 语句\n- no-inline-comments 禁止在代码行后使用内联注释\n- no-lonely-if 禁止 if 作为唯一的语句出现在 else 语句中\n- no-mixed-spaces-and-tabs 不允许空格和 tab 混合缩进\n- no-multiple-empty-lines 不允许多个空行\n- no-negated-condition 不允许否定的表达式\n- no-plusplus 禁止使用一元操作符 ++ 和 --\n- no-spaced-func 禁止 function 标识符和括号之间出现空格\n- no-ternary 不允许使用三元操作符\n- no-trailing-spaces 禁用行尾空格\n- no-whitespace-before-property 禁止属性前有空白\n- object-curly-newline 强制花括号内换行符的一致性\n- object-curly-spacing 强制在花括号中使用一致的空格\n- object-property-newline 强制将对象的属性放在不同的行上\n- one-var 强制函数中的变量要么一起声明要么分开声明\n- one-var-declaration-per-line 要求或禁止在 var 声明周围换行\n- operator-assignment 要求或禁止在可能的情况下要求使用简化的赋值操作符\n- operator-linebreak 强制操作符使用一致的换行符\n- quote-props 要求对象字面量属性名称用引号括起来\n- quotes 强制使用一致的反勾号、双引号或单引号\n- require-jsdoc 要求使用 JSDoc 注释\n- semi 要求或禁止使用分号而不是 ASI\n- semi-spacing 强制分号之前和之后使用一致的空格\n- sort-vars 要求同一个声明块中的变量按顺序排列\n- space-before-blocks 强制在块之前使用一致的空格\n- space-before-function-paren 强制在 function 的左括号之前使用一致的空格\n- space-in-parens 强制在圆括号内使用一致的空格\n- space-infix-ops 要求操作符周围有空格\n- space-unary-ops 强制在一元操作符前后使用一致的空格\n- spaced-comment 强制在注释中 // 或 /\\* 使用一致的空格\n","source":"_posts/Eslint 配置参数说明.md","raw":"---\ntitle: Eslint 配置参数说明\ndate: 2019-04-15 17:39:06\ntags:\n  - JavaScript\n  - Eslint\ncategories:\n  - Code\n---\n\n### Eslint 配置参数说明\n\n- 0 或’off’：关闭规则。\n- 1 或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。\n- 2 或’error’：打开规则，并且作为一个错误 (退出码为 1，检查不通过)。\n\n<!--more-->\n\n### ESLint 常用配置\n\n- Possible Errors 可能的错误或逻辑错误\n- no-cond-assign 禁止条件表达式中出现模棱两可的赋值操作符\n- no-console 禁用 console\n- no-constant-condition 禁止在条件中使用常量表达式\n- no-debugger 禁用 debugger\n- no-dupe-args 禁止 function 定义中出现重名参数\n- no-dupe-keys 禁止对象字面量中出现重复的 key\n- no-duplicate-case 禁止出现重复的 case 标签\n- no-empty 禁止出现空语句块\n- no-ex-assign 禁止对 catch 子句的参数重新赋值\n- no-extra-boolean-cast 禁止不必要的布尔转换\n- no-extra-parens 禁止不必要的括号\n- no-extra-semi 禁止不必要的分号\n- no-func-assign 禁止对 function 声明重新赋值\n- no-inner-declarations 禁止在嵌套的块中出现变量声明或 function 声明\n- no-irregular-whitespace 禁止在字符串和注释之外不规则的空白\n- no-obj-calls 禁止把全局对象作为函数调用\n- no-sparse-arrays 禁用稀疏数组\n- no-prototype-builtins 禁止直接使用 Object.prototypes 的内置属性\n- no-unexpected-multiline 禁止出现令人困惑的多行表达式\n- no-unreachable 禁止在 return、throw、continue 和 break 语句之后出现不可达代码\n- use-isnan 要求使用 isNaN() 检查 NaN\n- valid-typeof 强制 typeof 表达式与有效的字符串进行比较\n\n### Best Practices 最佳实践\n\n- array-callback-return 强制数组方法的回调函数中有 return 语句\n- block-scoped-var 强制把变量的使用限制在其定义的作用域范围内\n- complexity 指定程序中允许的最大环路复杂度\n- consistent-return 要求 return 语句要么总是指定返回的值，要么不指定\n- curly 强制所有控制语句使用一致的括号风格\n- default-case 要求 switch 语句中有 default 分支\n- dot-location 强制在点号之前和之后一致的换行\n- dot-notation 强制在任何允许的时候使用点号\n- eqeqeq 要求使用 === 和 !==\n- guard-for-in 要求 for-in 循环中有一个 if 语句\n- no-alert 禁用 alert、confirm 和 prompt\n- no-case-declarations 不允许在 case 子句中使用词法声明\n- no-else-return 禁止 if 语句中有 return 之后有 else\n- no-empty-function 禁止出现空函数\n- no-eq-null 禁止在没有类型检查操作符的情况下与 null 进行比较\n- no-eval 禁用 eval()\n- no-extra-bind 禁止不必要的 .bind() 调用\n- no-fallthrough 禁止 case 语句落空\n- no-floating-decimal 禁止数字字面量中使用前导和末尾小数点\n- no-implicit-coercion 禁止使用短符号进行类型转换\n- no-implicit-globals 禁止在全局范围内使用 var 和命名的 function 声明\n- no-invalid-this: 禁止 this 关键字出现在类和类对象之外\n- no-lone-blocks 禁用不必要的嵌套块\n- no-loop-func 禁止在循环中出现 function 声明和表达式\n- no-magic-numbers 禁用魔术数字\n- no-multi-spaces 禁止使用多个空格\n- no-multi-str 禁止使用多行字符串\n- no-new 禁止在非赋值或条件语句中使用 new 操作符\n- no-new-func 禁止对 Function 对象使用 new 操作符\n- no-new-wrappers 禁止对 String，Number 和 Boolean 使用 new 操作符\n- no-param-reassign 不允许对 function 的参数进行重新赋值\n- no-redeclare 禁止使用 var 多次声明同一变量\n- no-return-assign 禁止在 return 语句中使用赋值语句\n- no-script-url 禁止使用 javascript: url\n- no-self-assign 禁止自我赋值\n- no-self-compare 禁止自身比较\n- no-sequences 禁用逗号操作符\n- no-unmodified-loop-condition 禁用一成不变的循环条件\n- no-unused-expressions 禁止出现未使用过的表达式\n- no-useless-call 禁止不必要的 .call() 和 .apply()\n- no-useless-concat 禁止不必要的字符串字面量或模板字面量的连接\n- vars-on-top 要求所有的 var 声明出现在它们所在的作用域顶部\n- Strict Mode 使用严格模式和严格模式指\n- strict 要求或禁止使用严格模式指令\n\n### Variables 变量声明\n\n- init-declarations 要求或禁止 var 声明中的初始化\n- no-catch-shadow 不允许 catch 子句的参数与外层作用域中的变量同名\n- no-restricted-globals 禁用特定的全局变量\n- no-shadow 禁止 var 声明 与外层作用域的变量同名\n- no-undef 禁用未声明的变量，除非它们在 /global / 注释中被提到\n- no-undef-init 禁止将变量初始化为 undefined\n- no-unused-vars 禁止出现未使用过的变量\n- no-use-before-define 不允许在变量定义之前使用它们\n\n### Nodejs and CommonJS Node.js,CommonJS\n\n- global-require 要求 require() 出现在顶层模块作用域中\n- handle-callback-err 要求回调函数中有容错处理\n- no-mixed-requires 禁止混合常规 var 声明和 require 调用\n- no-new-require 禁止调用 require 时使用 new 操作符\n- no-path-concat 禁止对 dirname 和 filename 进行字符串连接\n- no-restricted-modules 禁用指定的通过 require 加载的模块\n\n### Stylistic Issues 风格指南\n\n- array-bracket-spacing 强制数组方括号中使用一致的空格\n- block-spacing 强制在单行代码块中使用一致的空格\n- brace-style 强制在代码块中使用一致的大括号风格\n- camelcase 强制使用骆驼拼写法命名约定\n- comma-spacing 强制在逗号前后使用一致的空格\n- comma-style 强制使用一致的逗号风格\n- computed-property-spacing 强制在计算的属性的方括号中使用一致的空格\n- eol-last 强制文件末尾至少保留一行空行\n- func-names 强制使用命名的 function 表达式\n- func-style 强制一致地使用函数声明或函数表达式\n- indent 强制使用一致的缩进\n- jsx-quotes 强制在 JSX 属性中一致地使用双引号或单引号\n- key-spacing 强制在对象字面量的属性中键和值之间使用一致的间距\n- keyword-spacing 强制在关键字前后使用一致的空格\n- linebreak-style 强制使用一致的换行风格\n- lines-around-comment 要求在注释周围有空行\n- max-depth 强制可嵌套的块的最大深度\n- max-len 强制一行的最大长度\n- max-lines 强制最大行数\n- max-nested-callbacks 强制回调函数最大嵌套深度\n- max-params 强制 function 定义中最多允许的参数数量\n- max-statements 强制 function 块最多允许的的语句数量\n- max-statements-per-line 强制每一行中所允许的最大语句数量\n- new-cap 要求构造函数首字母大写\n- new-parens 要求调用无参构造函数时有圆括号\n- newline-after-var 要求或禁止 var 声明语句后有一行空行\n- newline-before-return 要求 return 语句之前有一空行\n- newline-per-chained-call 要求方法链中每个调用都有一个换行符\n- no-array-constructor 禁止使用 Array 构造函数\n- no-continue 禁用 continue 语句\n- no-inline-comments 禁止在代码行后使用内联注释\n- no-lonely-if 禁止 if 作为唯一的语句出现在 else 语句中\n- no-mixed-spaces-and-tabs 不允许空格和 tab 混合缩进\n- no-multiple-empty-lines 不允许多个空行\n- no-negated-condition 不允许否定的表达式\n- no-plusplus 禁止使用一元操作符 ++ 和 --\n- no-spaced-func 禁止 function 标识符和括号之间出现空格\n- no-ternary 不允许使用三元操作符\n- no-trailing-spaces 禁用行尾空格\n- no-whitespace-before-property 禁止属性前有空白\n- object-curly-newline 强制花括号内换行符的一致性\n- object-curly-spacing 强制在花括号中使用一致的空格\n- object-property-newline 强制将对象的属性放在不同的行上\n- one-var 强制函数中的变量要么一起声明要么分开声明\n- one-var-declaration-per-line 要求或禁止在 var 声明周围换行\n- operator-assignment 要求或禁止在可能的情况下要求使用简化的赋值操作符\n- operator-linebreak 强制操作符使用一致的换行符\n- quote-props 要求对象字面量属性名称用引号括起来\n- quotes 强制使用一致的反勾号、双引号或单引号\n- require-jsdoc 要求使用 JSDoc 注释\n- semi 要求或禁止使用分号而不是 ASI\n- semi-spacing 强制分号之前和之后使用一致的空格\n- sort-vars 要求同一个声明块中的变量按顺序排列\n- space-before-blocks 强制在块之前使用一致的空格\n- space-before-function-paren 强制在 function 的左括号之前使用一致的空格\n- space-in-parens 强制在圆括号内使用一致的空格\n- space-infix-ops 要求操作符周围有空格\n- space-unary-ops 强制在一元操作符前后使用一致的空格\n- spaced-comment 强制在注释中 // 或 /\\* 使用一致的空格\n","slug":"Eslint 配置参数说明","published":1,"updated":"2019-07-23T08:58:17.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbm0005ygf0ngrw6k7b","content":"<h3 id=\"Eslint-配置参数说明\"><a href=\"#Eslint-配置参数说明\" class=\"headerlink\" title=\"Eslint 配置参数说明\"></a>Eslint 配置参数说明</h3><ul>\n<li>0 或’off’：关闭规则。</li>\n<li>1 或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。</li>\n<li>2 或’error’：打开规则，并且作为一个错误 (退出码为 1，检查不通过)。</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"ESLint-常用配置\"><a href=\"#ESLint-常用配置\" class=\"headerlink\" title=\"ESLint 常用配置\"></a>ESLint 常用配置</h3><ul>\n<li>Possible Errors 可能的错误或逻辑错误</li>\n<li>no-cond-assign 禁止条件表达式中出现模棱两可的赋值操作符</li>\n<li>no-console 禁用 console</li>\n<li>no-constant-condition 禁止在条件中使用常量表达式</li>\n<li>no-debugger 禁用 debugger</li>\n<li>no-dupe-args 禁止 function 定义中出现重名参数</li>\n<li>no-dupe-keys 禁止对象字面量中出现重复的 key</li>\n<li>no-duplicate-case 禁止出现重复的 case 标签</li>\n<li>no-empty 禁止出现空语句块</li>\n<li>no-ex-assign 禁止对 catch 子句的参数重新赋值</li>\n<li>no-extra-boolean-cast 禁止不必要的布尔转换</li>\n<li>no-extra-parens 禁止不必要的括号</li>\n<li>no-extra-semi 禁止不必要的分号</li>\n<li>no-func-assign 禁止对 function 声明重新赋值</li>\n<li>no-inner-declarations 禁止在嵌套的块中出现变量声明或 function 声明</li>\n<li>no-irregular-whitespace 禁止在字符串和注释之外不规则的空白</li>\n<li>no-obj-calls 禁止把全局对象作为函数调用</li>\n<li>no-sparse-arrays 禁用稀疏数组</li>\n<li>no-prototype-builtins 禁止直接使用 Object.prototypes 的内置属性</li>\n<li>no-unexpected-multiline 禁止出现令人困惑的多行表达式</li>\n<li>no-unreachable 禁止在 return、throw、continue 和 break 语句之后出现不可达代码</li>\n<li>use-isnan 要求使用 isNaN() 检查 NaN</li>\n<li>valid-typeof 强制 typeof 表达式与有效的字符串进行比较</li>\n</ul>\n<h3 id=\"Best-Practices-最佳实践\"><a href=\"#Best-Practices-最佳实践\" class=\"headerlink\" title=\"Best Practices 最佳实践\"></a>Best Practices 最佳实践</h3><ul>\n<li>array-callback-return 强制数组方法的回调函数中有 return 语句</li>\n<li>block-scoped-var 强制把变量的使用限制在其定义的作用域范围内</li>\n<li>complexity 指定程序中允许的最大环路复杂度</li>\n<li>consistent-return 要求 return 语句要么总是指定返回的值，要么不指定</li>\n<li>curly 强制所有控制语句使用一致的括号风格</li>\n<li>default-case 要求 switch 语句中有 default 分支</li>\n<li>dot-location 强制在点号之前和之后一致的换行</li>\n<li>dot-notation 强制在任何允许的时候使用点号</li>\n<li>eqeqeq 要求使用 === 和 !==</li>\n<li>guard-for-in 要求 for-in 循环中有一个 if 语句</li>\n<li>no-alert 禁用 alert、confirm 和 prompt</li>\n<li>no-case-declarations 不允许在 case 子句中使用词法声明</li>\n<li>no-else-return 禁止 if 语句中有 return 之后有 else</li>\n<li>no-empty-function 禁止出现空函数</li>\n<li>no-eq-null 禁止在没有类型检查操作符的情况下与 null 进行比较</li>\n<li>no-eval 禁用 eval()</li>\n<li>no-extra-bind 禁止不必要的 .bind() 调用</li>\n<li>no-fallthrough 禁止 case 语句落空</li>\n<li>no-floating-decimal 禁止数字字面量中使用前导和末尾小数点</li>\n<li>no-implicit-coercion 禁止使用短符号进行类型转换</li>\n<li>no-implicit-globals 禁止在全局范围内使用 var 和命名的 function 声明</li>\n<li>no-invalid-this: 禁止 this 关键字出现在类和类对象之外</li>\n<li>no-lone-blocks 禁用不必要的嵌套块</li>\n<li>no-loop-func 禁止在循环中出现 function 声明和表达式</li>\n<li>no-magic-numbers 禁用魔术数字</li>\n<li>no-multi-spaces 禁止使用多个空格</li>\n<li>no-multi-str 禁止使用多行字符串</li>\n<li>no-new 禁止在非赋值或条件语句中使用 new 操作符</li>\n<li>no-new-func 禁止对 Function 对象使用 new 操作符</li>\n<li>no-new-wrappers 禁止对 String，Number 和 Boolean 使用 new 操作符</li>\n<li>no-param-reassign 不允许对 function 的参数进行重新赋值</li>\n<li>no-redeclare 禁止使用 var 多次声明同一变量</li>\n<li>no-return-assign 禁止在 return 语句中使用赋值语句</li>\n<li>no-script-url 禁止使用 javascript: url</li>\n<li>no-self-assign 禁止自我赋值</li>\n<li>no-self-compare 禁止自身比较</li>\n<li>no-sequences 禁用逗号操作符</li>\n<li>no-unmodified-loop-condition 禁用一成不变的循环条件</li>\n<li>no-unused-expressions 禁止出现未使用过的表达式</li>\n<li>no-useless-call 禁止不必要的 .call() 和 .apply()</li>\n<li>no-useless-concat 禁止不必要的字符串字面量或模板字面量的连接</li>\n<li>vars-on-top 要求所有的 var 声明出现在它们所在的作用域顶部</li>\n<li>Strict Mode 使用严格模式和严格模式指</li>\n<li>strict 要求或禁止使用严格模式指令</li>\n</ul>\n<h3 id=\"Variables-变量声明\"><a href=\"#Variables-变量声明\" class=\"headerlink\" title=\"Variables 变量声明\"></a>Variables 变量声明</h3><ul>\n<li>init-declarations 要求或禁止 var 声明中的初始化</li>\n<li>no-catch-shadow 不允许 catch 子句的参数与外层作用域中的变量同名</li>\n<li>no-restricted-globals 禁用特定的全局变量</li>\n<li>no-shadow 禁止 var 声明 与外层作用域的变量同名</li>\n<li>no-undef 禁用未声明的变量，除非它们在 /global / 注释中被提到</li>\n<li>no-undef-init 禁止将变量初始化为 undefined</li>\n<li>no-unused-vars 禁止出现未使用过的变量</li>\n<li>no-use-before-define 不允许在变量定义之前使用它们</li>\n</ul>\n<h3 id=\"Nodejs-and-CommonJS-Node-js-CommonJS\"><a href=\"#Nodejs-and-CommonJS-Node-js-CommonJS\" class=\"headerlink\" title=\"Nodejs and CommonJS Node.js,CommonJS\"></a>Nodejs and CommonJS Node.js,CommonJS</h3><ul>\n<li>global-require 要求 require() 出现在顶层模块作用域中</li>\n<li>handle-callback-err 要求回调函数中有容错处理</li>\n<li>no-mixed-requires 禁止混合常规 var 声明和 require 调用</li>\n<li>no-new-require 禁止调用 require 时使用 new 操作符</li>\n<li>no-path-concat 禁止对 dirname 和 filename 进行字符串连接</li>\n<li>no-restricted-modules 禁用指定的通过 require 加载的模块</li>\n</ul>\n<h3 id=\"Stylistic-Issues-风格指南\"><a href=\"#Stylistic-Issues-风格指南\" class=\"headerlink\" title=\"Stylistic Issues 风格指南\"></a>Stylistic Issues 风格指南</h3><ul>\n<li>array-bracket-spacing 强制数组方括号中使用一致的空格</li>\n<li>block-spacing 强制在单行代码块中使用一致的空格</li>\n<li>brace-style 强制在代码块中使用一致的大括号风格</li>\n<li>camelcase 强制使用骆驼拼写法命名约定</li>\n<li>comma-spacing 强制在逗号前后使用一致的空格</li>\n<li>comma-style 强制使用一致的逗号风格</li>\n<li>computed-property-spacing 强制在计算的属性的方括号中使用一致的空格</li>\n<li>eol-last 强制文件末尾至少保留一行空行</li>\n<li>func-names 强制使用命名的 function 表达式</li>\n<li>func-style 强制一致地使用函数声明或函数表达式</li>\n<li>indent 强制使用一致的缩进</li>\n<li>jsx-quotes 强制在 JSX 属性中一致地使用双引号或单引号</li>\n<li>key-spacing 强制在对象字面量的属性中键和值之间使用一致的间距</li>\n<li>keyword-spacing 强制在关键字前后使用一致的空格</li>\n<li>linebreak-style 强制使用一致的换行风格</li>\n<li>lines-around-comment 要求在注释周围有空行</li>\n<li>max-depth 强制可嵌套的块的最大深度</li>\n<li>max-len 强制一行的最大长度</li>\n<li>max-lines 强制最大行数</li>\n<li>max-nested-callbacks 强制回调函数最大嵌套深度</li>\n<li>max-params 强制 function 定义中最多允许的参数数量</li>\n<li>max-statements 强制 function 块最多允许的的语句数量</li>\n<li>max-statements-per-line 强制每一行中所允许的最大语句数量</li>\n<li>new-cap 要求构造函数首字母大写</li>\n<li>new-parens 要求调用无参构造函数时有圆括号</li>\n<li>newline-after-var 要求或禁止 var 声明语句后有一行空行</li>\n<li>newline-before-return 要求 return 语句之前有一空行</li>\n<li>newline-per-chained-call 要求方法链中每个调用都有一个换行符</li>\n<li>no-array-constructor 禁止使用 Array 构造函数</li>\n<li>no-continue 禁用 continue 语句</li>\n<li>no-inline-comments 禁止在代码行后使用内联注释</li>\n<li>no-lonely-if 禁止 if 作为唯一的语句出现在 else 语句中</li>\n<li>no-mixed-spaces-and-tabs 不允许空格和 tab 混合缩进</li>\n<li>no-multiple-empty-lines 不允许多个空行</li>\n<li>no-negated-condition 不允许否定的表达式</li>\n<li>no-plusplus 禁止使用一元操作符 ++ 和 –</li>\n<li>no-spaced-func 禁止 function 标识符和括号之间出现空格</li>\n<li>no-ternary 不允许使用三元操作符</li>\n<li>no-trailing-spaces 禁用行尾空格</li>\n<li>no-whitespace-before-property 禁止属性前有空白</li>\n<li>object-curly-newline 强制花括号内换行符的一致性</li>\n<li>object-curly-spacing 强制在花括号中使用一致的空格</li>\n<li>object-property-newline 强制将对象的属性放在不同的行上</li>\n<li>one-var 强制函数中的变量要么一起声明要么分开声明</li>\n<li>one-var-declaration-per-line 要求或禁止在 var 声明周围换行</li>\n<li>operator-assignment 要求或禁止在可能的情况下要求使用简化的赋值操作符</li>\n<li>operator-linebreak 强制操作符使用一致的换行符</li>\n<li>quote-props 要求对象字面量属性名称用引号括起来</li>\n<li>quotes 强制使用一致的反勾号、双引号或单引号</li>\n<li>require-jsdoc 要求使用 JSDoc 注释</li>\n<li>semi 要求或禁止使用分号而不是 ASI</li>\n<li>semi-spacing 强制分号之前和之后使用一致的空格</li>\n<li>sort-vars 要求同一个声明块中的变量按顺序排列</li>\n<li>space-before-blocks 强制在块之前使用一致的空格</li>\n<li>space-before-function-paren 强制在 function 的左括号之前使用一致的空格</li>\n<li>space-in-parens 强制在圆括号内使用一致的空格</li>\n<li>space-infix-ops 要求操作符周围有空格</li>\n<li>space-unary-ops 强制在一元操作符前后使用一致的空格</li>\n<li>spaced-comment 强制在注释中 // 或 /* 使用一致的空格</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Eslint-配置参数说明\"><a href=\"#Eslint-配置参数说明\" class=\"headerlink\" title=\"Eslint 配置参数说明\"></a>Eslint 配置参数说明</h3><ul>\n<li>0 或’off’：关闭规则。</li>\n<li>1 或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。</li>\n<li>2 或’error’：打开规则，并且作为一个错误 (退出码为 1，检查不通过)。</li>\n</ul>","more":"<h3 id=\"ESLint-常用配置\"><a href=\"#ESLint-常用配置\" class=\"headerlink\" title=\"ESLint 常用配置\"></a>ESLint 常用配置</h3><ul>\n<li>Possible Errors 可能的错误或逻辑错误</li>\n<li>no-cond-assign 禁止条件表达式中出现模棱两可的赋值操作符</li>\n<li>no-console 禁用 console</li>\n<li>no-constant-condition 禁止在条件中使用常量表达式</li>\n<li>no-debugger 禁用 debugger</li>\n<li>no-dupe-args 禁止 function 定义中出现重名参数</li>\n<li>no-dupe-keys 禁止对象字面量中出现重复的 key</li>\n<li>no-duplicate-case 禁止出现重复的 case 标签</li>\n<li>no-empty 禁止出现空语句块</li>\n<li>no-ex-assign 禁止对 catch 子句的参数重新赋值</li>\n<li>no-extra-boolean-cast 禁止不必要的布尔转换</li>\n<li>no-extra-parens 禁止不必要的括号</li>\n<li>no-extra-semi 禁止不必要的分号</li>\n<li>no-func-assign 禁止对 function 声明重新赋值</li>\n<li>no-inner-declarations 禁止在嵌套的块中出现变量声明或 function 声明</li>\n<li>no-irregular-whitespace 禁止在字符串和注释之外不规则的空白</li>\n<li>no-obj-calls 禁止把全局对象作为函数调用</li>\n<li>no-sparse-arrays 禁用稀疏数组</li>\n<li>no-prototype-builtins 禁止直接使用 Object.prototypes 的内置属性</li>\n<li>no-unexpected-multiline 禁止出现令人困惑的多行表达式</li>\n<li>no-unreachable 禁止在 return、throw、continue 和 break 语句之后出现不可达代码</li>\n<li>use-isnan 要求使用 isNaN() 检查 NaN</li>\n<li>valid-typeof 强制 typeof 表达式与有效的字符串进行比较</li>\n</ul>\n<h3 id=\"Best-Practices-最佳实践\"><a href=\"#Best-Practices-最佳实践\" class=\"headerlink\" title=\"Best Practices 最佳实践\"></a>Best Practices 最佳实践</h3><ul>\n<li>array-callback-return 强制数组方法的回调函数中有 return 语句</li>\n<li>block-scoped-var 强制把变量的使用限制在其定义的作用域范围内</li>\n<li>complexity 指定程序中允许的最大环路复杂度</li>\n<li>consistent-return 要求 return 语句要么总是指定返回的值，要么不指定</li>\n<li>curly 强制所有控制语句使用一致的括号风格</li>\n<li>default-case 要求 switch 语句中有 default 分支</li>\n<li>dot-location 强制在点号之前和之后一致的换行</li>\n<li>dot-notation 强制在任何允许的时候使用点号</li>\n<li>eqeqeq 要求使用 === 和 !==</li>\n<li>guard-for-in 要求 for-in 循环中有一个 if 语句</li>\n<li>no-alert 禁用 alert、confirm 和 prompt</li>\n<li>no-case-declarations 不允许在 case 子句中使用词法声明</li>\n<li>no-else-return 禁止 if 语句中有 return 之后有 else</li>\n<li>no-empty-function 禁止出现空函数</li>\n<li>no-eq-null 禁止在没有类型检查操作符的情况下与 null 进行比较</li>\n<li>no-eval 禁用 eval()</li>\n<li>no-extra-bind 禁止不必要的 .bind() 调用</li>\n<li>no-fallthrough 禁止 case 语句落空</li>\n<li>no-floating-decimal 禁止数字字面量中使用前导和末尾小数点</li>\n<li>no-implicit-coercion 禁止使用短符号进行类型转换</li>\n<li>no-implicit-globals 禁止在全局范围内使用 var 和命名的 function 声明</li>\n<li>no-invalid-this: 禁止 this 关键字出现在类和类对象之外</li>\n<li>no-lone-blocks 禁用不必要的嵌套块</li>\n<li>no-loop-func 禁止在循环中出现 function 声明和表达式</li>\n<li>no-magic-numbers 禁用魔术数字</li>\n<li>no-multi-spaces 禁止使用多个空格</li>\n<li>no-multi-str 禁止使用多行字符串</li>\n<li>no-new 禁止在非赋值或条件语句中使用 new 操作符</li>\n<li>no-new-func 禁止对 Function 对象使用 new 操作符</li>\n<li>no-new-wrappers 禁止对 String，Number 和 Boolean 使用 new 操作符</li>\n<li>no-param-reassign 不允许对 function 的参数进行重新赋值</li>\n<li>no-redeclare 禁止使用 var 多次声明同一变量</li>\n<li>no-return-assign 禁止在 return 语句中使用赋值语句</li>\n<li>no-script-url 禁止使用 javascript: url</li>\n<li>no-self-assign 禁止自我赋值</li>\n<li>no-self-compare 禁止自身比较</li>\n<li>no-sequences 禁用逗号操作符</li>\n<li>no-unmodified-loop-condition 禁用一成不变的循环条件</li>\n<li>no-unused-expressions 禁止出现未使用过的表达式</li>\n<li>no-useless-call 禁止不必要的 .call() 和 .apply()</li>\n<li>no-useless-concat 禁止不必要的字符串字面量或模板字面量的连接</li>\n<li>vars-on-top 要求所有的 var 声明出现在它们所在的作用域顶部</li>\n<li>Strict Mode 使用严格模式和严格模式指</li>\n<li>strict 要求或禁止使用严格模式指令</li>\n</ul>\n<h3 id=\"Variables-变量声明\"><a href=\"#Variables-变量声明\" class=\"headerlink\" title=\"Variables 变量声明\"></a>Variables 变量声明</h3><ul>\n<li>init-declarations 要求或禁止 var 声明中的初始化</li>\n<li>no-catch-shadow 不允许 catch 子句的参数与外层作用域中的变量同名</li>\n<li>no-restricted-globals 禁用特定的全局变量</li>\n<li>no-shadow 禁止 var 声明 与外层作用域的变量同名</li>\n<li>no-undef 禁用未声明的变量，除非它们在 /global / 注释中被提到</li>\n<li>no-undef-init 禁止将变量初始化为 undefined</li>\n<li>no-unused-vars 禁止出现未使用过的变量</li>\n<li>no-use-before-define 不允许在变量定义之前使用它们</li>\n</ul>\n<h3 id=\"Nodejs-and-CommonJS-Node-js-CommonJS\"><a href=\"#Nodejs-and-CommonJS-Node-js-CommonJS\" class=\"headerlink\" title=\"Nodejs and CommonJS Node.js,CommonJS\"></a>Nodejs and CommonJS Node.js,CommonJS</h3><ul>\n<li>global-require 要求 require() 出现在顶层模块作用域中</li>\n<li>handle-callback-err 要求回调函数中有容错处理</li>\n<li>no-mixed-requires 禁止混合常规 var 声明和 require 调用</li>\n<li>no-new-require 禁止调用 require 时使用 new 操作符</li>\n<li>no-path-concat 禁止对 dirname 和 filename 进行字符串连接</li>\n<li>no-restricted-modules 禁用指定的通过 require 加载的模块</li>\n</ul>\n<h3 id=\"Stylistic-Issues-风格指南\"><a href=\"#Stylistic-Issues-风格指南\" class=\"headerlink\" title=\"Stylistic Issues 风格指南\"></a>Stylistic Issues 风格指南</h3><ul>\n<li>array-bracket-spacing 强制数组方括号中使用一致的空格</li>\n<li>block-spacing 强制在单行代码块中使用一致的空格</li>\n<li>brace-style 强制在代码块中使用一致的大括号风格</li>\n<li>camelcase 强制使用骆驼拼写法命名约定</li>\n<li>comma-spacing 强制在逗号前后使用一致的空格</li>\n<li>comma-style 强制使用一致的逗号风格</li>\n<li>computed-property-spacing 强制在计算的属性的方括号中使用一致的空格</li>\n<li>eol-last 强制文件末尾至少保留一行空行</li>\n<li>func-names 强制使用命名的 function 表达式</li>\n<li>func-style 强制一致地使用函数声明或函数表达式</li>\n<li>indent 强制使用一致的缩进</li>\n<li>jsx-quotes 强制在 JSX 属性中一致地使用双引号或单引号</li>\n<li>key-spacing 强制在对象字面量的属性中键和值之间使用一致的间距</li>\n<li>keyword-spacing 强制在关键字前后使用一致的空格</li>\n<li>linebreak-style 强制使用一致的换行风格</li>\n<li>lines-around-comment 要求在注释周围有空行</li>\n<li>max-depth 强制可嵌套的块的最大深度</li>\n<li>max-len 强制一行的最大长度</li>\n<li>max-lines 强制最大行数</li>\n<li>max-nested-callbacks 强制回调函数最大嵌套深度</li>\n<li>max-params 强制 function 定义中最多允许的参数数量</li>\n<li>max-statements 强制 function 块最多允许的的语句数量</li>\n<li>max-statements-per-line 强制每一行中所允许的最大语句数量</li>\n<li>new-cap 要求构造函数首字母大写</li>\n<li>new-parens 要求调用无参构造函数时有圆括号</li>\n<li>newline-after-var 要求或禁止 var 声明语句后有一行空行</li>\n<li>newline-before-return 要求 return 语句之前有一空行</li>\n<li>newline-per-chained-call 要求方法链中每个调用都有一个换行符</li>\n<li>no-array-constructor 禁止使用 Array 构造函数</li>\n<li>no-continue 禁用 continue 语句</li>\n<li>no-inline-comments 禁止在代码行后使用内联注释</li>\n<li>no-lonely-if 禁止 if 作为唯一的语句出现在 else 语句中</li>\n<li>no-mixed-spaces-and-tabs 不允许空格和 tab 混合缩进</li>\n<li>no-multiple-empty-lines 不允许多个空行</li>\n<li>no-negated-condition 不允许否定的表达式</li>\n<li>no-plusplus 禁止使用一元操作符 ++ 和 –</li>\n<li>no-spaced-func 禁止 function 标识符和括号之间出现空格</li>\n<li>no-ternary 不允许使用三元操作符</li>\n<li>no-trailing-spaces 禁用行尾空格</li>\n<li>no-whitespace-before-property 禁止属性前有空白</li>\n<li>object-curly-newline 强制花括号内换行符的一致性</li>\n<li>object-curly-spacing 强制在花括号中使用一致的空格</li>\n<li>object-property-newline 强制将对象的属性放在不同的行上</li>\n<li>one-var 强制函数中的变量要么一起声明要么分开声明</li>\n<li>one-var-declaration-per-line 要求或禁止在 var 声明周围换行</li>\n<li>operator-assignment 要求或禁止在可能的情况下要求使用简化的赋值操作符</li>\n<li>operator-linebreak 强制操作符使用一致的换行符</li>\n<li>quote-props 要求对象字面量属性名称用引号括起来</li>\n<li>quotes 强制使用一致的反勾号、双引号或单引号</li>\n<li>require-jsdoc 要求使用 JSDoc 注释</li>\n<li>semi 要求或禁止使用分号而不是 ASI</li>\n<li>semi-spacing 强制分号之前和之后使用一致的空格</li>\n<li>sort-vars 要求同一个声明块中的变量按顺序排列</li>\n<li>space-before-blocks 强制在块之前使用一致的空格</li>\n<li>space-before-function-paren 强制在 function 的左括号之前使用一致的空格</li>\n<li>space-in-parens 强制在圆括号内使用一致的空格</li>\n<li>space-infix-ops 要求操作符周围有空格</li>\n<li>space-unary-ops 强制在一元操作符前后使用一致的空格</li>\n<li>spaced-comment 强制在注释中 // 或 /* 使用一致的空格</li>\n</ul>"},{"title":"PWA功能","date":"2019-06-14T11:14:06.000Z","_content":"\n### 介绍\n\n> PWA（Progressive Web App）, 即渐进式 web 应用。PWA 本质上是 web 应用，目的是通过多项新技术，在安全、性能、体验等方面给用户原生应用的体验。而且无需像原生应用那样繁琐的下载、安装、升级等操作。\n\n<!--more-->\n\n打开`chrome://inspect/#service-workers`可查看 chrome 当前运行的 service worker\n\n### 核心技术\n\n> Service Worker 是 PWA 的核心技术\n\n#### 特性\n\n- 基于 HTTPS 环境，这是构建 PWA 的硬性前提\n- 是一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context\n- 可拦截 HTTP 请求和响应，可缓存文件，缓存的文件可以在网络离线状态时取到\n- 能向客户端推送消息\n- 不能直接操作 DOM\n- 异步实现，内部大都是通过 Promise 实现\n\n### Service Worker 生命周期\n\n> 注册--安装--激活\n\n#### 注册\n\n> 告诉浏览器 serviceworkerJS 文件存放在什么位置，浏览器下载、解析、执行。\n\n```js\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/sw.js')\n      .then(function(registration) {\n        // 注册成功\n        console.log(\n          'ServiceWorker registration successful with scope: ',\n          registration.scope\n        )\n      })\n      .catch(function(err) {\n        // 注册失败:(\n        console.log('ServiceWorker registration failed: ', err)\n      })\n  })\n}\n```\n\n#### 安装\n\n> 注册结束后，触发 install 事件，进行安装。\n\n```js\nvar CACHE_VERSION = 'sw_v8'\nvar CACHE_FILES = ['/js/jquery/min.js', '/js/zui/min.js', '/js/chanzhi.js']\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_VERSION).then(cache => cache.addAll(CACHE_FILES))\n  )\n})\n```\n\n#### 激活\n\n> 当安装成功后，serviceworker 就会激活，这时就会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。\n\n```js\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(keys) {\n      return Promise.all(\n        keys.map(function(key, i) {\n          if (key !== CACHE_VERSION) {\n            return caches.delete(keys[i])\n          }\n        })\n      )\n    })\n  )\n})\n```\n\n### Service Worker 缓存功能\n\n> 安装时，service worker 将我们指定的静态资源进行缓存（即预缓存）,与此同时，service worker 还可以拦截 HTTP 请求相应，做到动态缓存\n\n```js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      var requestToCache = event.request.clone()\n      return fetch(requestToCache).then(function(response) {\n        if (!response || response.status !== 200) {\n          return response\n        }\n        var responseToCache = response.clone()\n        caches.open(CACHE_VERSION).then(function(cache) {\n          cache.put(requestToCache, responseToCache)\n        })\n        return response\n      })\n    })\n  )\n})\n```\n\n#### PWA 添加横幅，增加用户使用率\n\n1. https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners\n2. https://github.com/electron-react-boilerplate/electron-react-boilerplate\n","source":"_posts/PWA功能.md","raw":"---\ntitle: PWA功能\ndate: 2019-06-14 19:14:06\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n### 介绍\n\n> PWA（Progressive Web App）, 即渐进式 web 应用。PWA 本质上是 web 应用，目的是通过多项新技术，在安全、性能、体验等方面给用户原生应用的体验。而且无需像原生应用那样繁琐的下载、安装、升级等操作。\n\n<!--more-->\n\n打开`chrome://inspect/#service-workers`可查看 chrome 当前运行的 service worker\n\n### 核心技术\n\n> Service Worker 是 PWA 的核心技术\n\n#### 特性\n\n- 基于 HTTPS 环境，这是构建 PWA 的硬性前提\n- 是一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context\n- 可拦截 HTTP 请求和响应，可缓存文件，缓存的文件可以在网络离线状态时取到\n- 能向客户端推送消息\n- 不能直接操作 DOM\n- 异步实现，内部大都是通过 Promise 实现\n\n### Service Worker 生命周期\n\n> 注册--安装--激活\n\n#### 注册\n\n> 告诉浏览器 serviceworkerJS 文件存放在什么位置，浏览器下载、解析、执行。\n\n```js\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/sw.js')\n      .then(function(registration) {\n        // 注册成功\n        console.log(\n          'ServiceWorker registration successful with scope: ',\n          registration.scope\n        )\n      })\n      .catch(function(err) {\n        // 注册失败:(\n        console.log('ServiceWorker registration failed: ', err)\n      })\n  })\n}\n```\n\n#### 安装\n\n> 注册结束后，触发 install 事件，进行安装。\n\n```js\nvar CACHE_VERSION = 'sw_v8'\nvar CACHE_FILES = ['/js/jquery/min.js', '/js/zui/min.js', '/js/chanzhi.js']\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_VERSION).then(cache => cache.addAll(CACHE_FILES))\n  )\n})\n```\n\n#### 激活\n\n> 当安装成功后，serviceworker 就会激活，这时就会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。\n\n```js\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(keys) {\n      return Promise.all(\n        keys.map(function(key, i) {\n          if (key !== CACHE_VERSION) {\n            return caches.delete(keys[i])\n          }\n        })\n      )\n    })\n  )\n})\n```\n\n### Service Worker 缓存功能\n\n> 安装时，service worker 将我们指定的静态资源进行缓存（即预缓存）,与此同时，service worker 还可以拦截 HTTP 请求相应，做到动态缓存\n\n```js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      var requestToCache = event.request.clone()\n      return fetch(requestToCache).then(function(response) {\n        if (!response || response.status !== 200) {\n          return response\n        }\n        var responseToCache = response.clone()\n        caches.open(CACHE_VERSION).then(function(cache) {\n          cache.put(requestToCache, responseToCache)\n        })\n        return response\n      })\n    })\n  )\n})\n```\n\n#### PWA 添加横幅，增加用户使用率\n\n1. https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners\n2. https://github.com/electron-react-boilerplate/electron-react-boilerplate\n","slug":"PWA功能","published":1,"updated":"2019-07-23T08:58:17.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbo0006ygf0laua3pvo","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>PWA（Progressive Web App）, 即渐进式 web 应用。PWA 本质上是 web 应用，目的是通过多项新技术，在安全、性能、体验等方面给用户原生应用的体验。而且无需像原生应用那样繁琐的下载、安装、升级等操作。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>打开<code>chrome://inspect/#service-workers</code>可查看 chrome 当前运行的 service worker</p>\n<h3 id=\"核心技术\"><a href=\"#核心技术\" class=\"headerlink\" title=\"核心技术\"></a>核心技术</h3><blockquote>\n<p>Service Worker 是 PWA 的核心技术</p>\n</blockquote>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>基于 HTTPS 环境，这是构建 PWA 的硬性前提</li>\n<li>是一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context</li>\n<li>可拦截 HTTP 请求和响应，可缓存文件，缓存的文件可以在网络离线状态时取到</li>\n<li>能向客户端推送消息</li>\n<li>不能直接操作 DOM</li>\n<li>异步实现，内部大都是通过 Promise 实现</li>\n</ul>\n<h3 id=\"Service-Worker-生命周期\"><a href=\"#Service-Worker-生命周期\" class=\"headerlink\" title=\"Service Worker 生命周期\"></a>Service Worker 生命周期</h3><blockquote>\n<p>注册–安装–激活</p>\n</blockquote>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><blockquote>\n<p>告诉浏览器 serviceworkerJS 文件存放在什么位置，浏览器下载、解析、执行。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    navigator.serviceWorker</span><br><span class=\"line\">      .register(<span class=\"string\">'/sw.js'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注册成功</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">          <span class=\"string\">'ServiceWorker registration successful with scope: '</span>,</span><br><span class=\"line\">          registration.scope</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注册失败:(</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ServiceWorker registration failed: '</span>, err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><blockquote>\n<p>注册结束后，触发 install 事件，进行安装。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CACHE_VERSION = <span class=\"string\">'sw_v8'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CACHE_FILES = [<span class=\"string\">'/js/jquery/min.js'</span>, <span class=\"string\">'/js/zui/min.js'</span>, <span class=\"string\">'/js/chanzhi.js'</span>]</span><br><span class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.waitUntil(</span><br><span class=\"line\">    caches.open(CACHE_VERSION).then(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span> cache.addAll(CACHE_FILES))</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h4><blockquote>\n<p>当安装成功后，serviceworker 就会激活，这时就会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.waitUntil(</span><br><span class=\"line\">    caches.keys().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keys</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">        keys.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, i</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key !== CACHE_VERSION) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.delete(keys[i])</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Service-Worker-缓存功能\"><a href=\"#Service-Worker-缓存功能\" class=\"headerlink\" title=\"Service Worker 缓存功能\"></a>Service Worker 缓存功能</h3><blockquote>\n<p>安装时，service worker 将我们指定的静态资源进行缓存（即预缓存）,与此同时，service worker 还可以拦截 HTTP 请求相应，做到动态缓存</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    caches.match(event.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> requestToCache = event.request.clone()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fetch(requestToCache).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!response || response.status !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> response</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> responseToCache = response.clone()</span><br><span class=\"line\">        caches.open(CACHE_VERSION).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">          cache.put(requestToCache, responseToCache)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"PWA-添加横幅，增加用户使用率\"><a href=\"#PWA-添加横幅，增加用户使用率\" class=\"headerlink\" title=\"PWA 添加横幅，增加用户使用率\"></a>PWA 添加横幅，增加用户使用率</h4><ol>\n<li><a href=\"https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners\" target=\"_blank\" rel=\"noopener\">https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners</a></li>\n<li><a href=\"https://github.com/electron-react-boilerplate/electron-react-boilerplate\" target=\"_blank\" rel=\"noopener\">https://github.com/electron-react-boilerplate/electron-react-boilerplate</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>PWA（Progressive Web App）, 即渐进式 web 应用。PWA 本质上是 web 应用，目的是通过多项新技术，在安全、性能、体验等方面给用户原生应用的体验。而且无需像原生应用那样繁琐的下载、安装、升级等操作。</p>\n</blockquote>","more":"<p>打开<code>chrome://inspect/#service-workers</code>可查看 chrome 当前运行的 service worker</p>\n<h3 id=\"核心技术\"><a href=\"#核心技术\" class=\"headerlink\" title=\"核心技术\"></a>核心技术</h3><blockquote>\n<p>Service Worker 是 PWA 的核心技术</p>\n</blockquote>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>基于 HTTPS 环境，这是构建 PWA 的硬性前提</li>\n<li>是一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context</li>\n<li>可拦截 HTTP 请求和响应，可缓存文件，缓存的文件可以在网络离线状态时取到</li>\n<li>能向客户端推送消息</li>\n<li>不能直接操作 DOM</li>\n<li>异步实现，内部大都是通过 Promise 实现</li>\n</ul>\n<h3 id=\"Service-Worker-生命周期\"><a href=\"#Service-Worker-生命周期\" class=\"headerlink\" title=\"Service Worker 生命周期\"></a>Service Worker 生命周期</h3><blockquote>\n<p>注册–安装–激活</p>\n</blockquote>\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><blockquote>\n<p>告诉浏览器 serviceworkerJS 文件存放在什么位置，浏览器下载、解析、执行。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    navigator.serviceWorker</span><br><span class=\"line\">      .register(<span class=\"string\">'/sw.js'</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注册成功</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">          <span class=\"string\">'ServiceWorker registration successful with scope: '</span>,</span><br><span class=\"line\">          registration.scope</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 注册失败:(</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ServiceWorker registration failed: '</span>, err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><blockquote>\n<p>注册结束后，触发 install 事件，进行安装。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CACHE_VERSION = <span class=\"string\">'sw_v8'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CACHE_FILES = [<span class=\"string\">'/js/jquery/min.js'</span>, <span class=\"string\">'/js/zui/min.js'</span>, <span class=\"string\">'/js/chanzhi.js'</span>]</span><br><span class=\"line\">self.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.waitUntil(</span><br><span class=\"line\">    caches.open(CACHE_VERSION).then(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span> cache.addAll(CACHE_FILES))</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h4><blockquote>\n<p>当安装成功后，serviceworker 就会激活，这时就会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.waitUntil(</span><br><span class=\"line\">    caches.keys().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keys</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">        keys.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, i</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (key !== CACHE_VERSION) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> caches.delete(keys[i])</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Service-Worker-缓存功能\"><a href=\"#Service-Worker-缓存功能\" class=\"headerlink\" title=\"Service Worker 缓存功能\"></a>Service Worker 缓存功能</h3><blockquote>\n<p>安装时，service worker 将我们指定的静态资源进行缓存（即预缓存）,与此同时，service worker 还可以拦截 HTTP 请求相应，做到动态缓存</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    caches.match(event.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (response) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> requestToCache = event.request.clone()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fetch(requestToCache).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!response || response.status !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> response</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> responseToCache = response.clone()</span><br><span class=\"line\">        caches.open(CACHE_VERSION).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">          cache.put(requestToCache, responseToCache)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"PWA-添加横幅，增加用户使用率\"><a href=\"#PWA-添加横幅，增加用户使用率\" class=\"headerlink\" title=\"PWA 添加横幅，增加用户使用率\"></a>PWA 添加横幅，增加用户使用率</h4><ol>\n<li><a href=\"https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners\" target=\"_blank\" rel=\"noopener\">https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners</a></li>\n<li><a href=\"https://github.com/electron-react-boilerplate/electron-react-boilerplate\" target=\"_blank\" rel=\"noopener\">https://github.com/electron-react-boilerplate/electron-react-boilerplate</a></li>\n</ol>"},{"title":"H5与Native交互","date":"2019-04-15T09:35:06.000Z","_content":"\n### 介绍三种 APP 的开发模式\n\n- Native\n- WebAPP\n- HybridAPP\n\n### Native\n\n#### 优点\n\n1. 原生应用。性能最好，交互体验有优势\n2. 可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）\n\n#### 缺点\n\n1. 更新体验较差、需要用户手动更新。\n2. 苹果商店发布流程繁琐\n3. 使用不同的开发语言，所以开发、维护成本大\n\n### WebAPP\n\n#### 优点\n\n1. 开发成本低，效率快\n2. 跨平台、升级维护简单，不受应用商店限制\n3. 不需要用户下载使用，有浏览器即可访问\n\n#### 缺点\n\n1. 依赖网络，访问速度受限于终端网速。每次访问，消耗流量\n2. 性能差，用户体验较差（因为需要去远端下载资源）\n3. 无法调用移动硬件设备的底层功能（摄像头、日历和地理位置等）\n\n### HybridAPP\n\n#### 优点\n\n1. 开发成本较低，效率较快,性能介于 Native 与 WebAPP 之间，可与 Nactive 媲美\n2. 跨平台、实现多端展示同一个交互层\n3. 可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）\n\n#### 缺点\n\n1. 用户需要在应用商店下载，发布流程繁琐\n2. 团队中需要有懂 Web、IOS 开发的技术人员，双方需要配合工作\n\n#### Crocodile 框架中通信\n\n1. 执行 webapck 打包 Hybrid 包时，将 vendor/bridge.js 文件打包至 crocodile.seed.js 中，在前端应用启动时，优先于其他脚本代码加载。\n2. 当 Native 的 webview 加载完成后，调用 H5 的`web_view_finished_load`接口获取 Nacti 端的基本信息(版本、系统参数...)\n\n##### 初始化\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n//Android容器允许JS脚本\nwebSettings.setJavaScriptEnabled(true);\n//Android容器设置侨连对象\nmWebView.addJavascriptInterface(getJSBridge(), \"JSBridge\");\n\n//Android4.2版本以上，本地方法要加上注解@JavascriptInterface，否则会找不到方法。\nprivate Object getJSBridge(){\n    Object insertObj = new Object(){\n    \t@JavascriptInterface\n        public String foo(){\n            return \"foo\";\n        }\n\n        @JavascriptInterface\n        public String foo2(final String param){\n            return \"foo2:\" + param;\n        }\n\n    };\n    return insertObj;\n}\n```\n\n##### JS 调用\n\n```js\n//调用方法一\nwindow.JSBridge.foo() //返回:'foo'\n//调用方法二\nwindow.JSBridge.foo2('test') //返回:'foo2:test'\n```\n\n##### 4.4 版本前\n\n```java\n// mWebView = new WebView(this); //即当前webview对象\nmWebView.loadUrl(\"javascript: 方法名('参数,需要转为字符串')\");\n\n//ui线程中运行\n runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            mWebView.loadUrl(\"javascript: 方法名('参数,需要转为字符串')\");\n            Toast.makeText(Activity名.this, \"调用方法...\", Toast.LENGTH_SHORT).show();\n        }\n});\n```\n\n##### 4.4 版本后（包括）\n\n```java\n//异步执行JS代码,并获取返回值\nmWebView.evaluateJavascript(\"javascript: 方法名('参数,需要转为字符串')\", new ValueCallback() {\n        @Override\n        public void onReceiveValue(String value) {\n    \t\t//这里的value即为对应JS方法的返回值\n        }\n});\n```\n","source":"_posts/H5与Native交互.md","raw":"---\ntitle: H5与Native交互\ndate: 2019-04-15 17:35:06\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n### 介绍三种 APP 的开发模式\n\n- Native\n- WebAPP\n- HybridAPP\n\n### Native\n\n#### 优点\n\n1. 原生应用。性能最好，交互体验有优势\n2. 可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）\n\n#### 缺点\n\n1. 更新体验较差、需要用户手动更新。\n2. 苹果商店发布流程繁琐\n3. 使用不同的开发语言，所以开发、维护成本大\n\n### WebAPP\n\n#### 优点\n\n1. 开发成本低，效率快\n2. 跨平台、升级维护简单，不受应用商店限制\n3. 不需要用户下载使用，有浏览器即可访问\n\n#### 缺点\n\n1. 依赖网络，访问速度受限于终端网速。每次访问，消耗流量\n2. 性能差，用户体验较差（因为需要去远端下载资源）\n3. 无法调用移动硬件设备的底层功能（摄像头、日历和地理位置等）\n\n### HybridAPP\n\n#### 优点\n\n1. 开发成本较低，效率较快,性能介于 Native 与 WebAPP 之间，可与 Nactive 媲美\n2. 跨平台、实现多端展示同一个交互层\n3. 可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）\n\n#### 缺点\n\n1. 用户需要在应用商店下载，发布流程繁琐\n2. 团队中需要有懂 Web、IOS 开发的技术人员，双方需要配合工作\n\n#### Crocodile 框架中通信\n\n1. 执行 webapck 打包 Hybrid 包时，将 vendor/bridge.js 文件打包至 crocodile.seed.js 中，在前端应用启动时，优先于其他脚本代码加载。\n2. 当 Native 的 webview 加载完成后，调用 H5 的`web_view_finished_load`接口获取 Nacti 端的基本信息(版本、系统参数...)\n\n##### 初始化\n\n```java\nWebSettings webSettings = mWebView.getSettings();\n//Android容器允许JS脚本\nwebSettings.setJavaScriptEnabled(true);\n//Android容器设置侨连对象\nmWebView.addJavascriptInterface(getJSBridge(), \"JSBridge\");\n\n//Android4.2版本以上，本地方法要加上注解@JavascriptInterface，否则会找不到方法。\nprivate Object getJSBridge(){\n    Object insertObj = new Object(){\n    \t@JavascriptInterface\n        public String foo(){\n            return \"foo\";\n        }\n\n        @JavascriptInterface\n        public String foo2(final String param){\n            return \"foo2:\" + param;\n        }\n\n    };\n    return insertObj;\n}\n```\n\n##### JS 调用\n\n```js\n//调用方法一\nwindow.JSBridge.foo() //返回:'foo'\n//调用方法二\nwindow.JSBridge.foo2('test') //返回:'foo2:test'\n```\n\n##### 4.4 版本前\n\n```java\n// mWebView = new WebView(this); //即当前webview对象\nmWebView.loadUrl(\"javascript: 方法名('参数,需要转为字符串')\");\n\n//ui线程中运行\n runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            mWebView.loadUrl(\"javascript: 方法名('参数,需要转为字符串')\");\n            Toast.makeText(Activity名.this, \"调用方法...\", Toast.LENGTH_SHORT).show();\n        }\n});\n```\n\n##### 4.4 版本后（包括）\n\n```java\n//异步执行JS代码,并获取返回值\nmWebView.evaluateJavascript(\"javascript: 方法名('参数,需要转为字符串')\", new ValueCallback() {\n        @Override\n        public void onReceiveValue(String value) {\n    \t\t//这里的value即为对应JS方法的返回值\n        }\n});\n```\n","slug":"H5与Native交互","published":1,"updated":"2019-07-23T08:58:17.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbq0007ygf0n78m8zn4","content":"<h3 id=\"介绍三种-APP-的开发模式\"><a href=\"#介绍三种-APP-的开发模式\" class=\"headerlink\" title=\"介绍三种 APP 的开发模式\"></a>介绍三种 APP 的开发模式</h3><ul>\n<li>Native</li>\n<li>WebAPP</li>\n<li>HybridAPP</li>\n</ul>\n<h3 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>原生应用。性能最好，交互体验有优势</li>\n<li>可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>更新体验较差、需要用户手动更新。</li>\n<li>苹果商店发布流程繁琐</li>\n<li>使用不同的开发语言，所以开发、维护成本大</li>\n</ol>\n<h3 id=\"WebAPP\"><a href=\"#WebAPP\" class=\"headerlink\" title=\"WebAPP\"></a>WebAPP</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>开发成本低，效率快</li>\n<li>跨平台、升级维护简单，不受应用商店限制</li>\n<li>不需要用户下载使用，有浏览器即可访问</li>\n</ol>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>依赖网络，访问速度受限于终端网速。每次访问，消耗流量</li>\n<li>性能差，用户体验较差（因为需要去远端下载资源）</li>\n<li>无法调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li>\n</ol>\n<h3 id=\"HybridAPP\"><a href=\"#HybridAPP\" class=\"headerlink\" title=\"HybridAPP\"></a>HybridAPP</h3><h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>开发成本较低，效率较快,性能介于 Native 与 WebAPP 之间，可与 Nactive 媲美</li>\n<li>跨平台、实现多端展示同一个交互层</li>\n<li>可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li>\n</ol>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>用户需要在应用商店下载，发布流程繁琐</li>\n<li>团队中需要有懂 Web、IOS 开发的技术人员，双方需要配合工作</li>\n</ol>\n<h4 id=\"Crocodile-框架中通信\"><a href=\"#Crocodile-框架中通信\" class=\"headerlink\" title=\"Crocodile 框架中通信\"></a>Crocodile 框架中通信</h4><ol>\n<li>执行 webapck 打包 Hybrid 包时，将 vendor/bridge.js 文件打包至 crocodile.seed.js 中，在前端应用启动时，优先于其他脚本代码加载。</li>\n<li>当 Native 的 webview 加载完成后，调用 H5 的<code>web_view_finished_load</code>接口获取 Nacti 端的基本信息(版本、系统参数…)</li>\n</ol>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings webSettings = mWebView.getSettings();</span><br><span class=\"line\"><span class=\"comment\">//Android容器允许JS脚本</span></span><br><span class=\"line\">webSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//Android容器设置侨连对象</span></span><br><span class=\"line\">mWebView.addJavascriptInterface(getJSBridge(), <span class=\"string\">\"JSBridge\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Android4.2版本以上，本地方法要加上注解@JavascriptInterface，否则会找不到方法。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">getJSBridge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Object insertObj = <span class=\"keyword\">new</span> Object()&#123;</span><br><span class=\"line\">    \t<span class=\"meta\">@JavascriptInterface</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@JavascriptInterface</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo2</span><span class=\"params\">(<span class=\"keyword\">final</span> String param)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"foo2:\"</span> + param;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> insertObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"JS-调用\"><a href=\"#JS-调用\" class=\"headerlink\" title=\"JS 调用\"></a>JS 调用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用方法一</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.JSBridge.foo() <span class=\"comment\">//返回:'foo'</span></span><br><span class=\"line\"><span class=\"comment\">//调用方法二</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.JSBridge.foo2(<span class=\"string\">'test'</span>) <span class=\"comment\">//返回:'foo2:test'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-4-版本前\"><a href=\"#4-4-版本前\" class=\"headerlink\" title=\"4.4 版本前\"></a>4.4 版本前</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mWebView = new WebView(this); //即当前webview对象</span></span><br><span class=\"line\">mWebView.loadUrl(<span class=\"string\">\"javascript: 方法名('参数,需要转为字符串')\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ui线程中运行</span></span><br><span class=\"line\"> runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mWebView.loadUrl(<span class=\"string\">\"javascript: 方法名('参数,需要转为字符串')\"</span>);</span><br><span class=\"line\">            Toast.makeText(Activity名.<span class=\"keyword\">this</span>, <span class=\"string\">\"调用方法...\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-4-版本后（包括）\"><a href=\"#4-4-版本后（包括）\" class=\"headerlink\" title=\"4.4 版本后（包括）\"></a>4.4 版本后（包括）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异步执行JS代码,并获取返回值</span></span><br><span class=\"line\">mWebView.evaluateJavascript(<span class=\"string\">\"javascript: 方法名('参数,需要转为字符串')\"</span>, <span class=\"keyword\">new</span> ValueCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//这里的value即为对应JS方法的返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"介绍三种-APP-的开发模式\"><a href=\"#介绍三种-APP-的开发模式\" class=\"headerlink\" title=\"介绍三种 APP 的开发模式\"></a>介绍三种 APP 的开发模式</h3><ul>\n<li>Native</li>\n<li>WebAPP</li>\n<li>HybridAPP</li>\n</ul>\n<h3 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>原生应用。性能最好，交互体验有优势</li>\n<li>可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>更新体验较差、需要用户手动更新。</li>\n<li>苹果商店发布流程繁琐</li>\n<li>使用不同的开发语言，所以开发、维护成本大</li>\n</ol>\n<h3 id=\"WebAPP\"><a href=\"#WebAPP\" class=\"headerlink\" title=\"WebAPP\"></a>WebAPP</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>开发成本低，效率快</li>\n<li>跨平台、升级维护简单，不受应用商店限制</li>\n<li>不需要用户下载使用，有浏览器即可访问</li>\n</ol>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>依赖网络，访问速度受限于终端网速。每次访问，消耗流量</li>\n<li>性能差，用户体验较差（因为需要去远端下载资源）</li>\n<li>无法调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li>\n</ol>\n<h3 id=\"HybridAPP\"><a href=\"#HybridAPP\" class=\"headerlink\" title=\"HybridAPP\"></a>HybridAPP</h3><h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>开发成本较低，效率较快,性能介于 Native 与 WebAPP 之间，可与 Nactive 媲美</li>\n<li>跨平台、实现多端展示同一个交互层</li>\n<li>可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li>\n</ol>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ol>\n<li>用户需要在应用商店下载，发布流程繁琐</li>\n<li>团队中需要有懂 Web、IOS 开发的技术人员，双方需要配合工作</li>\n</ol>\n<h4 id=\"Crocodile-框架中通信\"><a href=\"#Crocodile-框架中通信\" class=\"headerlink\" title=\"Crocodile 框架中通信\"></a>Crocodile 框架中通信</h4><ol>\n<li>执行 webapck 打包 Hybrid 包时，将 vendor/bridge.js 文件打包至 crocodile.seed.js 中，在前端应用启动时，优先于其他脚本代码加载。</li>\n<li>当 Native 的 webview 加载完成后，调用 H5 的<code>web_view_finished_load</code>接口获取 Nacti 端的基本信息(版本、系统参数…)</li>\n</ol>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebSettings webSettings = mWebView.getSettings();</span><br><span class=\"line\"><span class=\"comment\">//Android容器允许JS脚本</span></span><br><span class=\"line\">webSettings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//Android容器设置侨连对象</span></span><br><span class=\"line\">mWebView.addJavascriptInterface(getJSBridge(), <span class=\"string\">\"JSBridge\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Android4.2版本以上，本地方法要加上注解@JavascriptInterface，否则会找不到方法。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Object <span class=\"title\">getJSBridge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Object insertObj = <span class=\"keyword\">new</span> Object()&#123;</span><br><span class=\"line\">    \t<span class=\"meta\">@JavascriptInterface</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@JavascriptInterface</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">foo2</span><span class=\"params\">(<span class=\"keyword\">final</span> String param)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"foo2:\"</span> + param;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> insertObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"JS-调用\"><a href=\"#JS-调用\" class=\"headerlink\" title=\"JS 调用\"></a>JS 调用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用方法一</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.JSBridge.foo() <span class=\"comment\">//返回:'foo'</span></span><br><span class=\"line\"><span class=\"comment\">//调用方法二</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.JSBridge.foo2(<span class=\"string\">'test'</span>) <span class=\"comment\">//返回:'foo2:test'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-4-版本前\"><a href=\"#4-4-版本前\" class=\"headerlink\" title=\"4.4 版本前\"></a>4.4 版本前</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mWebView = new WebView(this); //即当前webview对象</span></span><br><span class=\"line\">mWebView.loadUrl(<span class=\"string\">\"javascript: 方法名('参数,需要转为字符串')\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ui线程中运行</span></span><br><span class=\"line\"> runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mWebView.loadUrl(<span class=\"string\">\"javascript: 方法名('参数,需要转为字符串')\"</span>);</span><br><span class=\"line\">            Toast.makeText(Activity名.<span class=\"keyword\">this</span>, <span class=\"string\">\"调用方法...\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-4-版本后（包括）\"><a href=\"#4-4-版本后（包括）\" class=\"headerlink\" title=\"4.4 版本后（包括）\"></a>4.4 版本后（包括）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异步执行JS代码,并获取返回值</span></span><br><span class=\"line\">mWebView.evaluateJavascript(<span class=\"string\">\"javascript: 方法名('参数,需要转为字符串')\"</span>, <span class=\"keyword\">new</span> ValueCallback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//这里的value即为对应JS方法的返回值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux安装NodeJS","date":"2017-10-17T16:00:00.000Z","_content":"\n## 安装 NodeJS\n\n> 首先下载 node 安装包，下载编译好的，下载完毕，解压后，直接软连接设置成全局，即可使用\n\n<!--more-->\n\n```bash\n#进入安装包放置的位置\ncd /usr/local/src\n\n#下载安装包，这个是编译好的安装包，不要make && make install\nwget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz\n\n# 解压并进入 // 可能会报错（gzip: stdin: not in gzip format） 去掉z参数\ntar -zxvf node-v6.11.4-linux-x64.tar.xz\n\n#软链接、设置成全局\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/node /usr/local/bin/node\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/npm /usr/local/bin/npm\n\n#查看node版本\nnode -v\n```\n\n## 安装 Express 框架\n\n```js\n//首先安装马云爸爸的淘宝cnpm命令\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n//建立软链接\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/cnpm /usr/local/bin/cnpm\n\n// 先安装express-generator脚手架(新版本须装)\ncnpm install -g express-generator\n\n// 安装Express\ncnpm install -g express\n\n// 建立软链接\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/express /usr/local/bin/express\n\n// 创建项目\ncd /project\nexpress app\n\n// 进入app项目，安装相关依赖\ncnpm install\n\n// 启动node进程\nnpm start\n\n// 浏览器访问http://127.0.0.1:3000\nExpress欢迎页面呈现\n```\n\n## 安装 Forever 守护模块\n\n```js\n// https://github.com/foreverjs/forever\n// 可以使用Lniux命令，后台运行node服务\nnohup npm start &\n```\n","source":"_posts/Linux安装NodeJS.md","raw":"---\ntitle: Linux安装NodeJS\ndate: 2017-10-18\ntags:\n  - JavaScript\n  - NodeJS\n  - Linux\ncategories:\n  - Code\n---\n\n## 安装 NodeJS\n\n> 首先下载 node 安装包，下载编译好的，下载完毕，解压后，直接软连接设置成全局，即可使用\n\n<!--more-->\n\n```bash\n#进入安装包放置的位置\ncd /usr/local/src\n\n#下载安装包，这个是编译好的安装包，不要make && make install\nwget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz\n\n# 解压并进入 // 可能会报错（gzip: stdin: not in gzip format） 去掉z参数\ntar -zxvf node-v6.11.4-linux-x64.tar.xz\n\n#软链接、设置成全局\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/node /usr/local/bin/node\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/npm /usr/local/bin/npm\n\n#查看node版本\nnode -v\n```\n\n## 安装 Express 框架\n\n```js\n//首先安装马云爸爸的淘宝cnpm命令\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n//建立软链接\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/cnpm /usr/local/bin/cnpm\n\n// 先安装express-generator脚手架(新版本须装)\ncnpm install -g express-generator\n\n// 安装Express\ncnpm install -g express\n\n// 建立软链接\nln -s /usr/local/src/node-v6.11.4-linux-x64/bin/express /usr/local/bin/express\n\n// 创建项目\ncd /project\nexpress app\n\n// 进入app项目，安装相关依赖\ncnpm install\n\n// 启动node进程\nnpm start\n\n// 浏览器访问http://127.0.0.1:3000\nExpress欢迎页面呈现\n```\n\n## 安装 Forever 守护模块\n\n```js\n// https://github.com/foreverjs/forever\n// 可以使用Lniux命令，后台运行node服务\nnohup npm start &\n```\n","slug":"Linux安装NodeJS","published":1,"updated":"2019-07-23T08:58:17.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbu000aygf01wmh8zl1","content":"<h2 id=\"安装-NodeJS\"><a href=\"#安装-NodeJS\" class=\"headerlink\" title=\"安装 NodeJS\"></a>安装 NodeJS</h2><blockquote>\n<p>首先下载 node 安装包，下载编译好的，下载完毕，解压后，直接软连接设置成全局，即可使用</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入安装包放置的位置</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下载安装包，这个是编译好的安装包，不要make &amp;&amp; make install</span></span><br><span class=\"line\">wget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压并进入 // 可能会报错（gzip: stdin: not in gzip format） 去掉z参数</span></span><br><span class=\"line\">tar -zxvf node-v6.11.4-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#软链接、设置成全局</span></span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/src/node-v6.11.4-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/src/node-v6.11.4-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看node版本</span></span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-Express-框架\"><a href=\"#安装-Express-框架\" class=\"headerlink\" title=\"安装 Express 框架\"></a>安装 Express 框架</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先安装马云爸爸的淘宝cnpm命令</span></span><br><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立软链接</span></span><br><span class=\"line\">ln -s /usr/local/src/node-v6<span class=\"number\">.11</span><span class=\"number\">.4</span>-linux-x64/bin/cnpm /usr/local/bin/cnpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先安装express-generator脚手架(新版本须装)</span></span><br><span class=\"line\">cnpm install -g express-generator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安装Express</span></span><br><span class=\"line\">cnpm install -g express</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立软链接</span></span><br><span class=\"line\">ln -s /usr/local/src/node-v6<span class=\"number\">.11</span><span class=\"number\">.4</span>-linux-x64/bin/express /usr/local/bin/express</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建项目</span></span><br><span class=\"line\">cd /project</span><br><span class=\"line\">express app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进入app项目，安装相关依赖</span></span><br><span class=\"line\">cnpm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动node进程</span></span><br><span class=\"line\">npm start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浏览器访问http://127.0.0.1:3000</span></span><br><span class=\"line\">Express欢迎页面呈现</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-Forever-守护模块\"><a href=\"#安装-Forever-守护模块\" class=\"headerlink\" title=\"安装 Forever 守护模块\"></a>安装 Forever 守护模块</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/foreverjs/forever</span></span><br><span class=\"line\"><span class=\"comment\">// 可以使用Lniux命令，后台运行node服务</span></span><br><span class=\"line\">nohup npm start &amp;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装-NodeJS\"><a href=\"#安装-NodeJS\" class=\"headerlink\" title=\"安装 NodeJS\"></a>安装 NodeJS</h2><blockquote>\n<p>首先下载 node 安装包，下载编译好的，下载完毕，解压后，直接软连接设置成全局，即可使用</p>\n</blockquote>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入安装包放置的位置</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/src</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#下载安装包，这个是编译好的安装包，不要make &amp;&amp; make install</span></span><br><span class=\"line\">wget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压并进入 // 可能会报错（gzip: stdin: not in gzip format） 去掉z参数</span></span><br><span class=\"line\">tar -zxvf node-v6.11.4-linux-x64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#软链接、设置成全局</span></span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/src/node-v6.11.4-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</span><br><span class=\"line\">ln -s /usr/<span class=\"built_in\">local</span>/src/node-v6.11.4-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看node版本</span></span><br><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-Express-框架\"><a href=\"#安装-Express-框架\" class=\"headerlink\" title=\"安装 Express 框架\"></a>安装 Express 框架</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先安装马云爸爸的淘宝cnpm命令</span></span><br><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建立软链接</span></span><br><span class=\"line\">ln -s /usr/local/src/node-v6<span class=\"number\">.11</span><span class=\"number\">.4</span>-linux-x64/bin/cnpm /usr/local/bin/cnpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先安装express-generator脚手架(新版本须装)</span></span><br><span class=\"line\">cnpm install -g express-generator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安装Express</span></span><br><span class=\"line\">cnpm install -g express</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 建立软链接</span></span><br><span class=\"line\">ln -s /usr/local/src/node-v6<span class=\"number\">.11</span><span class=\"number\">.4</span>-linux-x64/bin/express /usr/local/bin/express</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建项目</span></span><br><span class=\"line\">cd /project</span><br><span class=\"line\">express app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进入app项目，安装相关依赖</span></span><br><span class=\"line\">cnpm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动node进程</span></span><br><span class=\"line\">npm start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浏览器访问http://127.0.0.1:3000</span></span><br><span class=\"line\">Express欢迎页面呈现</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-Forever-守护模块\"><a href=\"#安装-Forever-守护模块\" class=\"headerlink\" title=\"安装 Forever 守护模块\"></a>安装 Forever 守护模块</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/foreverjs/forever</span></span><br><span class=\"line\"><span class=\"comment\">// 可以使用Lniux命令，后台运行node服务</span></span><br><span class=\"line\">nohup npm start &amp;</span><br></pre></td></tr></table></figure>"},{"title":"VSCode常用插件","date":"2018-08-14T16:00:00.000Z","_content":"\n- Annotator\n  查看 git 提交记录\n- Code Outline\n  展示代码结构树\n- Git Blame\n  在状态栏显示当前行的 Git 信息\n- GitLens\n  显示文件最近的 commit 和作者，显示当前行 commit 信息\n\n- Git History(git log)\n  查看 git log\n- HTML CSS Support\n  css 提示（支持 vue）\n- Guides\n  高亮缩进基准线\n- Prettify JSON\n  格式化 JSON\n\n- Prettier - Code formatter\n  代码格式化\n- SCSS IntelliSense\n  scss 智能提示\n\n- TSLint\n  TSLint\n- TypeScript Importer\n  TypeScript Importer\n- vscode-icons\n  图标\n","source":"_posts/VScode常用插件.md","raw":"---\ntitle: VSCode常用插件\ndate: 2018-08-15\ntags:\n  - VsCode\ncategories:\n  - Note\n---\n\n- Annotator\n  查看 git 提交记录\n- Code Outline\n  展示代码结构树\n- Git Blame\n  在状态栏显示当前行的 Git 信息\n- GitLens\n  显示文件最近的 commit 和作者，显示当前行 commit 信息\n\n- Git History(git log)\n  查看 git log\n- HTML CSS Support\n  css 提示（支持 vue）\n- Guides\n  高亮缩进基准线\n- Prettify JSON\n  格式化 JSON\n\n- Prettier - Code formatter\n  代码格式化\n- SCSS IntelliSense\n  scss 智能提示\n\n- TSLint\n  TSLint\n- TypeScript Importer\n  TypeScript Importer\n- vscode-icons\n  图标\n","slug":"VScode常用插件","published":1,"updated":"2019-07-23T08:58:17.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbw000bygf07beoxeic","content":"<ul>\n<li>Annotator<br>查看 git 提交记录</li>\n<li>Code Outline<br>展示代码结构树</li>\n<li>Git Blame<br>在状态栏显示当前行的 Git 信息</li>\n<li><p>GitLens<br>显示文件最近的 commit 和作者，显示当前行 commit 信息</p>\n</li>\n<li><p>Git History(git log)<br>查看 git log</p>\n</li>\n<li>HTML CSS Support<br>css 提示（支持 vue）</li>\n<li>Guides<br>高亮缩进基准线</li>\n<li><p>Prettify JSON<br>格式化 JSON</p>\n</li>\n<li><p>Prettier - Code formatter<br>代码格式化</p>\n</li>\n<li><p>SCSS IntelliSense<br>scss 智能提示</p>\n</li>\n<li><p>TSLint<br>TSLint</p>\n</li>\n<li>TypeScript Importer<br>TypeScript Importer</li>\n<li>vscode-icons<br>图标</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Annotator<br>查看 git 提交记录</li>\n<li>Code Outline<br>展示代码结构树</li>\n<li>Git Blame<br>在状态栏显示当前行的 Git 信息</li>\n<li><p>GitLens<br>显示文件最近的 commit 和作者，显示当前行 commit 信息</p>\n</li>\n<li><p>Git History(git log)<br>查看 git log</p>\n</li>\n<li>HTML CSS Support<br>css 提示（支持 vue）</li>\n<li>Guides<br>高亮缩进基准线</li>\n<li><p>Prettify JSON<br>格式化 JSON</p>\n</li>\n<li><p>Prettier - Code formatter<br>代码格式化</p>\n</li>\n<li><p>SCSS IntelliSense<br>scss 智能提示</p>\n</li>\n<li><p>TSLint<br>TSLint</p>\n</li>\n<li>TypeScript Importer<br>TypeScript Importer</li>\n<li>vscode-icons<br>图标</li>\n</ul>\n"},{"title":"React生命周期","date":"2018-09-06T16:00:00.000Z","_content":"\n### Demo\n\n```js\nclass Demo extends Component {\n  // 构造方法\n  // 只要组件存在constructor,就必要要写super,否则this指向会错误\n  constructor(props, context) {\n    spuer(props, context)\n  }\n  // 组件将要加载\n  componentWillMount() {}\n  // 组件加载完成，只在render后，调用一次\n  componentDidMount() {}\n  // 接受新props时调用\n  componentWillReceiveProps(nextProps) {}\n  // 接受下次props、state，判断是否更新组件，初始化时不调用\n  shouldComponentUpdate(nextProps, nextState) {}\n  // 组件更改时\n  componentWillUpdate(nextProps, nextState) {}\n  // 组件更改完成\n  componentDidUpdate(prevProps, prevState) {}\n  // React 16 处理错误信息生命周期函数\n  componentDidCatch() {}\n  // 组件从DOM中移除前触发\n  componentWillUnmount() {}\n  // 渲染\n  render() {\n    return <div />\n  }\n}\nexport default Demo\n```\n\n### constructor 构建函数\n\n- constructor 参数接受两个参数 props,context 可以获取到父组件传下来的的 props,context,如果你想在>constructor 构造函数内部(注意是内部哦，在组件其他地方是可以直接接收的)使用 props 或 context,则需>要传入，并传入 super 对象。\n\n### componentWillMount 组件将要挂载\n\n- 组件刚经历 constructor,初始完数据\n- 组件还未进入 render，组件还未渲染完成，dom 还未渲染\n\n### componentDidMount 组件渲染完成(只执行一次)\n\n- 组件第一次渲染完成，此时 dom 节点已经生成，可以在这里调用 ajax 请求，返回数据 setState 后组件会重新渲染\n\n### componentWillReceiveProps (nextProps) 父组件 props 改变时调用、\n\n- 使用 this.props 访问当前的 props，可以在此 setState 更新，重新渲染组件\n\n### shouldComponentUpdate(nextProps,nextState)\n\n- return boolean， true 更新组件，false 为阻止更新\n- 因为 react 父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断\n\n### componentWillUpdate (nextProps,nextState)\n\n- shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate,这里同样可以拿到 nextProps 和 nextState\n\n### render 函数\n\n- render 函数会插入 jsx 生成的 dom 结构，react 会生成一份虚拟 dom 树，在每一次组件更新时，在此 react 会通过其 diff 算法比较更新前后的新旧 DOM 树，比较以后，找到最小的有差异的 DOM 节点，并重新渲染\n\n### componentDidUpdate(prevProps,prevState)\n\n- 组件更新完毕后，react 只会在第一次初始化成功会进入 componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state。\n\n### componentWillUnmount ()\n\n- 在组件从 DOM 中移除的时候立刻被调用。\n","source":"_posts/React生命周期.md","raw":"---\ntitle: React生命周期\ndate: 2018-09-07\ntags:\n  - React\n  - JavaScript\ncategories:\n  - 代码\n---\n\n### Demo\n\n```js\nclass Demo extends Component {\n  // 构造方法\n  // 只要组件存在constructor,就必要要写super,否则this指向会错误\n  constructor(props, context) {\n    spuer(props, context)\n  }\n  // 组件将要加载\n  componentWillMount() {}\n  // 组件加载完成，只在render后，调用一次\n  componentDidMount() {}\n  // 接受新props时调用\n  componentWillReceiveProps(nextProps) {}\n  // 接受下次props、state，判断是否更新组件，初始化时不调用\n  shouldComponentUpdate(nextProps, nextState) {}\n  // 组件更改时\n  componentWillUpdate(nextProps, nextState) {}\n  // 组件更改完成\n  componentDidUpdate(prevProps, prevState) {}\n  // React 16 处理错误信息生命周期函数\n  componentDidCatch() {}\n  // 组件从DOM中移除前触发\n  componentWillUnmount() {}\n  // 渲染\n  render() {\n    return <div />\n  }\n}\nexport default Demo\n```\n\n### constructor 构建函数\n\n- constructor 参数接受两个参数 props,context 可以获取到父组件传下来的的 props,context,如果你想在>constructor 构造函数内部(注意是内部哦，在组件其他地方是可以直接接收的)使用 props 或 context,则需>要传入，并传入 super 对象。\n\n### componentWillMount 组件将要挂载\n\n- 组件刚经历 constructor,初始完数据\n- 组件还未进入 render，组件还未渲染完成，dom 还未渲染\n\n### componentDidMount 组件渲染完成(只执行一次)\n\n- 组件第一次渲染完成，此时 dom 节点已经生成，可以在这里调用 ajax 请求，返回数据 setState 后组件会重新渲染\n\n### componentWillReceiveProps (nextProps) 父组件 props 改变时调用、\n\n- 使用 this.props 访问当前的 props，可以在此 setState 更新，重新渲染组件\n\n### shouldComponentUpdate(nextProps,nextState)\n\n- return boolean， true 更新组件，false 为阻止更新\n- 因为 react 父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断\n\n### componentWillUpdate (nextProps,nextState)\n\n- shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate,这里同样可以拿到 nextProps 和 nextState\n\n### render 函数\n\n- render 函数会插入 jsx 生成的 dom 结构，react 会生成一份虚拟 dom 树，在每一次组件更新时，在此 react 会通过其 diff 算法比较更新前后的新旧 DOM 树，比较以后，找到最小的有差异的 DOM 节点，并重新渲染\n\n### componentDidUpdate(prevProps,prevState)\n\n- 组件更新完毕后，react 只会在第一次初始化成功会进入 componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state。\n\n### componentWillUnmount ()\n\n- 在组件从 DOM 中移除的时候立刻被调用。\n","slug":"React生命周期","published":1,"updated":"2019-07-23T08:58:17.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwbz000fygf0tcyiin97","content":"<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 只要组件存在constructor,就必要要写super,否则this指向会错误</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">    spuer(props, context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件将要加载</span></span><br><span class=\"line\">  componentWillMount() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件加载完成，只在render后，调用一次</span></span><br><span class=\"line\">  componentDidMount() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 接受新props时调用</span></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 接受下次props、state，判断是否更新组件，初始化时不调用</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件更改时</span></span><br><span class=\"line\">  componentWillUpdate(nextProps, nextState) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件更改完成</span></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// React 16 处理错误信息生命周期函数</span></span><br><span class=\"line\">  componentDidCatch() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件从DOM中移除前触发</span></span><br><span class=\"line\">  componentWillUnmount() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div /&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"constructor-构建函数\"><a href=\"#constructor-构建函数\" class=\"headerlink\" title=\"constructor 构建函数\"></a>constructor 构建函数</h3><ul>\n<li>constructor 参数接受两个参数 props,context 可以获取到父组件传下来的的 props,context,如果你想在&gt;constructor 构造函数内部(注意是内部哦，在组件其他地方是可以直接接收的)使用 props 或 context,则需&gt;要传入，并传入 super 对象。</li>\n</ul>\n<h3 id=\"componentWillMount-组件将要挂载\"><a href=\"#componentWillMount-组件将要挂载\" class=\"headerlink\" title=\"componentWillMount 组件将要挂载\"></a>componentWillMount 组件将要挂载</h3><ul>\n<li>组件刚经历 constructor,初始完数据</li>\n<li>组件还未进入 render，组件还未渲染完成，dom 还未渲染</li>\n</ul>\n<h3 id=\"componentDidMount-组件渲染完成-只执行一次\"><a href=\"#componentDidMount-组件渲染完成-只执行一次\" class=\"headerlink\" title=\"componentDidMount 组件渲染完成(只执行一次)\"></a>componentDidMount 组件渲染完成(只执行一次)</h3><ul>\n<li>组件第一次渲染完成，此时 dom 节点已经生成，可以在这里调用 ajax 请求，返回数据 setState 后组件会重新渲染</li>\n</ul>\n<h3 id=\"componentWillReceiveProps-nextProps-父组件-props-改变时调用、\"><a href=\"#componentWillReceiveProps-nextProps-父组件-props-改变时调用、\" class=\"headerlink\" title=\"componentWillReceiveProps (nextProps) 父组件 props 改变时调用、\"></a>componentWillReceiveProps (nextProps) 父组件 props 改变时调用、</h3><ul>\n<li>使用 this.props 访问当前的 props，可以在此 setState 更新，重新渲染组件</li>\n</ul>\n<h3 id=\"shouldComponentUpdate-nextProps-nextState\"><a href=\"#shouldComponentUpdate-nextProps-nextState\" class=\"headerlink\" title=\"shouldComponentUpdate(nextProps,nextState)\"></a>shouldComponentUpdate(nextProps,nextState)</h3><ul>\n<li>return boolean， true 更新组件，false 为阻止更新</li>\n<li>因为 react 父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断</li>\n</ul>\n<h3 id=\"componentWillUpdate-nextProps-nextState\"><a href=\"#componentWillUpdate-nextProps-nextState\" class=\"headerlink\" title=\"componentWillUpdate (nextProps,nextState)\"></a>componentWillUpdate (nextProps,nextState)</h3><ul>\n<li>shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate,这里同样可以拿到 nextProps 和 nextState</li>\n</ul>\n<h3 id=\"render-函数\"><a href=\"#render-函数\" class=\"headerlink\" title=\"render 函数\"></a>render 函数</h3><ul>\n<li>render 函数会插入 jsx 生成的 dom 结构，react 会生成一份虚拟 dom 树，在每一次组件更新时，在此 react 会通过其 diff 算法比较更新前后的新旧 DOM 树，比较以后，找到最小的有差异的 DOM 节点，并重新渲染</li>\n</ul>\n<h3 id=\"componentDidUpdate-prevProps-prevState\"><a href=\"#componentDidUpdate-prevProps-prevState\" class=\"headerlink\" title=\"componentDidUpdate(prevProps,prevState)\"></a>componentDidUpdate(prevProps,prevState)</h3><ul>\n<li>组件更新完毕后，react 只会在第一次初始化成功会进入 componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state。</li>\n</ul>\n<h3 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount ()\"></a>componentWillUnmount ()</h3><ul>\n<li>在组件从 DOM 中移除的时候立刻被调用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"comment\">// 只要组件存在constructor,就必要要写super,否则this指向会错误</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props, context) &#123;</span><br><span class=\"line\">    spuer(props, context)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件将要加载</span></span><br><span class=\"line\">  componentWillMount() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件加载完成，只在render后，调用一次</span></span><br><span class=\"line\">  componentDidMount() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 接受新props时调用</span></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 接受下次props、state，判断是否更新组件，初始化时不调用</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件更改时</span></span><br><span class=\"line\">  componentWillUpdate(nextProps, nextState) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件更改完成</span></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState) &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// React 16 处理错误信息生命周期函数</span></span><br><span class=\"line\">  componentDidCatch() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组件从DOM中移除前触发</span></span><br><span class=\"line\">  componentWillUnmount() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 渲染</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div /&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"constructor-构建函数\"><a href=\"#constructor-构建函数\" class=\"headerlink\" title=\"constructor 构建函数\"></a>constructor 构建函数</h3><ul>\n<li>constructor 参数接受两个参数 props,context 可以获取到父组件传下来的的 props,context,如果你想在&gt;constructor 构造函数内部(注意是内部哦，在组件其他地方是可以直接接收的)使用 props 或 context,则需&gt;要传入，并传入 super 对象。</li>\n</ul>\n<h3 id=\"componentWillMount-组件将要挂载\"><a href=\"#componentWillMount-组件将要挂载\" class=\"headerlink\" title=\"componentWillMount 组件将要挂载\"></a>componentWillMount 组件将要挂载</h3><ul>\n<li>组件刚经历 constructor,初始完数据</li>\n<li>组件还未进入 render，组件还未渲染完成，dom 还未渲染</li>\n</ul>\n<h3 id=\"componentDidMount-组件渲染完成-只执行一次\"><a href=\"#componentDidMount-组件渲染完成-只执行一次\" class=\"headerlink\" title=\"componentDidMount 组件渲染完成(只执行一次)\"></a>componentDidMount 组件渲染完成(只执行一次)</h3><ul>\n<li>组件第一次渲染完成，此时 dom 节点已经生成，可以在这里调用 ajax 请求，返回数据 setState 后组件会重新渲染</li>\n</ul>\n<h3 id=\"componentWillReceiveProps-nextProps-父组件-props-改变时调用、\"><a href=\"#componentWillReceiveProps-nextProps-父组件-props-改变时调用、\" class=\"headerlink\" title=\"componentWillReceiveProps (nextProps) 父组件 props 改变时调用、\"></a>componentWillReceiveProps (nextProps) 父组件 props 改变时调用、</h3><ul>\n<li>使用 this.props 访问当前的 props，可以在此 setState 更新，重新渲染组件</li>\n</ul>\n<h3 id=\"shouldComponentUpdate-nextProps-nextState\"><a href=\"#shouldComponentUpdate-nextProps-nextState\" class=\"headerlink\" title=\"shouldComponentUpdate(nextProps,nextState)\"></a>shouldComponentUpdate(nextProps,nextState)</h3><ul>\n<li>return boolean， true 更新组件，false 为阻止更新</li>\n<li>因为 react 父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断</li>\n</ul>\n<h3 id=\"componentWillUpdate-nextProps-nextState\"><a href=\"#componentWillUpdate-nextProps-nextState\" class=\"headerlink\" title=\"componentWillUpdate (nextProps,nextState)\"></a>componentWillUpdate (nextProps,nextState)</h3><ul>\n<li>shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate,这里同样可以拿到 nextProps 和 nextState</li>\n</ul>\n<h3 id=\"render-函数\"><a href=\"#render-函数\" class=\"headerlink\" title=\"render 函数\"></a>render 函数</h3><ul>\n<li>render 函数会插入 jsx 生成的 dom 结构，react 会生成一份虚拟 dom 树，在每一次组件更新时，在此 react 会通过其 diff 算法比较更新前后的新旧 DOM 树，比较以后，找到最小的有差异的 DOM 节点，并重新渲染</li>\n</ul>\n<h3 id=\"componentDidUpdate-prevProps-prevState\"><a href=\"#componentDidUpdate-prevProps-prevState\" class=\"headerlink\" title=\"componentDidUpdate(prevProps,prevState)\"></a>componentDidUpdate(prevProps,prevState)</h3><ul>\n<li>组件更新完毕后，react 只会在第一次初始化成功会进入 componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state。</li>\n</ul>\n<h3 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount ()\"></a>componentWillUnmount ()</h3><ul>\n<li>在组件从 DOM 中移除的时候立刻被调用。</li>\n</ul>\n"},{"title":"parseInt兼容性","date":"2018-09-10T16:00:00.000Z","_content":"\n```js\n/*\n * parseInt在不同的浏览器下有不同的默认行为处理\n * 需要传为第二个参数10，采用10进制转化\n */\nparseInt('09') // IE8下，默认用八进制转化，结果为0\nparseInt('09', 10) // IE8下，结果正常\n```\n","source":"_posts/parseInt兼容性.md","raw":"---\ntitle: parseInt兼容性\ndate: 2018-09-11\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n```js\n/*\n * parseInt在不同的浏览器下有不同的默认行为处理\n * 需要传为第二个参数10，采用10进制转化\n */\nparseInt('09') // IE8下，默认用八进制转化，结果为0\nparseInt('09', 10) // IE8下，结果正常\n```\n","slug":"parseInt兼容性","published":1,"updated":"2019-07-23T08:58:17.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwc3000iygf02phw10eh","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * parseInt在不同的浏览器下有不同的默认行为处理</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要传为第二个参数10，采用10进制转化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'09'</span>) <span class=\"comment\">// IE8下，默认用八进制转化，结果为0</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'09'</span>, <span class=\"number\">10</span>) <span class=\"comment\">// IE8下，结果正常</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * parseInt在不同的浏览器下有不同的默认行为处理</span></span><br><span class=\"line\"><span class=\"comment\"> * 需要传为第二个参数10，采用10进制转化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'09'</span>) <span class=\"comment\">// IE8下，默认用八进制转化，结果为0</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'09'</span>, <span class=\"number\">10</span>) <span class=\"comment\">// IE8下，结果正常</span></span><br></pre></td></tr></table></figure>\n"},{"title":"array_diff 数组差集","date":"2018-08-14T16:00:00.000Z","_content":"\n## array_diff\n\n> 定义：比较两个数组的键值，并返回差集，函数返回两个数组的差集数组。该数组包括了所有在被比较的数组中，但是不在任何其他参数数组中的键值。在返回的数组中，键名保持不变。\n\n> 用法：array_diff(array1,array2,array3...); 可传多个数组，后续数组，与第一个数组对比，只能对比一维数组、对比二维数组时，抛出一个异常（Notice）\n\n> 返回数组：返回差集数组，该数组包括了所有在被比较的数组（array1）中，但是不在任何其他参数数组（array2 或 array3 等等）中的键值。\n","source":"_posts/array_diff 数组差集.md","raw":"---\ntitle: array_diff 数组差集\ndate: 2018-08-15\ntags:\n  - PHP\ncategories:\n  - 代码\n---\n\n## array_diff\n\n> 定义：比较两个数组的键值，并返回差集，函数返回两个数组的差集数组。该数组包括了所有在被比较的数组中，但是不在任何其他参数数组中的键值。在返回的数组中，键名保持不变。\n\n> 用法：array_diff(array1,array2,array3...); 可传多个数组，后续数组，与第一个数组对比，只能对比一维数组、对比二维数组时，抛出一个异常（Notice）\n\n> 返回数组：返回差集数组，该数组包括了所有在被比较的数组（array1）中，但是不在任何其他参数数组（array2 或 array3 等等）中的键值。\n","slug":"array_diff 数组差集","published":1,"updated":"2019-07-23T08:58:17.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwc6000nygf07ear65e0","content":"<h2 id=\"array-diff\"><a href=\"#array-diff\" class=\"headerlink\" title=\"array_diff\"></a>array_diff</h2><blockquote>\n<p>定义：比较两个数组的键值，并返回差集，函数返回两个数组的差集数组。该数组包括了所有在被比较的数组中，但是不在任何其他参数数组中的键值。在返回的数组中，键名保持不变。</p>\n</blockquote>\n<blockquote>\n<p>用法：array_diff(array1,array2,array3…); 可传多个数组，后续数组，与第一个数组对比，只能对比一维数组、对比二维数组时，抛出一个异常（Notice）</p>\n</blockquote>\n<blockquote>\n<p>返回数组：返回差集数组，该数组包括了所有在被比较的数组（array1）中，但是不在任何其他参数数组（array2 或 array3 等等）中的键值。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"array-diff\"><a href=\"#array-diff\" class=\"headerlink\" title=\"array_diff\"></a>array_diff</h2><blockquote>\n<p>定义：比较两个数组的键值，并返回差集，函数返回两个数组的差集数组。该数组包括了所有在被比较的数组中，但是不在任何其他参数数组中的键值。在返回的数组中，键名保持不变。</p>\n</blockquote>\n<blockquote>\n<p>用法：array_diff(array1,array2,array3…); 可传多个数组，后续数组，与第一个数组对比，只能对比一维数组、对比二维数组时，抛出一个异常（Notice）</p>\n</blockquote>\n<blockquote>\n<p>返回数组：返回差集数组，该数组包括了所有在被比较的数组（array1）中，但是不在任何其他参数数组（array2 或 array3 等等）中的键值。</p>\n</blockquote>\n"},{"title":"git新建远程版本库","date":"2018-08-14T16:00:00.000Z","_content":"\n## 前提为已安装好 git\n\n```bash\n// 新建一个文件夹，文件名为项目名\nmkdir hexo.git\n\n// 进入文件夹，初始化\ncd hexo.git\ngit init --bare\n\n// 生成好初始git文件后，更改文件夹的所属组，所属用户\nchown -R git:git hexo.git\n```\n","source":"_posts/git新建远程版本库.md","raw":"---\ntitle: git新建远程版本库\ndate: 2018-08-15\ntags:\n  - Git\ncategories:\n  - Code\n---\n\n## 前提为已安装好 git\n\n```bash\n// 新建一个文件夹，文件名为项目名\nmkdir hexo.git\n\n// 进入文件夹，初始化\ncd hexo.git\ngit init --bare\n\n// 生成好初始git文件后，更改文件夹的所属组，所属用户\nchown -R git:git hexo.git\n```\n","slug":"git新建远程版本库","published":1,"updated":"2019-07-23T08:58:17.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwc8000pygf05ubyj762","content":"<h2 id=\"前提为已安装好-git\"><a href=\"#前提为已安装好-git\" class=\"headerlink\" title=\"前提为已安装好 git\"></a>前提为已安装好 git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 新建一个文件夹，文件名为项目名</span><br><span class=\"line\">mkdir hexo.git</span><br><span class=\"line\"></span><br><span class=\"line\">// 进入文件夹，初始化</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo.git</span><br><span class=\"line\">git init --bare</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成好初始git文件后，更改文件夹的所属组，所属用户</span><br><span class=\"line\">chown -R git:git hexo.git</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前提为已安装好-git\"><a href=\"#前提为已安装好-git\" class=\"headerlink\" title=\"前提为已安装好 git\"></a>前提为已安装好 git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 新建一个文件夹，文件名为项目名</span><br><span class=\"line\">mkdir hexo.git</span><br><span class=\"line\"></span><br><span class=\"line\">// 进入文件夹，初始化</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hexo.git</span><br><span class=\"line\">git init --bare</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成好初始git文件后，更改文件夹的所属组，所属用户</span><br><span class=\"line\">chown -R git:git hexo.git</span><br></pre></td></tr></table></figure>\n"},{"title":"css浮动后父元素高度坍塌","date":"2018-10-17T15:21:38.000Z","_content":"\n```css\n/* \n  *  父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷\n  *  所以要清除浮动\n  *  给父级添加overflow:hidden 清除浮动方法\n  *  万能清除法 after伪类 清浮动(现在主流方法，推荐使用)\n*/\n.float_div:after {\n  content: \".\";\n  clear: both;\n  display: block;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n```\n","source":"_posts/css浮动后父元素高度坍塌.md","raw":"---\ntitle: css浮动后父元素高度坍塌\ndate: 2018-10-17 23:21:38\ntags:\n  - Css\n  - Float\ncategories:\n  - Code\n---\n\n```css\n/* \n  *  父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷\n  *  所以要清除浮动\n  *  给父级添加overflow:hidden 清除浮动方法\n  *  万能清除法 after伪类 清浮动(现在主流方法，推荐使用)\n*/\n.float_div:after {\n  content: \".\";\n  clear: both;\n  display: block;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n```\n","slug":"css浮动后父元素高度坍塌","published":1,"updated":"2019-07-23T08:58:17.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwca000uygf0mzgculmr","content":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  *  父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷</span></span><br><span class=\"line\"><span class=\"comment\">  *  所以要清除浮动</span></span><br><span class=\"line\"><span class=\"comment\">  *  给父级添加overflow:hidden 清除浮动方法</span></span><br><span class=\"line\"><span class=\"comment\">  *  万能清除法 after伪类 清浮动(现在主流方法，推荐使用)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.float_div</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  *  父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷</span></span><br><span class=\"line\"><span class=\"comment\">  *  所以要清除浮动</span></span><br><span class=\"line\"><span class=\"comment\">  *  给父级添加overflow:hidden 清除浮动方法</span></span><br><span class=\"line\"><span class=\"comment\">  *  万能清除法 after伪类 清浮动(现在主流方法，推荐使用)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.float_div</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Nginx开启gzip配置","date":"2019-01-31T16:00:00.000Z","_content":"\n## Nginx 开启 gzip 配置\n\n```bash\nserver {\n    listen 80;\n    server_name  www.utone.xyz;\n\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    gzip_comp_level 5;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6].\";\n\n    location / {\n        root /data/blog/shixiaohu2206.github.io;\n        #error_page  404/data/blog/shixiaohu2206.github.io/404.html;\n        #try_files $uri /index.html;\n        index index.html;\n    }\n}\n\n```\n\n## 配置\n\n- gzip on\n  设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。\n- gzip_buffers 4 16k\n  获取多少内存用于缓存压缩结果，‘4 16k’表示以 16k\\*4 为单位获得\n- gzip_comp_level 5\n  gzip 压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;\n- gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php\n  对特定的 MIME 类型生效,其中'text/html’被系统强制启用\n- gzip_http_version 1.1\n  识别 http 协议的版本,早起浏览器可能不支持 gzip 自解压,用户会看到乱码\n- gzip_vary on\n  启用应答头\"Vary: Accept-Encoding\"\n- gzip_proxied off\n  nginx 做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果 header 头中包括\"Expires\"头信息),no-cache(启用压缩,header 头中包含\"Cache-Control:no-cache\"),no-store(启用压缩,header 头中包含\"Cache-Control:no-store\"),private(启用压缩,header 头中包含\"Cache-Control:private\"),no_last_modefied(启用压缩,header 头中不包含\"Last-Modified\"),no_etag(启用压缩,如果 header 头中不包含\"Etag\"头信息),auth(启用压缩,如果 header 头中包含\"Authorization\"头信息)\n- gzip_disable msie6\n  (IE5.5 和 IE6 SP1 使用 msie6 参数来禁止 gzip 压缩 )指定哪些不需要 gzip 压缩的浏览器(将和 User-Agents 进行匹配),依赖于 PCRE 库\n","source":"_posts/ngixn开启gzip配置.md","raw":"---\ntitle: Nginx开启gzip配置\ndate: 2019-02-01\ntags:\n  - Nginx\n  - Linux\ncategories:\n  - Code\n---\n\n## Nginx 开启 gzip 配置\n\n```bash\nserver {\n    listen 80;\n    server_name  www.utone.xyz;\n\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 4 16k;\n    gzip_comp_level 5;\n    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6].\";\n\n    location / {\n        root /data/blog/shixiaohu2206.github.io;\n        #error_page  404/data/blog/shixiaohu2206.github.io/404.html;\n        #try_files $uri /index.html;\n        index index.html;\n    }\n}\n\n```\n\n## 配置\n\n- gzip on\n  设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。\n- gzip_buffers 4 16k\n  获取多少内存用于缓存压缩结果，‘4 16k’表示以 16k\\*4 为单位获得\n- gzip_comp_level 5\n  gzip 压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;\n- gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php\n  对特定的 MIME 类型生效,其中'text/html’被系统强制启用\n- gzip_http_version 1.1\n  识别 http 协议的版本,早起浏览器可能不支持 gzip 自解压,用户会看到乱码\n- gzip_vary on\n  启用应答头\"Vary: Accept-Encoding\"\n- gzip_proxied off\n  nginx 做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果 header 头中包括\"Expires\"头信息),no-cache(启用压缩,header 头中包含\"Cache-Control:no-cache\"),no-store(启用压缩,header 头中包含\"Cache-Control:no-store\"),private(启用压缩,header 头中包含\"Cache-Control:private\"),no_last_modefied(启用压缩,header 头中不包含\"Last-Modified\"),no_etag(启用压缩,如果 header 头中不包含\"Etag\"头信息),auth(启用压缩,如果 header 头中包含\"Authorization\"头信息)\n- gzip_disable msie6\n  (IE5.5 和 IE6 SP1 使用 msie6 参数来禁止 gzip 压缩 )指定哪些不需要 gzip 压缩的浏览器(将和 User-Agents 进行匹配),依赖于 PCRE 库\n","slug":"ngixn开启gzip配置","published":1,"updated":"2019-07-23T08:58:17.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwd5001vygf0jujoxj6z","content":"<h2 id=\"Nginx-开启-gzip-配置\"><a href=\"#Nginx-开启-gzip-配置\" class=\"headerlink\" title=\"Nginx 开启 gzip 配置\"></a>Nginx 开启 gzip 配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name  www.utone.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    gzip_comp_level 5;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable <span class=\"string\">\"MSIE [1-6].\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /data/blog/shixiaohu2206.github.io;</span><br><span class=\"line\">        <span class=\"comment\">#error_page  404/data/blog/shixiaohu2206.github.io/404.html;</span></span><br><span class=\"line\">        <span class=\"comment\">#try_files $uri /index.html;</span></span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li>gzip on<br>设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。</li>\n<li>gzip_buffers 4 16k<br>获取多少内存用于缓存压缩结果，‘4 16k’表示以 16k*4 为单位获得</li>\n<li>gzip_comp_level 5<br>gzip 压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;</li>\n<li>gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php<br>对特定的 MIME 类型生效,其中’text/html’被系统强制启用</li>\n<li>gzip_http_version 1.1<br>识别 http 协议的版本,早起浏览器可能不支持 gzip 自解压,用户会看到乱码</li>\n<li>gzip_vary on<br>启用应答头”Vary: Accept-Encoding”</li>\n<li>gzip_proxied off<br>nginx 做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果 header 头中包括”Expires”头信息),no-cache(启用压缩,header 头中包含”Cache-Control:no-cache”),no-store(启用压缩,header 头中包含”Cache-Control:no-store”),private(启用压缩,header 头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header 头中不包含”Last-Modified”),no_etag(启用压缩,如果 header 头中不包含”Etag”头信息),auth(启用压缩,如果 header 头中包含”Authorization”头信息)</li>\n<li>gzip_disable msie6<br>(IE5.5 和 IE6 SP1 使用 msie6 参数来禁止 gzip 压缩 )指定哪些不需要 gzip 压缩的浏览器(将和 User-Agents 进行匹配),依赖于 PCRE 库</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Nginx-开启-gzip-配置\"><a href=\"#Nginx-开启-gzip-配置\" class=\"headerlink\" title=\"Nginx 开启 gzip 配置\"></a>Nginx 开启 gzip 配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name  www.utone.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 4 16k;</span><br><span class=\"line\">    gzip_comp_level 5;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable <span class=\"string\">\"MSIE [1-6].\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /data/blog/shixiaohu2206.github.io;</span><br><span class=\"line\">        <span class=\"comment\">#error_page  404/data/blog/shixiaohu2206.github.io/404.html;</span></span><br><span class=\"line\">        <span class=\"comment\">#try_files $uri /index.html;</span></span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li>gzip on<br>设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。</li>\n<li>gzip_buffers 4 16k<br>获取多少内存用于缓存压缩结果，‘4 16k’表示以 16k*4 为单位获得</li>\n<li>gzip_comp_level 5<br>gzip 压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;</li>\n<li>gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php<br>对特定的 MIME 类型生效,其中’text/html’被系统强制启用</li>\n<li>gzip_http_version 1.1<br>识别 http 协议的版本,早起浏览器可能不支持 gzip 自解压,用户会看到乱码</li>\n<li>gzip_vary on<br>启用应答头”Vary: Accept-Encoding”</li>\n<li>gzip_proxied off<br>nginx 做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果 header 头中包括”Expires”头信息),no-cache(启用压缩,header 头中包含”Cache-Control:no-cache”),no-store(启用压缩,header 头中包含”Cache-Control:no-store”),private(启用压缩,header 头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header 头中不包含”Last-Modified”),no_etag(启用压缩,如果 header 头中不包含”Etag”头信息),auth(启用压缩,如果 header 头中包含”Authorization”头信息)</li>\n<li>gzip_disable msie6<br>(IE5.5 和 IE6 SP1 使用 msie6 参数来禁止 gzip 压缩 )指定哪些不需要 gzip 压缩的浏览器(将和 User-Agents 进行匹配),依赖于 PCRE 库</li>\n</ul>\n"},{"title":"函数防抖、函数节流","date":"2019-02-14T02:31:06.000Z","_content":"\n# 函数消抖（debounce）\n\n> 当调用函数 n 秒后，才会执行该动作，若在这 n 秒内又调用该函数则将取消前一次并重新计算执行时间\n\n## 代码原理\n\n> 设定一个全局变量保存定时器，事件触发时，判断定时器是否存在，存在时，消除定时器，不存在时，重新设定定时器，确保一段时间内，只存在一个定时器。\n\n## 伪代码\n\n```js\nfunction _log() {\n  console.log('log')\n}\n\nfunction _debounce(fn, delay) {\n  var timer = null\n\n  return function() {\n    timer && clearTimeout(timer)\n    timer = setTimeout(function() {\n      fn()\n    }, delay)\n  }\n}\n\nwindow.onresize = _debounce(_log, 1000)\n```\n\n# 函数节流（throttle）\n\n> 函数预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期\n\n## 代码原理\n\n> 定义一个时间周期，当调用动作频率小于定义的时间周期，则进入下一周期，不会频繁触发\n\n## 伪代码\n\n```js\nfunction _log() {\n  console.log('log')\n}\n\nfunction _throttle(method, duration) {\n  var begin = new Date()\n  return function() {\n    var _this = this,\n      _args = arguments,\n      current = new Date()\n    if (current - begin >= duration) {\n      method.apply(_this, _args)\n      begin = current\n    }\n  }\n}\n\nwindow.onresize = _throttle(_log, 1000)\n```\n","source":"_posts/函数防抖.md","raw":"---\ntitle: 函数防抖、函数节流\ndate: 2019-02-14 10:31:06\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n# 函数消抖（debounce）\n\n> 当调用函数 n 秒后，才会执行该动作，若在这 n 秒内又调用该函数则将取消前一次并重新计算执行时间\n\n## 代码原理\n\n> 设定一个全局变量保存定时器，事件触发时，判断定时器是否存在，存在时，消除定时器，不存在时，重新设定定时器，确保一段时间内，只存在一个定时器。\n\n## 伪代码\n\n```js\nfunction _log() {\n  console.log('log')\n}\n\nfunction _debounce(fn, delay) {\n  var timer = null\n\n  return function() {\n    timer && clearTimeout(timer)\n    timer = setTimeout(function() {\n      fn()\n    }, delay)\n  }\n}\n\nwindow.onresize = _debounce(_log, 1000)\n```\n\n# 函数节流（throttle）\n\n> 函数预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期\n\n## 代码原理\n\n> 定义一个时间周期，当调用动作频率小于定义的时间周期，则进入下一周期，不会频繁触发\n\n## 伪代码\n\n```js\nfunction _log() {\n  console.log('log')\n}\n\nfunction _throttle(method, duration) {\n  var begin = new Date()\n  return function() {\n    var _this = this,\n      _args = arguments,\n      current = new Date()\n    if (current - begin >= duration) {\n      method.apply(_this, _args)\n      begin = current\n    }\n  }\n}\n\nwindow.onresize = _throttle(_log, 1000)\n```\n","slug":"函数防抖","published":1,"updated":"2019-07-23T08:58:17.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwd7001xygf0n6hnhfqz","content":"<h1 id=\"函数消抖（debounce）\"><a href=\"#函数消抖（debounce）\" class=\"headerlink\" title=\"函数消抖（debounce）\"></a>函数消抖（debounce）</h1><blockquote>\n<p>当调用函数 n 秒后，才会执行该动作，若在这 n 秒内又调用该函数则将取消前一次并重新计算执行时间</p>\n</blockquote>\n<h2 id=\"代码原理\"><a href=\"#代码原理\" class=\"headerlink\" title=\"代码原理\"></a>代码原理</h2><blockquote>\n<p>设定一个全局变量保存定时器，事件触发时，判断定时器是否存在，存在时，消除定时器，不存在时，重新设定定时器，确保一段时间内，只存在一个定时器。</p>\n</blockquote>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    timer &amp;&amp; clearTimeout(timer)</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn()</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = _debounce(_log, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数节流（throttle）\"><a href=\"#函数节流（throttle）\" class=\"headerlink\" title=\"函数节流（throttle）\"></a>函数节流（throttle）</h1><blockquote>\n<p>函数预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期</p>\n</blockquote>\n<h2 id=\"代码原理-1\"><a href=\"#代码原理-1\" class=\"headerlink\" title=\"代码原理\"></a>代码原理</h2><blockquote>\n<p>定义一个时间周期，当调用动作频率小于定义的时间周期，则进入下一周期，不会频繁触发</p>\n</blockquote>\n<h2 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_throttle</span>(<span class=\"params\">method, duration</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> begin = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">      _args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">      current = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current - begin &gt;= duration) &#123;</span><br><span class=\"line\">      method.apply(_this, _args)</span><br><span class=\"line\">      begin = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = _throttle(_log, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"函数消抖（debounce）\"><a href=\"#函数消抖（debounce）\" class=\"headerlink\" title=\"函数消抖（debounce）\"></a>函数消抖（debounce）</h1><blockquote>\n<p>当调用函数 n 秒后，才会执行该动作，若在这 n 秒内又调用该函数则将取消前一次并重新计算执行时间</p>\n</blockquote>\n<h2 id=\"代码原理\"><a href=\"#代码原理\" class=\"headerlink\" title=\"代码原理\"></a>代码原理</h2><blockquote>\n<p>设定一个全局变量保存定时器，事件触发时，判断定时器是否存在，存在时，消除定时器，不存在时，重新设定定时器，确保一段时间内，只存在一个定时器。</p>\n</blockquote>\n<h2 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    timer &amp;&amp; clearTimeout(timer)</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn()</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = _debounce(_log, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数节流（throttle）\"><a href=\"#函数节流（throttle）\" class=\"headerlink\" title=\"函数节流（throttle）\"></a>函数节流（throttle）</h1><blockquote>\n<p>函数预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期</p>\n</blockquote>\n<h2 id=\"代码原理-1\"><a href=\"#代码原理-1\" class=\"headerlink\" title=\"代码原理\"></a>代码原理</h2><blockquote>\n<p>定义一个时间周期，当调用动作频率小于定义的时间周期，则进入下一周期，不会频繁触发</p>\n</blockquote>\n<h2 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'log'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_throttle</span>(<span class=\"params\">method, duration</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> begin = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">      _args = <span class=\"built_in\">arguments</span>,</span><br><span class=\"line\">      current = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current - begin &gt;= duration) &#123;</span><br><span class=\"line\">      method.apply(_this, _args)</span><br><span class=\"line\">      begin = current</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onresize = _throttle(_log, <span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"usort自定义排序","date":"2018-09-24T16:00:00.000Z","_content":"\n## usort 自定义排序\n\n> 工作上需要对 php 数组自定义排序，使用了 usort 函数，但若比较参数中，出现空字符串时，这样含有空字符串的元素就是拍在前面\n\n<!--more-->\n\n```php\n$demo = [\"3\", \"2\" ,\"\", \"5\", \"\"];\n\n// 使用自定义排序函数\nusort($demo, \"myusort\");\n\n/**\n * 不考虑元素为空字符串\n * @param $a\n * @param $b\n * @return int\n */\nfunction myusort($a, $b) {\n   // 差值\n   $diff = strtotime($a) - strtotime($b);\n   if ($diff == 0) return 0;\n   return $diff > 0 ? 1 : -1;\n}\n\n/* 结果为\narray (size=5)\n  0 => string \"\" (length=0)\n  1 => string \"\" (length=0)\n  2 => string \"2\" (length=1)\n  3 => string \"3\" (length=1)\n  4 => string \"5\" (length=1)\n*/\n```\n\n> 现需求为元素为空字符串时，排在末尾\n\n```php\n/**\n * 考虑元素为空字符串\n * @param $a 为后一个元素\n * @param $b 为前一个元素\n * @return int 返回1，则位置不变化，返回-1则调换位置\n * 返回0时、如果两个元素比较结果相同，则它们在排序后的数组中的顺序未经定义。\n * 到 PHP 4.0.6 之前，用户自定义函数将保留这些元素的原有顺序。\n * 但是由于在 4.1.0 中引进了新的排序算法，结果将不是这样了，因为对此没有一个有效的解决方案\n */\nfunction myusort($a, $b) {\n\n    // 单独做处理\n    if (empty($a)) {\n        return 1;\n    }\n    if (empty($b)) {\n        return -1;\n    }\n\n   // 差值\n   $diff = strtotime($a) - strtotime($b);\n   if ($diff == 0) return 0;\n   return $diff > 0 ? 1 : -1;\n}\n/* 结果为\narray (size=5)\n  0 => string \"2\" (length=1)\n  1 => string \"3\" (length=1)\n  2 => string \"5\" (length=1)\n  3 => string \"\" (length=0)\n  4 => string \"\" (length=0)\n*/\n```\n","source":"_posts/usort 自定义排序.md","raw":"---\ntitle: usort自定义排序\ndate: 2018-09-25\ntags:\n  - PHP\ncategories:\n  - Code\n---\n\n## usort 自定义排序\n\n> 工作上需要对 php 数组自定义排序，使用了 usort 函数，但若比较参数中，出现空字符串时，这样含有空字符串的元素就是拍在前面\n\n<!--more-->\n\n```php\n$demo = [\"3\", \"2\" ,\"\", \"5\", \"\"];\n\n// 使用自定义排序函数\nusort($demo, \"myusort\");\n\n/**\n * 不考虑元素为空字符串\n * @param $a\n * @param $b\n * @return int\n */\nfunction myusort($a, $b) {\n   // 差值\n   $diff = strtotime($a) - strtotime($b);\n   if ($diff == 0) return 0;\n   return $diff > 0 ? 1 : -1;\n}\n\n/* 结果为\narray (size=5)\n  0 => string \"\" (length=0)\n  1 => string \"\" (length=0)\n  2 => string \"2\" (length=1)\n  3 => string \"3\" (length=1)\n  4 => string \"5\" (length=1)\n*/\n```\n\n> 现需求为元素为空字符串时，排在末尾\n\n```php\n/**\n * 考虑元素为空字符串\n * @param $a 为后一个元素\n * @param $b 为前一个元素\n * @return int 返回1，则位置不变化，返回-1则调换位置\n * 返回0时、如果两个元素比较结果相同，则它们在排序后的数组中的顺序未经定义。\n * 到 PHP 4.0.6 之前，用户自定义函数将保留这些元素的原有顺序。\n * 但是由于在 4.1.0 中引进了新的排序算法，结果将不是这样了，因为对此没有一个有效的解决方案\n */\nfunction myusort($a, $b) {\n\n    // 单独做处理\n    if (empty($a)) {\n        return 1;\n    }\n    if (empty($b)) {\n        return -1;\n    }\n\n   // 差值\n   $diff = strtotime($a) - strtotime($b);\n   if ($diff == 0) return 0;\n   return $diff > 0 ? 1 : -1;\n}\n/* 结果为\narray (size=5)\n  0 => string \"2\" (length=1)\n  1 => string \"3\" (length=1)\n  2 => string \"5\" (length=1)\n  3 => string \"\" (length=0)\n  4 => string \"\" (length=0)\n*/\n```\n","slug":"usort 自定义排序","published":1,"updated":"2019-07-23T08:58:17.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwd9001zygf0v0zccd1a","content":"<h2 id=\"usort-自定义排序\"><a href=\"#usort-自定义排序\" class=\"headerlink\" title=\"usort 自定义排序\"></a>usort 自定义排序</h2><blockquote>\n<p>工作上需要对 php 数组自定义排序，使用了 usort 函数，但若比较参数中，出现空字符串时，这样含有空字符串的元素就是拍在前面</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$demo = [<span class=\"string\">\"3\"</span>, <span class=\"string\">\"2\"</span> ,<span class=\"string\">\"\"</span>, <span class=\"string\">\"5\"</span>, <span class=\"string\">\"\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用自定义排序函数</span></span><br><span class=\"line\">usort($demo, <span class=\"string\">\"myusort\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 不考虑元素为空字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $b</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myusort</span><span class=\"params\">($a, $b)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 差值</span></span><br><span class=\"line\">   $diff = strtotime($a) - strtotime($b);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ($diff == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $diff &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 结果为</span></span><br><span class=\"line\"><span class=\"comment\">array (size=5)</span></span><br><span class=\"line\"><span class=\"comment\">  0 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">  1 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">  2 =&gt; string \"2\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  3 =&gt; string \"3\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  4 =&gt; string \"5\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现需求为元素为空字符串时，排在末尾</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 考虑元素为空字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $a 为后一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $b 为前一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int 返回1，则位置不变化，返回-1则调换位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回0时、如果两个元素比较结果相同，则它们在排序后的数组中的顺序未经定义。</span></span><br><span class=\"line\"><span class=\"comment\"> * 到 PHP 4.0.6 之前，用户自定义函数将保留这些元素的原有顺序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 但是由于在 4.1.0 中引进了新的排序算法，结果将不是这样了，因为对此没有一个有效的解决方案</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myusort</span><span class=\"params\">($a, $b)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 单独做处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($a)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 差值</span></span><br><span class=\"line\">   $diff = strtotime($a) - strtotime($b);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ($diff == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $diff &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 结果为</span></span><br><span class=\"line\"><span class=\"comment\">array (size=5)</span></span><br><span class=\"line\"><span class=\"comment\">  0 =&gt; string \"2\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  1 =&gt; string \"3\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  2 =&gt; string \"5\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  3 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">  4 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"usort-自定义排序\"><a href=\"#usort-自定义排序\" class=\"headerlink\" title=\"usort 自定义排序\"></a>usort 自定义排序</h2><blockquote>\n<p>工作上需要对 php 数组自定义排序，使用了 usort 函数，但若比较参数中，出现空字符串时，这样含有空字符串的元素就是拍在前面</p>\n</blockquote>","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$demo = [<span class=\"string\">\"3\"</span>, <span class=\"string\">\"2\"</span> ,<span class=\"string\">\"\"</span>, <span class=\"string\">\"5\"</span>, <span class=\"string\">\"\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用自定义排序函数</span></span><br><span class=\"line\">usort($demo, <span class=\"string\">\"myusort\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 不考虑元素为空字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $a</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $b</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myusort</span><span class=\"params\">($a, $b)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 差值</span></span><br><span class=\"line\">   $diff = strtotime($a) - strtotime($b);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ($diff == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $diff &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 结果为</span></span><br><span class=\"line\"><span class=\"comment\">array (size=5)</span></span><br><span class=\"line\"><span class=\"comment\">  0 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">  1 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">  2 =&gt; string \"2\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  3 =&gt; string \"3\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  4 =&gt; string \"5\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现需求为元素为空字符串时，排在末尾</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 考虑元素为空字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $a 为后一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $b 为前一个元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> int 返回1，则位置不变化，返回-1则调换位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回0时、如果两个元素比较结果相同，则它们在排序后的数组中的顺序未经定义。</span></span><br><span class=\"line\"><span class=\"comment\"> * 到 PHP 4.0.6 之前，用户自定义函数将保留这些元素的原有顺序。</span></span><br><span class=\"line\"><span class=\"comment\"> * 但是由于在 4.1.0 中引进了新的排序算法，结果将不是这样了，因为对此没有一个有效的解决方案</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myusort</span><span class=\"params\">($a, $b)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 单独做处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($a)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 差值</span></span><br><span class=\"line\">   $diff = strtotime($a) - strtotime($b);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ($diff == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> $diff &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 结果为</span></span><br><span class=\"line\"><span class=\"comment\">array (size=5)</span></span><br><span class=\"line\"><span class=\"comment\">  0 =&gt; string \"2\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  1 =&gt; string \"3\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  2 =&gt; string \"5\" (length=1)</span></span><br><span class=\"line\"><span class=\"comment\">  3 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">  4 =&gt; string \"\" (length=0)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>"},{"title":"代码规范","date":"2019-06-14T11:04:06.000Z","_content":"\n## 代码规范\n\n#### 代码规范优点\n\n> 由于项目开发多成员协作问题，程序员开发习惯不同，项目的不断迭代会导致代码质量问题、代码维护问题、可读性问题的出现，所以好的校验工具可以确保一个项目遵循代码规范、避免一些常见的隐患出现\n\n### Prettier\n\n> 配置文档地址: https://prettier.io/docs/en/options.html\n\n1. 在项目根目录下添加`prettier.config.js`\n\n```js\nmodule.exports = {\n  printWidth: 80, // 一行最大多少字符\n  tabWidth: 2, // tab占用的字符数\n  semi: false, // 在语句末尾添加分号\n  useTabs: false, // 是否使用tab代替空格\n  singleQuote: true, // 是否使用单引号\n  jsxSingleQuote: false, // jsx是否使用单引号\n  jsxBracketSameLinte: true, // 在多行JSX元素最后一行的末尾添加 > 而使 > 单独一行（不适用于自闭和元素）\n  trailingComma: 'none', // 在任何可能的多行中输入尾逗号\n  bracketSpacing: true, // 在对象字面量声明所使用的的花括号后（{）和前（}）输出空格\n  jsxBracketSameLine: false, // 看官网\n  arrowParens: 'avoid', // 为单行箭头函数的参数添加圆括号,\n  /**\n   * endOfLine: \"<auto|lf|crlf|cr>\"\n   * \"auto\" - 维护现有的行结尾（通过查看第一行之后使用的内容来标准化一个文件中的混合值）\n   * \"lf\"- Line Feed only（\\n），在Linux和macOS以及git repos内部很常见\n   * \"crlf\"- 回车符+换行符（\\r\\n），在Windows上很常见\n   * \"cr\"- 仅限回车符（\\r），很少使用\n   */\n  endOfLine: 'auto' // 文件行结尾风格\n}\n```\n\n### Eslint\n\n> 配置文档地址：https://cn.eslint.org/docs/rules/\n\n1. 在项目跟目录下添加`.eslintrc.json`\n\n```js\nmodule.exports = {\n  parser: 'babel-eslint',\n  env: {\n    browser: true,\n    node: true,\n    commonjs: true,\n    amd: true,\n    es6: true,\n    mocha: true\n  },\n  extends: ['eslint:recommended', 'plugin:react/recommended'], // 使用Eslint官方规则推荐\n  globals: {\n    Atomics: 'readonly',\n    SharedArrayBuffer: 'readonly'\n  },\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module'\n  },\n  rules: {\n    semi: 0, // 要求或禁止使用分号代替 ASI\n    'no-undef': 2, // 禁用未声明的变量，除非它们在 /*global */ 注释中被提到\n    'jsx-quotes': 0, // 强制在 JSX 属性中一致地使用双引号或单引号\n    quotes: [0, 'single', 'double'], // 强制使用一致的反勾号、双引号或单引号\n    'no-multi-spaces': 2, // 禁止使用多个空格\n    'comma-spacing': [2, { before: false, after: true }], // 强制在逗号前后使用一致的空格\n    'comma-dangle': 2, // 要求或禁止末尾逗号\n    'valid-jsdoc': 0, // 强制使用有效的 JSDoc 注释\n    indent: ['error', 2], // 强制使用一致的缩进\n    'arrow-parens': 0, // 要求箭头函数的参数使用圆括号\n    'object-curly-spacing': 0, // 强制在大括号中使用一致的空格\n    'spaced-comment': [2, 'always'], // 强制在注释中 // 或 /* 使用一致的空格\n    'one-var-declaration-per-line': 2, // 要求或禁止在变量声明周围换行\n    'default-case': 2, // 要求 switch 语句中有 default 分支\n    'no-new-wrappers': 2, // 禁止对 String，Number 和 Boolean 使用 new 操作符\n    eqeqeq: 1, // 要求使用 === 和 !==\n    'no-alert': 1, // 禁用 alert、confirm 和 prompt\n    'no-console': 1, // 禁用 alert、confirm 和 prompt\n    'no-eval': 1, // 禁用 eval()\n    'no-implied-eval': 1, // 禁止使用类似 eval() 的方法\n    'eol-last': 2, // 要求或禁止文件末尾存在空行\n    'no-multiple-empty-lines': 2, // 禁止出现多行空行\n    'no-var': 2, // 要求使用 let 或 const 而不是 var\n    'prefer-const': 2 // 要求使用 const 声明那些声明后不再被修改的变量\n  }\n}\n```\n","source":"_posts/代码规范.md","raw":"---\ntitle: 代码规范\ndate: 2019-06-14 19:04:06\ntags:\n  - JavaScript\ncategories:\n  - Note\n---\n\n## 代码规范\n\n#### 代码规范优点\n\n> 由于项目开发多成员协作问题，程序员开发习惯不同，项目的不断迭代会导致代码质量问题、代码维护问题、可读性问题的出现，所以好的校验工具可以确保一个项目遵循代码规范、避免一些常见的隐患出现\n\n### Prettier\n\n> 配置文档地址: https://prettier.io/docs/en/options.html\n\n1. 在项目根目录下添加`prettier.config.js`\n\n```js\nmodule.exports = {\n  printWidth: 80, // 一行最大多少字符\n  tabWidth: 2, // tab占用的字符数\n  semi: false, // 在语句末尾添加分号\n  useTabs: false, // 是否使用tab代替空格\n  singleQuote: true, // 是否使用单引号\n  jsxSingleQuote: false, // jsx是否使用单引号\n  jsxBracketSameLinte: true, // 在多行JSX元素最后一行的末尾添加 > 而使 > 单独一行（不适用于自闭和元素）\n  trailingComma: 'none', // 在任何可能的多行中输入尾逗号\n  bracketSpacing: true, // 在对象字面量声明所使用的的花括号后（{）和前（}）输出空格\n  jsxBracketSameLine: false, // 看官网\n  arrowParens: 'avoid', // 为单行箭头函数的参数添加圆括号,\n  /**\n   * endOfLine: \"<auto|lf|crlf|cr>\"\n   * \"auto\" - 维护现有的行结尾（通过查看第一行之后使用的内容来标准化一个文件中的混合值）\n   * \"lf\"- Line Feed only（\\n），在Linux和macOS以及git repos内部很常见\n   * \"crlf\"- 回车符+换行符（\\r\\n），在Windows上很常见\n   * \"cr\"- 仅限回车符（\\r），很少使用\n   */\n  endOfLine: 'auto' // 文件行结尾风格\n}\n```\n\n### Eslint\n\n> 配置文档地址：https://cn.eslint.org/docs/rules/\n\n1. 在项目跟目录下添加`.eslintrc.json`\n\n```js\nmodule.exports = {\n  parser: 'babel-eslint',\n  env: {\n    browser: true,\n    node: true,\n    commonjs: true,\n    amd: true,\n    es6: true,\n    mocha: true\n  },\n  extends: ['eslint:recommended', 'plugin:react/recommended'], // 使用Eslint官方规则推荐\n  globals: {\n    Atomics: 'readonly',\n    SharedArrayBuffer: 'readonly'\n  },\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module'\n  },\n  rules: {\n    semi: 0, // 要求或禁止使用分号代替 ASI\n    'no-undef': 2, // 禁用未声明的变量，除非它们在 /*global */ 注释中被提到\n    'jsx-quotes': 0, // 强制在 JSX 属性中一致地使用双引号或单引号\n    quotes: [0, 'single', 'double'], // 强制使用一致的反勾号、双引号或单引号\n    'no-multi-spaces': 2, // 禁止使用多个空格\n    'comma-spacing': [2, { before: false, after: true }], // 强制在逗号前后使用一致的空格\n    'comma-dangle': 2, // 要求或禁止末尾逗号\n    'valid-jsdoc': 0, // 强制使用有效的 JSDoc 注释\n    indent: ['error', 2], // 强制使用一致的缩进\n    'arrow-parens': 0, // 要求箭头函数的参数使用圆括号\n    'object-curly-spacing': 0, // 强制在大括号中使用一致的空格\n    'spaced-comment': [2, 'always'], // 强制在注释中 // 或 /* 使用一致的空格\n    'one-var-declaration-per-line': 2, // 要求或禁止在变量声明周围换行\n    'default-case': 2, // 要求 switch 语句中有 default 分支\n    'no-new-wrappers': 2, // 禁止对 String，Number 和 Boolean 使用 new 操作符\n    eqeqeq: 1, // 要求使用 === 和 !==\n    'no-alert': 1, // 禁用 alert、confirm 和 prompt\n    'no-console': 1, // 禁用 alert、confirm 和 prompt\n    'no-eval': 1, // 禁用 eval()\n    'no-implied-eval': 1, // 禁止使用类似 eval() 的方法\n    'eol-last': 2, // 要求或禁止文件末尾存在空行\n    'no-multiple-empty-lines': 2, // 禁止出现多行空行\n    'no-var': 2, // 要求使用 let 或 const 而不是 var\n    'prefer-const': 2 // 要求使用 const 声明那些声明后不再被修改的变量\n  }\n}\n```\n","slug":"代码规范","published":1,"updated":"2019-07-23T08:58:17.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwdf0021ygf023mftcou","content":"<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h4 id=\"代码规范优点\"><a href=\"#代码规范优点\" class=\"headerlink\" title=\"代码规范优点\"></a>代码规范优点</h4><blockquote>\n<p>由于项目开发多成员协作问题，程序员开发习惯不同，项目的不断迭代会导致代码质量问题、代码维护问题、可读性问题的出现，所以好的校验工具可以确保一个项目遵循代码规范、避免一些常见的隐患出现</p>\n</blockquote>\n<h3 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h3><blockquote>\n<p>配置文档地址: <a href=\"https://prettier.io/docs/en/options.html\" target=\"_blank\" rel=\"noopener\">https://prettier.io/docs/en/options.html</a></p>\n</blockquote>\n<ol>\n<li>在项目根目录下添加<code>prettier.config.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  printWidth: <span class=\"number\">80</span>, <span class=\"comment\">// 一行最大多少字符</span></span><br><span class=\"line\">  tabWidth: <span class=\"number\">2</span>, <span class=\"comment\">// tab占用的字符数</span></span><br><span class=\"line\">  semi: <span class=\"literal\">false</span>, <span class=\"comment\">// 在语句末尾添加分号</span></span><br><span class=\"line\">  useTabs: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否使用tab代替空格</span></span><br><span class=\"line\">  singleQuote: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否使用单引号</span></span><br><span class=\"line\">  jsxSingleQuote: <span class=\"literal\">false</span>, <span class=\"comment\">// jsx是否使用单引号</span></span><br><span class=\"line\">  jsxBracketSameLinte: <span class=\"literal\">true</span>, <span class=\"comment\">// 在多行JSX元素最后一行的末尾添加 &gt; 而使 &gt; 单独一行（不适用于自闭和元素）</span></span><br><span class=\"line\">  trailingComma: <span class=\"string\">'none'</span>, <span class=\"comment\">// 在任何可能的多行中输入尾逗号</span></span><br><span class=\"line\">  bracketSpacing: <span class=\"literal\">true</span>, <span class=\"comment\">// 在对象字面量声明所使用的的花括号后（&#123;）和前（&#125;）输出空格</span></span><br><span class=\"line\">  jsxBracketSameLine: <span class=\"literal\">false</span>, <span class=\"comment\">// 看官网</span></span><br><span class=\"line\">  arrowParens: <span class=\"string\">'avoid'</span>, <span class=\"comment\">// 为单行箭头函数的参数添加圆括号,</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * endOfLine: \"&lt;auto|lf|crlf|cr&gt;\"</span></span><br><span class=\"line\"><span class=\"comment\">   * \"auto\" - 维护现有的行结尾（通过查看第一行之后使用的内容来标准化一个文件中的混合值）</span></span><br><span class=\"line\"><span class=\"comment\">   * \"lf\"- Line Feed only（\\n），在Linux和macOS以及git repos内部很常见</span></span><br><span class=\"line\"><span class=\"comment\">   * \"crlf\"- 回车符+换行符（\\r\\n），在Windows上很常见</span></span><br><span class=\"line\"><span class=\"comment\">   * \"cr\"- 仅限回车符（\\r），很少使用</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  endOfLine: <span class=\"string\">'auto'</span> <span class=\"comment\">// 文件行结尾风格</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h3><blockquote>\n<p>配置文档地址：<a href=\"https://cn.eslint.org/docs/rules/\" target=\"_blank\" rel=\"noopener\">https://cn.eslint.org/docs/rules/</a></p>\n</blockquote>\n<ol>\n<li>在项目跟目录下添加<code>.eslintrc.json</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  parser: <span class=\"string\">'babel-eslint'</span>,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    commonjs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    amd: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    es6: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    mocha: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  extends: [<span class=\"string\">'eslint:recommended'</span>, <span class=\"string\">'plugin:react/recommended'</span>], <span class=\"comment\">// 使用Eslint官方规则推荐</span></span><br><span class=\"line\">  globals: &#123;</span><br><span class=\"line\">    Atomics: <span class=\"string\">'readonly'</span>,</span><br><span class=\"line\">    SharedArrayBuffer: <span class=\"string\">'readonly'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    ecmaVersion: <span class=\"number\">2018</span>,</span><br><span class=\"line\">    sourceType: <span class=\"string\">'module'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    semi: <span class=\"number\">0</span>, <span class=\"comment\">// 要求或禁止使用分号代替 ASI</span></span><br><span class=\"line\">    <span class=\"string\">'no-undef'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class=\"line\">    <span class=\"string\">'jsx-quotes'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 强制在 JSX 属性中一致地使用双引号或单引号</span></span><br><span class=\"line\">    quotes: [<span class=\"number\">0</span>, <span class=\"string\">'single'</span>, <span class=\"string\">'double'</span>], <span class=\"comment\">// 强制使用一致的反勾号、双引号或单引号</span></span><br><span class=\"line\">    <span class=\"string\">'no-multi-spaces'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止使用多个空格</span></span><br><span class=\"line\">    <span class=\"string\">'comma-spacing'</span>: [<span class=\"number\">2</span>, &#123; <span class=\"attr\">before</span>: <span class=\"literal\">false</span>, <span class=\"attr\">after</span>: <span class=\"literal\">true</span> &#125;], <span class=\"comment\">// 强制在逗号前后使用一致的空格</span></span><br><span class=\"line\">    <span class=\"string\">'comma-dangle'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求或禁止末尾逗号</span></span><br><span class=\"line\">    <span class=\"string\">'valid-jsdoc'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 强制使用有效的 JSDoc 注释</span></span><br><span class=\"line\">    indent: [<span class=\"string\">'error'</span>, <span class=\"number\">2</span>], <span class=\"comment\">// 强制使用一致的缩进</span></span><br><span class=\"line\">    <span class=\"string\">'arrow-parens'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 要求箭头函数的参数使用圆括号</span></span><br><span class=\"line\">    <span class=\"string\">'object-curly-spacing'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 强制在大括号中使用一致的空格</span></span><br><span class=\"line\">    <span class=\"string\">'spaced-comment'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>], <span class=\"comment\">// 强制在注释中 // 或 /* 使用一致的空格</span></span><br><span class=\"line\">    <span class=\"string\">'one-var-declaration-per-line'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求或禁止在变量声明周围换行</span></span><br><span class=\"line\">    <span class=\"string\">'default-case'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求 switch 语句中有 default 分支</span></span><br><span class=\"line\">    <span class=\"string\">'no-new-wrappers'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></span><br><span class=\"line\">    eqeqeq: <span class=\"number\">1</span>, <span class=\"comment\">// 要求使用 === 和 !==</span></span><br><span class=\"line\">    <span class=\"string\">'no-alert'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁用 alert、confirm 和 prompt</span></span><br><span class=\"line\">    <span class=\"string\">'no-console'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁用 alert、confirm 和 prompt</span></span><br><span class=\"line\">    <span class=\"string\">'no-eval'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁用 eval()</span></span><br><span class=\"line\">    <span class=\"string\">'no-implied-eval'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁止使用类似 eval() 的方法</span></span><br><span class=\"line\">    <span class=\"string\">'eol-last'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求或禁止文件末尾存在空行</span></span><br><span class=\"line\">    <span class=\"string\">'no-multiple-empty-lines'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止出现多行空行</span></span><br><span class=\"line\">    <span class=\"string\">'no-var'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求使用 let 或 const 而不是 var</span></span><br><span class=\"line\">    <span class=\"string\">'prefer-const'</span>: <span class=\"number\">2</span> <span class=\"comment\">// 要求使用 const 声明那些声明后不再被修改的变量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"代码规范\"></a>代码规范</h2><h4 id=\"代码规范优点\"><a href=\"#代码规范优点\" class=\"headerlink\" title=\"代码规范优点\"></a>代码规范优点</h4><blockquote>\n<p>由于项目开发多成员协作问题，程序员开发习惯不同，项目的不断迭代会导致代码质量问题、代码维护问题、可读性问题的出现，所以好的校验工具可以确保一个项目遵循代码规范、避免一些常见的隐患出现</p>\n</blockquote>\n<h3 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h3><blockquote>\n<p>配置文档地址: <a href=\"https://prettier.io/docs/en/options.html\" target=\"_blank\" rel=\"noopener\">https://prettier.io/docs/en/options.html</a></p>\n</blockquote>\n<ol>\n<li>在项目根目录下添加<code>prettier.config.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  printWidth: <span class=\"number\">80</span>, <span class=\"comment\">// 一行最大多少字符</span></span><br><span class=\"line\">  tabWidth: <span class=\"number\">2</span>, <span class=\"comment\">// tab占用的字符数</span></span><br><span class=\"line\">  semi: <span class=\"literal\">false</span>, <span class=\"comment\">// 在语句末尾添加分号</span></span><br><span class=\"line\">  useTabs: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否使用tab代替空格</span></span><br><span class=\"line\">  singleQuote: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否使用单引号</span></span><br><span class=\"line\">  jsxSingleQuote: <span class=\"literal\">false</span>, <span class=\"comment\">// jsx是否使用单引号</span></span><br><span class=\"line\">  jsxBracketSameLinte: <span class=\"literal\">true</span>, <span class=\"comment\">// 在多行JSX元素最后一行的末尾添加 &gt; 而使 &gt; 单独一行（不适用于自闭和元素）</span></span><br><span class=\"line\">  trailingComma: <span class=\"string\">'none'</span>, <span class=\"comment\">// 在任何可能的多行中输入尾逗号</span></span><br><span class=\"line\">  bracketSpacing: <span class=\"literal\">true</span>, <span class=\"comment\">// 在对象字面量声明所使用的的花括号后（&#123;）和前（&#125;）输出空格</span></span><br><span class=\"line\">  jsxBracketSameLine: <span class=\"literal\">false</span>, <span class=\"comment\">// 看官网</span></span><br><span class=\"line\">  arrowParens: <span class=\"string\">'avoid'</span>, <span class=\"comment\">// 为单行箭头函数的参数添加圆括号,</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * endOfLine: \"&lt;auto|lf|crlf|cr&gt;\"</span></span><br><span class=\"line\"><span class=\"comment\">   * \"auto\" - 维护现有的行结尾（通过查看第一行之后使用的内容来标准化一个文件中的混合值）</span></span><br><span class=\"line\"><span class=\"comment\">   * \"lf\"- Line Feed only（\\n），在Linux和macOS以及git repos内部很常见</span></span><br><span class=\"line\"><span class=\"comment\">   * \"crlf\"- 回车符+换行符（\\r\\n），在Windows上很常见</span></span><br><span class=\"line\"><span class=\"comment\">   * \"cr\"- 仅限回车符（\\r），很少使用</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  endOfLine: <span class=\"string\">'auto'</span> <span class=\"comment\">// 文件行结尾风格</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h3><blockquote>\n<p>配置文档地址：<a href=\"https://cn.eslint.org/docs/rules/\" target=\"_blank\" rel=\"noopener\">https://cn.eslint.org/docs/rules/</a></p>\n</blockquote>\n<ol>\n<li>在项目跟目录下添加<code>.eslintrc.json</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  parser: <span class=\"string\">'babel-eslint'</span>,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    commonjs: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    amd: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    es6: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    mocha: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  extends: [<span class=\"string\">'eslint:recommended'</span>, <span class=\"string\">'plugin:react/recommended'</span>], <span class=\"comment\">// 使用Eslint官方规则推荐</span></span><br><span class=\"line\">  globals: &#123;</span><br><span class=\"line\">    Atomics: <span class=\"string\">'readonly'</span>,</span><br><span class=\"line\">    SharedArrayBuffer: <span class=\"string\">'readonly'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    ecmaVersion: <span class=\"number\">2018</span>,</span><br><span class=\"line\">    sourceType: <span class=\"string\">'module'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    semi: <span class=\"number\">0</span>, <span class=\"comment\">// 要求或禁止使用分号代替 ASI</span></span><br><span class=\"line\">    <span class=\"string\">'no-undef'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class=\"line\">    <span class=\"string\">'jsx-quotes'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 强制在 JSX 属性中一致地使用双引号或单引号</span></span><br><span class=\"line\">    quotes: [<span class=\"number\">0</span>, <span class=\"string\">'single'</span>, <span class=\"string\">'double'</span>], <span class=\"comment\">// 强制使用一致的反勾号、双引号或单引号</span></span><br><span class=\"line\">    <span class=\"string\">'no-multi-spaces'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止使用多个空格</span></span><br><span class=\"line\">    <span class=\"string\">'comma-spacing'</span>: [<span class=\"number\">2</span>, &#123; <span class=\"attr\">before</span>: <span class=\"literal\">false</span>, <span class=\"attr\">after</span>: <span class=\"literal\">true</span> &#125;], <span class=\"comment\">// 强制在逗号前后使用一致的空格</span></span><br><span class=\"line\">    <span class=\"string\">'comma-dangle'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求或禁止末尾逗号</span></span><br><span class=\"line\">    <span class=\"string\">'valid-jsdoc'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 强制使用有效的 JSDoc 注释</span></span><br><span class=\"line\">    indent: [<span class=\"string\">'error'</span>, <span class=\"number\">2</span>], <span class=\"comment\">// 强制使用一致的缩进</span></span><br><span class=\"line\">    <span class=\"string\">'arrow-parens'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 要求箭头函数的参数使用圆括号</span></span><br><span class=\"line\">    <span class=\"string\">'object-curly-spacing'</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 强制在大括号中使用一致的空格</span></span><br><span class=\"line\">    <span class=\"string\">'spaced-comment'</span>: [<span class=\"number\">2</span>, <span class=\"string\">'always'</span>], <span class=\"comment\">// 强制在注释中 // 或 /* 使用一致的空格</span></span><br><span class=\"line\">    <span class=\"string\">'one-var-declaration-per-line'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求或禁止在变量声明周围换行</span></span><br><span class=\"line\">    <span class=\"string\">'default-case'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求 switch 语句中有 default 分支</span></span><br><span class=\"line\">    <span class=\"string\">'no-new-wrappers'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></span><br><span class=\"line\">    eqeqeq: <span class=\"number\">1</span>, <span class=\"comment\">// 要求使用 === 和 !==</span></span><br><span class=\"line\">    <span class=\"string\">'no-alert'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁用 alert、confirm 和 prompt</span></span><br><span class=\"line\">    <span class=\"string\">'no-console'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁用 alert、confirm 和 prompt</span></span><br><span class=\"line\">    <span class=\"string\">'no-eval'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁用 eval()</span></span><br><span class=\"line\">    <span class=\"string\">'no-implied-eval'</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 禁止使用类似 eval() 的方法</span></span><br><span class=\"line\">    <span class=\"string\">'eol-last'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求或禁止文件末尾存在空行</span></span><br><span class=\"line\">    <span class=\"string\">'no-multiple-empty-lines'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 禁止出现多行空行</span></span><br><span class=\"line\">    <span class=\"string\">'no-var'</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 要求使用 let 或 const 而不是 var</span></span><br><span class=\"line\">    <span class=\"string\">'prefer-const'</span>: <span class=\"number\">2</span> <span class=\"comment\">// 要求使用 const 声明那些声明后不再被修改的变量</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"hasOwnProperty原型链方法","date":"2018-10-17T15:17:02.000Z","_content":"\n```js\n/*\n *  Object的hasOwnProperty()方法返回一个布尔值\n *  判断对象是否包含特定的自身（非继承）属性。\n *\n *  在看开源项目的过程中，经常会看到类似如下的源码\n *  for...in循环对象的所有枚举属性\n *  然后再使用hasOwnProperty()方法来忽略继承属性。\n */\nvar foo = {\n  hasOwnProperty: function() {\n    return false\n  },\n  bar: 'Here be dragons'\n}\n\nfoo.hasOwnProperty('bar') // 始终返回 false\n\n// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法\n// 使用另一个对象的`hasOwnProperty` 并且call\n;({}.hasOwnProperty.call(foo, 'bar')) // true\n\n// 也可以使用 Object 原型上的 hasOwnProperty 属性\nObject.prototype.hasOwnProperty.call(foo, 'bar') // true\n```\n","source":"_posts/hasOwnProperty原型链方法.md","raw":"---\ntitle: hasOwnProperty原型链方法\ndate: 2018-10-17 23:17:02\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n```js\n/*\n *  Object的hasOwnProperty()方法返回一个布尔值\n *  判断对象是否包含特定的自身（非继承）属性。\n *\n *  在看开源项目的过程中，经常会看到类似如下的源码\n *  for...in循环对象的所有枚举属性\n *  然后再使用hasOwnProperty()方法来忽略继承属性。\n */\nvar foo = {\n  hasOwnProperty: function() {\n    return false\n  },\n  bar: 'Here be dragons'\n}\n\nfoo.hasOwnProperty('bar') // 始终返回 false\n\n// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法\n// 使用另一个对象的`hasOwnProperty` 并且call\n;({}.hasOwnProperty.call(foo, 'bar')) // true\n\n// 也可以使用 Object 原型上的 hasOwnProperty 属性\nObject.prototype.hasOwnProperty.call(foo, 'bar') // true\n```\n","slug":"hasOwnProperty原型链方法","published":1,"updated":"2019-07-23T08:58:17.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwdm0024ygf0banu2dns","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  Object的hasOwnProperty()方法返回一个布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> *  判断对象是否包含特定的自身（非继承）属性。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  在看开源项目的过程中，经常会看到类似如下的源码</span></span><br><span class=\"line\"><span class=\"comment\"> *  for...in循环对象的所有枚举属性</span></span><br><span class=\"line\"><span class=\"comment\"> *  然后再使用hasOwnProperty()方法来忽略继承属性。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  hasOwnProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bar: <span class=\"string\">'Here be dragons'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'bar'</span>) <span class=\"comment\">// 始终返回 false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用另一个对象的`hasOwnProperty` 并且call</span></span><br><span class=\"line\">;(&#123;&#125;.hasOwnProperty.call(foo, <span class=\"string\">'bar'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用 Object 原型上的 hasOwnProperty 属性</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(foo, <span class=\"string\">'bar'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  Object的hasOwnProperty()方法返回一个布尔值</span></span><br><span class=\"line\"><span class=\"comment\"> *  判断对象是否包含特定的自身（非继承）属性。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  在看开源项目的过程中，经常会看到类似如下的源码</span></span><br><span class=\"line\"><span class=\"comment\"> *  for...in循环对象的所有枚举属性</span></span><br><span class=\"line\"><span class=\"comment\"> *  然后再使用hasOwnProperty()方法来忽略继承属性。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  hasOwnProperty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bar: <span class=\"string\">'Here be dragons'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.hasOwnProperty(<span class=\"string\">'bar'</span>) <span class=\"comment\">// 始终返回 false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法</span></span><br><span class=\"line\"><span class=\"comment\">// 使用另一个对象的`hasOwnProperty` 并且call</span></span><br><span class=\"line\">;(&#123;&#125;.hasOwnProperty.call(foo, <span class=\"string\">'bar'</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用 Object 原型上的 hasOwnProperty 属性</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(foo, <span class=\"string\">'bar'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"判断函数是否是Promise函数","date":"2018-09-28T16:00:00.000Z","_content":"\n```javascript\n// 判断函数是否是Promise函数\nfunction isPromise(obj) {\n  return (\n    !!obj &&\n    (typeof obj === 'object' || typeof obj === 'function') &&\n    typeof obj.then === 'function'\n  )\n}\n```\n\n<!--more-->\n","source":"_posts/判断函数是否是Promise函数.md","raw":"---\ntitle: 判断函数是否是Promise函数\ndate: 2018-09-29\ntags:\n  - JavaScript\n  - Promise\ncategories:\n  - Code\n---\n\n```javascript\n// 判断函数是否是Promise函数\nfunction isPromise(obj) {\n  return (\n    !!obj &&\n    (typeof obj === 'object' || typeof obj === 'function') &&\n    typeof obj.then === 'function'\n  )\n}\n```\n\n<!--more-->\n","slug":"判断函数是否是Promise函数","published":1,"updated":"2019-07-23T08:58:17.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwdo0027ygf08vlzcjtp","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断函数是否是Promise函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!obj &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> obj.then === <span class=\"string\">'function'</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断函数是否是Promise函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPromise</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    !!obj &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> obj.then === <span class=\"string\">'function'</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":""},{"title":"总结笔记20181017","date":"2018-10-17T14:44:47.000Z","_content":"\n- node 连接数据库时需要设置时区，不然查出来的时间格式不是东八区\n- no-referrer-when-downgrade 是 chrome 自动加的，表示从 https 降级到 http 时不发送 reffer\n- Buffer.byteLength 获取字符串的字节长度\n- position: sticky\n- 设置父元素 overflow:hidden 解决浮动后没有高度\n\n<!--more-->\n\n- ```js\n      \t// 聚合\n      \tarray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n      \tinitialValue 初始值\n      \ttotal\t必需。初始值, 或者计算结束后的返回值。\n      \tcurrentValue\t必需。当前元素\n      \tcurrentIndex\t可选。当前元素的索引\n      \tarr\t可选。当前元素所属的数组对象。\n  ```\n\n- []==![] true\n  在相等运算符中，如果运算符两边的值有一个是布尔类型，则会把 true 转换成 1，false 则转换为 0\n  相等运算符如果有一边是数字，而另一边是对象，则会把对象转换成数字。而空的数组对象转换成数字是 0\n  ![]会转化为 0, 而空的数组对象[]转换成数字是 0 所以为 true\n  []===![] 全等的话，为 false\n\n- 函数声明、函数表达式\n\n      \t```js\n      \tconsole.log(f1) // function f1() {}\n      \tfunction f1() {} // 函数声明\n\n      \tconsole.log(f2) // undefined\n      \tvar f2 = function() {} // 函数表达式\n      \t```\n\n- node 最新版本 Node.js 10.11.0 2018-09-19 6.8.275.32 6.4.1 64\n- 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n- 因为作用域链，外部不能访问内部的变量和方法，这时我们就需要通过闭包，返回内部的方法和变量给外部，从而就形成了一个闭包。\n\n- 弹簧振动效果 css，类似于苹果手机打开图片 Transition: 0.6s cubic-bezir(.29,1.1,.29,1.1)\n- github 徽章 https://img.shields.io/discourse/https/meta.discourse.org/topics.svg\n","source":"_posts/总结笔记20181017.md","raw":"---\ntitle: 总结笔记20181017\ndate: 2018-10-17 22:44:47\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n- node 连接数据库时需要设置时区，不然查出来的时间格式不是东八区\n- no-referrer-when-downgrade 是 chrome 自动加的，表示从 https 降级到 http 时不发送 reffer\n- Buffer.byteLength 获取字符串的字节长度\n- position: sticky\n- 设置父元素 overflow:hidden 解决浮动后没有高度\n\n<!--more-->\n\n- ```js\n      \t// 聚合\n      \tarray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n      \tinitialValue 初始值\n      \ttotal\t必需。初始值, 或者计算结束后的返回值。\n      \tcurrentValue\t必需。当前元素\n      \tcurrentIndex\t可选。当前元素的索引\n      \tarr\t可选。当前元素所属的数组对象。\n  ```\n\n- []==![] true\n  在相等运算符中，如果运算符两边的值有一个是布尔类型，则会把 true 转换成 1，false 则转换为 0\n  相等运算符如果有一边是数字，而另一边是对象，则会把对象转换成数字。而空的数组对象转换成数字是 0\n  ![]会转化为 0, 而空的数组对象[]转换成数字是 0 所以为 true\n  []===![] 全等的话，为 false\n\n- 函数声明、函数表达式\n\n      \t```js\n      \tconsole.log(f1) // function f1() {}\n      \tfunction f1() {} // 函数声明\n\n      \tconsole.log(f2) // undefined\n      \tvar f2 = function() {} // 函数表达式\n      \t```\n\n- node 最新版本 Node.js 10.11.0 2018-09-19 6.8.275.32 6.4.1 64\n- 使用 Array.every 和 Array.some 来处理全部/部分满足条件\n- 因为作用域链，外部不能访问内部的变量和方法，这时我们就需要通过闭包，返回内部的方法和变量给外部，从而就形成了一个闭包。\n\n- 弹簧振动效果 css，类似于苹果手机打开图片 Transition: 0.6s cubic-bezir(.29,1.1,.29,1.1)\n- github 徽章 https://img.shields.io/discourse/https/meta.discourse.org/topics.svg\n","slug":"总结笔记20181017","published":1,"updated":"2019-07-23T08:58:17.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwdr002aygf02mk57tnj","content":"<ul>\n<li>node 连接数据库时需要设置时区，不然查出来的时间格式不是东八区</li>\n<li>no-referrer-when-downgrade 是 chrome 自动加的，表示从 https 降级到 http 时不发送 reffer</li>\n<li>Buffer.byteLength 获取字符串的字节长度</li>\n<li>position: sticky</li>\n<li>设置父元素 overflow:hidden 解决浮动后没有高度</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 聚合</span></span><br><span class=\"line\">array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total, currentValue, currentIndex, arr</span>), <span class=\"title\">initialValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">initialValue</span> 初始值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">total</span>\t必需。初始值, 或者计算结束后的返回值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentValue</span>\t必需。当前元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentIndex</span>\t可选。当前元素的索引</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">arr</span>\t可选。当前元素所属的数组对象。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>[]==![] true<br>在相等运算符中，如果运算符两边的值有一个是布尔类型，则会把 true 转换成 1，false 则转换为 0<br>相等运算符如果有一边是数字，而另一边是对象，则会把对象转换成数字。而空的数组对象转换成数字是 0<br>![]会转化为 0, 而空的数组对象[]转换成数字是 0 所以为 true<br>[]===![] 全等的话，为 false</p>\n</li>\n<li><p>函数声明、函数表达式</p>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(f1) <span class=\"comment\">// function f1() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f2) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 函数表达式</span></span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>node 最新版本 Node.js 10.11.0 2018-09-19 6.8.275.32 6.4.1 64</p>\n</li>\n<li>使用 Array.every 和 Array.some 来处理全部/部分满足条件</li>\n<li><p>因为作用域链，外部不能访问内部的变量和方法，这时我们就需要通过闭包，返回内部的方法和变量给外部，从而就形成了一个闭包。</p>\n</li>\n<li><p>弹簧振动效果 css，类似于苹果手机打开图片 Transition: 0.6s cubic-bezir(.29,1.1,.29,1.1)</p>\n</li>\n<li>github 徽章 <a href=\"https://img.shields.io/discourse/https/meta.discourse.org/topics.svg\" target=\"_blank\" rel=\"noopener\">https://img.shields.io/discourse/https/meta.discourse.org/topics.svg</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>node 连接数据库时需要设置时区，不然查出来的时间格式不是东八区</li>\n<li>no-referrer-when-downgrade 是 chrome 自动加的，表示从 https 降级到 http 时不发送 reffer</li>\n<li>Buffer.byteLength 获取字符串的字节长度</li>\n<li>position: sticky</li>\n<li>设置父元素 overflow:hidden 解决浮动后没有高度</li>\n</ul>","more":"<ul>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 聚合</span></span><br><span class=\"line\">array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total, currentValue, currentIndex, arr</span>), <span class=\"title\">initialValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">initialValue</span> 初始值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">total</span>\t必需。初始值, 或者计算结束后的返回值。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentValue</span>\t必需。当前元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">currentIndex</span>\t可选。当前元素的索引</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">arr</span>\t可选。当前元素所属的数组对象。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>[]==![] true<br>在相等运算符中，如果运算符两边的值有一个是布尔类型，则会把 true 转换成 1，false 则转换为 0<br>相等运算符如果有一边是数字，而另一边是对象，则会把对象转换成数字。而空的数组对象转换成数字是 0<br>![]会转化为 0, 而空的数组对象[]转换成数字是 0 所以为 true<br>[]===![] 全等的话，为 false</p>\n</li>\n<li><p>函数声明、函数表达式</p>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(f1) <span class=\"comment\">// function f1() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f2) <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 函数表达式</span></span><br></pre></td></tr></table></figure>\n</code></pre></li>\n<li><p>node 最新版本 Node.js 10.11.0 2018-09-19 6.8.275.32 6.4.1 64</p>\n</li>\n<li>使用 Array.every 和 Array.some 来处理全部/部分满足条件</li>\n<li><p>因为作用域链，外部不能访问内部的变量和方法，这时我们就需要通过闭包，返回内部的方法和变量给外部，从而就形成了一个闭包。</p>\n</li>\n<li><p>弹簧振动效果 css，类似于苹果手机打开图片 Transition: 0.6s cubic-bezir(.29,1.1,.29,1.1)</p>\n</li>\n<li>github 徽章 <a href=\"https://img.shields.io/discourse/https/meta.discourse.org/topics.svg\" target=\"_blank\" rel=\"noopener\">https://img.shields.io/discourse/https/meta.discourse.org/topics.svg</a></li>\n</ul>"},{"title":"slice、splice、split异同","date":"2017-10-31T16:00:00.000Z","_content":"\n## arguments 参数\n\n- 生成\n  JavaScript 在创建函数时，会自动生成一个 Arguments 对象实例 arguments，可以用数组下标的方式\"[]\"引用 arguments 的元素。arguments.length 为函数实参个数，arguments.callee 引用函数自身。\n- 注意：\n  在严格模式下，第 5 版 ECMAScript (ES5) 禁止使用 arguments.callee()。当一个函数必须调用自身的时候, 避免使用 arguments.callee(), 通过要么给函数表达式一个名字,要么使用一个函数声明.\n\n- 特性：\n  arguments 对象和 Function 是分不开的。因为 arguments 这个对象不能显式创建，arguments 对象只有函数开始时才可用。\n\n- 使用方法：\n  虽然 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同\n\n## Array.prototype.slice.apply(arguments)用意\n\n直接调用 arguments.slice()将返回一个\"Object doesn\"t support this property or method\"错误，因为 arguments 不是一个真正的数组。调用 Array.prototype.slice.apply(arguments)的意义就在于它能将函数的参数对象转化为一个真正的数组。\n\n## Array.prototype.slice.apply(arguments， [1])用意\n\n首先这段代码的目的是为了拿到参数里除第一个以外后面的所有参数。\n\n现在 arguments 不是数组，所以不能直接调用 slice 方法，在 JavaScript 中借用其它对象的方法可以通过 apply 或者 call，以 call 为例，上述例子应该改写为：\n\n```js\n// 需要借用的方法slice在Array.prototype 上，然后call接受两个参数\n// 第一个是需要借用方法的对象\n// 第二个是传进方法的参数，也就是1\nArray.prototype.slice.call(arguments, 1)\n// 也可以写成\n[].slice.call(arguments, 1)\n```\n\n## apply 方法与 call 方法\n\napply 方法与 call 方法是一样的，区别只是传参的形式，需要把方法参数按数组形式传进：\n\n```js\nArray.prototype.apply(arguments, [1]) // 数组传入\nArray.prototype.apply(arguments, 1)\n```\n","source":"_posts/slice、splice、split异同.md","raw":"---\ntitle: slice、splice、split异同\ndate: 2017-11-01\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n## arguments 参数\n\n- 生成\n  JavaScript 在创建函数时，会自动生成一个 Arguments 对象实例 arguments，可以用数组下标的方式\"[]\"引用 arguments 的元素。arguments.length 为函数实参个数，arguments.callee 引用函数自身。\n- 注意：\n  在严格模式下，第 5 版 ECMAScript (ES5) 禁止使用 arguments.callee()。当一个函数必须调用自身的时候, 避免使用 arguments.callee(), 通过要么给函数表达式一个名字,要么使用一个函数声明.\n\n- 特性：\n  arguments 对象和 Function 是分不开的。因为 arguments 这个对象不能显式创建，arguments 对象只有函数开始时才可用。\n\n- 使用方法：\n  虽然 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同\n\n## Array.prototype.slice.apply(arguments)用意\n\n直接调用 arguments.slice()将返回一个\"Object doesn\"t support this property or method\"错误，因为 arguments 不是一个真正的数组。调用 Array.prototype.slice.apply(arguments)的意义就在于它能将函数的参数对象转化为一个真正的数组。\n\n## Array.prototype.slice.apply(arguments， [1])用意\n\n首先这段代码的目的是为了拿到参数里除第一个以外后面的所有参数。\n\n现在 arguments 不是数组，所以不能直接调用 slice 方法，在 JavaScript 中借用其它对象的方法可以通过 apply 或者 call，以 call 为例，上述例子应该改写为：\n\n```js\n// 需要借用的方法slice在Array.prototype 上，然后call接受两个参数\n// 第一个是需要借用方法的对象\n// 第二个是传进方法的参数，也就是1\nArray.prototype.slice.call(arguments, 1)\n// 也可以写成\n[].slice.call(arguments, 1)\n```\n\n## apply 方法与 call 方法\n\napply 方法与 call 方法是一样的，区别只是传参的形式，需要把方法参数按数组形式传进：\n\n```js\nArray.prototype.apply(arguments, [1]) // 数组传入\nArray.prototype.apply(arguments, 1)\n```\n","slug":"slice、splice、split异同","published":1,"updated":"2019-07-23T08:58:17.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwdt002eygf02wgooy7q","content":"<h2 id=\"arguments-参数\"><a href=\"#arguments-参数\" class=\"headerlink\" title=\"arguments 参数\"></a>arguments 参数</h2><ul>\n<li>生成<br>JavaScript 在创建函数时，会自动生成一个 Arguments 对象实例 arguments，可以用数组下标的方式”[]”引用 arguments 的元素。arguments.length 为函数实参个数，arguments.callee 引用函数自身。</li>\n<li><p>注意：<br>在严格模式下，第 5 版 ECMAScript (ES5) 禁止使用 arguments.callee()。当一个函数必须调用自身的时候, 避免使用 arguments.callee(), 通过要么给函数表达式一个名字,要么使用一个函数声明.</p>\n</li>\n<li><p>特性：<br>arguments 对象和 Function 是分不开的。因为 arguments 这个对象不能显式创建，arguments 对象只有函数开始时才可用。</p>\n</li>\n<li><p>使用方法：<br>虽然 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同</p>\n</li>\n</ul>\n<h2 id=\"Array-prototype-slice-apply-arguments-用意\"><a href=\"#Array-prototype-slice-apply-arguments-用意\" class=\"headerlink\" title=\"Array.prototype.slice.apply(arguments)用意\"></a>Array.prototype.slice.apply(arguments)用意</h2><p>直接调用 arguments.slice()将返回一个”Object doesn”t support this property or method”错误，因为 arguments 不是一个真正的数组。调用 Array.prototype.slice.apply(arguments)的意义就在于它能将函数的参数对象转化为一个真正的数组。</p>\n<h2 id=\"Array-prototype-slice-apply-arguments，-1-用意\"><a href=\"#Array-prototype-slice-apply-arguments，-1-用意\" class=\"headerlink\" title=\"Array.prototype.slice.apply(arguments， [1])用意\"></a>Array.prototype.slice.apply(arguments， [1])用意</h2><p>首先这段代码的目的是为了拿到参数里除第一个以外后面的所有参数。</p>\n<p>现在 arguments 不是数组，所以不能直接调用 slice 方法，在 JavaScript 中借用其它对象的方法可以通过 apply 或者 call，以 call 为例，上述例子应该改写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要借用的方法slice在Array.prototype 上，然后call接受两个参数</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个是需要借用方法的对象</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个是传进方法的参数，也就是1</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 也可以写成</span></span><br><span class=\"line\">[].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"apply-方法与-call-方法\"><a href=\"#apply-方法与-call-方法\" class=\"headerlink\" title=\"apply 方法与 call 方法\"></a>apply 方法与 call 方法</h2><p>apply 方法与 call 方法是一样的，区别只是传参的形式，需要把方法参数按数组形式传进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.apply(<span class=\"built_in\">arguments</span>, [<span class=\"number\">1</span>]) <span class=\"comment\">// 数组传入</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.apply(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"arguments-参数\"><a href=\"#arguments-参数\" class=\"headerlink\" title=\"arguments 参数\"></a>arguments 参数</h2><ul>\n<li>生成<br>JavaScript 在创建函数时，会自动生成一个 Arguments 对象实例 arguments，可以用数组下标的方式”[]”引用 arguments 的元素。arguments.length 为函数实参个数，arguments.callee 引用函数自身。</li>\n<li><p>注意：<br>在严格模式下，第 5 版 ECMAScript (ES5) 禁止使用 arguments.callee()。当一个函数必须调用自身的时候, 避免使用 arguments.callee(), 通过要么给函数表达式一个名字,要么使用一个函数声明.</p>\n</li>\n<li><p>特性：<br>arguments 对象和 Function 是分不开的。因为 arguments 这个对象不能显式创建，arguments 对象只有函数开始时才可用。</p>\n</li>\n<li><p>使用方法：<br>虽然 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同</p>\n</li>\n</ul>\n<h2 id=\"Array-prototype-slice-apply-arguments-用意\"><a href=\"#Array-prototype-slice-apply-arguments-用意\" class=\"headerlink\" title=\"Array.prototype.slice.apply(arguments)用意\"></a>Array.prototype.slice.apply(arguments)用意</h2><p>直接调用 arguments.slice()将返回一个”Object doesn”t support this property or method”错误，因为 arguments 不是一个真正的数组。调用 Array.prototype.slice.apply(arguments)的意义就在于它能将函数的参数对象转化为一个真正的数组。</p>\n<h2 id=\"Array-prototype-slice-apply-arguments，-1-用意\"><a href=\"#Array-prototype-slice-apply-arguments，-1-用意\" class=\"headerlink\" title=\"Array.prototype.slice.apply(arguments， [1])用意\"></a>Array.prototype.slice.apply(arguments， [1])用意</h2><p>首先这段代码的目的是为了拿到参数里除第一个以外后面的所有参数。</p>\n<p>现在 arguments 不是数组，所以不能直接调用 slice 方法，在 JavaScript 中借用其它对象的方法可以通过 apply 或者 call，以 call 为例，上述例子应该改写为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要借用的方法slice在Array.prototype 上，然后call接受两个参数</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个是需要借用方法的对象</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个是传进方法的参数，也就是1</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 也可以写成</span></span><br><span class=\"line\">[].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"apply-方法与-call-方法\"><a href=\"#apply-方法与-call-方法\" class=\"headerlink\" title=\"apply 方法与 call 方法\"></a>apply 方法与 call 方法</h2><p>apply 方法与 call 方法是一样的，区别只是传参的形式，需要把方法参数按数组形式传进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.apply(<span class=\"built_in\">arguments</span>, [<span class=\"number\">1</span>]) <span class=\"comment\">// 数组传入</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.apply(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"南京游","date":"2019-07-20T13:52:10.000Z","photos":["/0720-南京游/4.jpeg"],"_content":"\n# 前言\n\n> 南京，呆了小两年吧，旧地重游，临行前几日患了热毒，第二天在南京一大早就去南京中医院，也算旅游中难忘的回忆了～～\n\n# 古鸡鸣寺\n\n> 去了鸡鸣寺，听说求姻缘很灵～\n\n{% asset_img 4.jpeg 媳妇最美 %}\n鸡鸣寺站下来，走个五分钟就到了。\n\n{% asset_img 5.jpeg 媳妇最美 %}\n我可爱的媳妇～\n\n# 玄武湖\n\n> 还遇到有玄武湖跑圈活动～\n\n{% asset_img 1.jpeg 媳妇最美 %}\n媳妇标准拍照姿势～～\n\n{% asset_img 2.jpeg 媳妇最美 %}\n媳妇的背影～\n\n# 烤肉\n> 等了1、2个小时的新石器烤肉，感觉点了，有点吃不完等节奏～\n\n{% asset_img 3.jpeg 媳妇最美 %}\n","source":"_posts/南京游.md","raw":"---\ntitle: 南京游\ndate: 2019-07-20 21:52:10\ncategories:\n  - Travel\ntags:\n  - 南京\nphotos:\n  - /0720-南京游/4.jpeg\n---\n\n# 前言\n\n> 南京，呆了小两年吧，旧地重游，临行前几日患了热毒，第二天在南京一大早就去南京中医院，也算旅游中难忘的回忆了～～\n\n# 古鸡鸣寺\n\n> 去了鸡鸣寺，听说求姻缘很灵～\n\n{% asset_img 4.jpeg 媳妇最美 %}\n鸡鸣寺站下来，走个五分钟就到了。\n\n{% asset_img 5.jpeg 媳妇最美 %}\n我可爱的媳妇～\n\n# 玄武湖\n\n> 还遇到有玄武湖跑圈活动～\n\n{% asset_img 1.jpeg 媳妇最美 %}\n媳妇标准拍照姿势～～\n\n{% asset_img 2.jpeg 媳妇最美 %}\n媳妇的背影～\n\n# 烤肉\n> 等了1、2个小时的新石器烤肉，感觉点了，有点吃不完等节奏～\n\n{% asset_img 3.jpeg 媳妇最美 %}\n","slug":"南京游","published":1,"updated":"2019-07-23T08:58:17.063Z","comments":1,"layout":"post","link":"","_id":"cjyiazwdv002hygf0klbchlod","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>南京，呆了小两年吧，旧地重游，临行前几日患了热毒，第二天在南京一大早就去南京中医院，也算旅游中难忘的回忆了～～</p>\n</blockquote>\n<h1 id=\"古鸡鸣寺\"><a href=\"#古鸡鸣寺\" class=\"headerlink\" title=\"古鸡鸣寺\"></a>古鸡鸣寺</h1><blockquote>\n<p>去了鸡鸣寺，听说求姻缘很灵～</p>\n</blockquote>\n<img src=\"/0720-南京游/4.jpeg\" title=\"媳妇最美\">\n<p>鸡鸣寺站下来，走个五分钟就到了。</p>\n<img src=\"/0720-南京游/5.jpeg\" title=\"媳妇最美\">\n<p>我可爱的媳妇～</p>\n<h1 id=\"玄武湖\"><a href=\"#玄武湖\" class=\"headerlink\" title=\"玄武湖\"></a>玄武湖</h1><blockquote>\n<p>还遇到有玄武湖跑圈活动～</p>\n</blockquote>\n<img src=\"/0720-南京游/1.jpeg\" title=\"媳妇最美\">\n<p>媳妇标准拍照姿势～～</p>\n<img src=\"/0720-南京游/2.jpeg\" title=\"媳妇最美\">\n<p>媳妇的背影～</p>\n<h1 id=\"烤肉\"><a href=\"#烤肉\" class=\"headerlink\" title=\"烤肉\"></a>烤肉</h1><blockquote>\n<p>等了1、2个小时的新石器烤肉，感觉点了，有点吃不完等节奏～</p>\n</blockquote>\n<img src=\"/0720-南京游/3.jpeg\" title=\"媳妇最美\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>南京，呆了小两年吧，旧地重游，临行前几日患了热毒，第二天在南京一大早就去南京中医院，也算旅游中难忘的回忆了～～</p>\n</blockquote>\n<h1 id=\"古鸡鸣寺\"><a href=\"#古鸡鸣寺\" class=\"headerlink\" title=\"古鸡鸣寺\"></a>古鸡鸣寺</h1><blockquote>\n<p>去了鸡鸣寺，听说求姻缘很灵～</p>\n</blockquote>\n<img src=\"/0720-南京游/4.jpeg\" title=\"媳妇最美\">\n<p>鸡鸣寺站下来，走个五分钟就到了。</p>\n<img src=\"/0720-南京游/5.jpeg\" title=\"媳妇最美\">\n<p>我可爱的媳妇～</p>\n<h1 id=\"玄武湖\"><a href=\"#玄武湖\" class=\"headerlink\" title=\"玄武湖\"></a>玄武湖</h1><blockquote>\n<p>还遇到有玄武湖跑圈活动～</p>\n</blockquote>\n<img src=\"/0720-南京游/1.jpeg\" title=\"媳妇最美\">\n<p>媳妇标准拍照姿势～～</p>\n<img src=\"/0720-南京游/2.jpeg\" title=\"媳妇最美\">\n<p>媳妇的背影～</p>\n<h1 id=\"烤肉\"><a href=\"#烤肉\" class=\"headerlink\" title=\"烤肉\"></a>烤肉</h1><blockquote>\n<p>等了1、2个小时的新石器烤肉，感觉点了，有点吃不完等节奏～</p>\n</blockquote>\n<img src=\"/0720-南京游/3.jpeg\" title=\"媳妇最美\">\n"},{"title":"总结笔记20190614","date":"2019-06-14T09:44:06.000Z","_content":"\n1. 解决 chrome network 中出现`provisional headers are shown`，导致跨域时，查看不了 cookie 的携带情况\n   - 解决方法https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger\n   - chrome://flags/\n   - Disable site isolation\n   - Enable network service\n   - Runs network service in-process\n2. less 的函数 data-uri，可以将图片编译成 base64 格式，图片过大时，不生效，最大尺寸为 24KB\n3. devDependencies 和 dependencies 区别\n   - 网上统一的观念是\n   - devDependencies 用于本地环境开发时候。 dependencies 用户发布环境 其实看名字我也知道是这个意思，我觉得没解释情况。 devDependencies 是只会在开发环境下依赖的模块，生产环境不会被打入包内。通过 NODE_ENV=developement 或 NODE_ENV=production 指定开发还是生产环境。 而 dependencies 依赖的包不仅开发环境能使用，生产环境也能使用。其实这句话是重点，按照这个观念很容易决定安装模块时是使用--save 还是--save-dev。\n4. 关于 cookie 携带问题\n   - cookie 携带：这个问题与你发起 ajax 请求的方式有关\n   - fetch 在默认情况下, 不管是同域还是跨域 ajax 请求都不会带上 cookie, 只有当设置了 credentials 时才会带上该 ajax 请求所在域的 cookie, 服务端需要设置响应头 Access-Control-Allow-Credentials: true, 否则浏览器会因为安全限制而报错, 拿不到响应\n   - axios 和 jQuery 在同域 ajax 请求时会带上 cookie, 跨域请求不会, 跨域请求需要设置 withCredentials 和服务端响应头\n   - 默认情况下，一般浏览器的 CORS 跨域请求都是不会发送 cookie 等认证信息到服务端的，除非指定了 xhr.withCredentials = true，但是只有客户端单方面的设置了这个值还不行，服务端也需要同意才可以，所以服务端也需要设置好返回头 Access-Control-Allow-Credentials: true；还有一点要注意的，返回头 Access-Control-Allow-Origin 的值不能为星号，必须是指定的域，否则 cookie 等认证信息也是发送不了。\n5. `process.argv`属性返回一个数组，这个数组包含了启动 Node.js 进程时的命令行参数。第一个元素为 process.execPath。如果需要获取 argv[0]的值请参见 node 文档的 process.argv0。第二个元素为当前执行的 JavaScript 文件路径。剩余的元素为其他命令行参数。\n6. CORS 的相关设置\n   ```node\n   Access-Control-Allow-Origin: * // 跨域时，如果客户端ajax设置了withCredentials: true，就不可以为通配符，否则浏览器还是会跨域拦截\n   Access-Control-Allow-Credentials: true // 表示客户端是否可以发送Cookie\n   Access-Control-Expose-Headers: FooBar\n   Content-Type: text/html; charset=utf-8\n   ```\n   ```js\n   // ajax set 跨域携带证书\n   xhrFields: {\n     withCredentials: true\n   }\n   ```\n7. 判断是否为对象\n   ```js\n   function isObject(x) {\n     return Object.prototype.toString.call(x) === \"[object Object]\"\n   }\n   ```\n8. (1,eval)(\"str\") 等价于 (eval)('str') => eval('str')\n9. `(1,2,3,4) === 4 // true`\n10. 易混淆的判断真假\n    - 0 判断为 false\n    - \"0\" 判断为 true\n    - \"\" 判断为 false\n    - \"null\" 判断为 true\n11. Promise 相关写法\n\n```js\nvar p1 = Promise.resolve(value)\n// 等价于\nvar p1 = new Promise(resolve => resolve(value))\n\nvar p2 = Promise.reject(\"err\")\n// 等价于\nvar p2 = new Promise((resolve, reject) => reject(\"err\"))\n```\n\n12. pm2 常用命令\n\n    ```nodejs\n    $ pm2 logs 显示所有进程日志\n    $ pm2 stop all 停止所有进程\n    $ pm2 restart all 重启所有进程\n    $ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)\n    $ pm2 stop 0 停止指定的进程\n    $ pm2 restart 0 重启指定的进程\n    $ pm2 startup 产生 init 脚本 保持进程活着\n    $ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)\n    $ pm2 delete 0 杀死指定的进程\n    $ pm2 delete all 杀死全部进程\n\n    运行进程的不同方式：\n    $ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目\n    $ pm2 start app.js -i 3 启动3个进程\n    $ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster\n    $ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)\n    $ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone\n    $ pm2 stop serverone 停止 serverone 进程\n    $ pm2 start app.json 启动进程, 在 app.json里设置选项\n    $ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数\n    $ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件\n    ```\n\n13. pm2 启动文件\n\n    - apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用\n    - name:应用程序名称\n    - cwd:应用程序所在的目录\n    - script:应用程序的脚本路径\n    - log_date_format:\n    - error_file:自定义应用程序的错误日志文件\n    - out_file:自定义应用程序日志文件\n    - pid_file:自定义应用程序的 pid 文件\n    - instances:\n    - min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量\n    - max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）\n    - cron_restart:定时启动，解决重启能解决的问题\n    - watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。\n    - merge_logs:\n    - exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs\n    - exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork\n    - autorestart:启用/禁用应用程序崩溃或退出时自动重启\n    - vizion:启用/禁用 vizion 特性(版本控制)\n\n14. onpagehide,onunload,onpageshow,onload\n\n```\n// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow\n// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\nevent.persisted 判断页面是否从缓存中加载\n```\n\n15. JS 模块化写法\n\n    ```js\n    let module = (function() {\n      let count = 1\n      return {\n        add: function(count) {\n          return this.count + count\n        }\n      }\n    })()\n    ```\n\n16. 得到一个键盘\n\n```js\n// 用字符串返回一个键盘图形\n;(_ =>\n  [...\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"].map(\n    x =>\n      ((o += `/${(b = \"_\".repeat(\n        (w =\n          x < y\n            ? 2\n            : \" 667699\"[\n                ((x = [\"BS\", \"TAB\", \"CAPS\", \"ENTER\"][p++] || \"SHIFT\"), p)\n              ])\n      ))}\\\\|`),\n      (m += y + (x + \"    \").slice(0, w) + y + y),\n      (n += y + b + y + y),\n      (l += \" __\" + b))[73] && (k.push(l, m, n, o), (l = \"\"), (m = n = o = y)),\n    (m = n = o = y = \"|\"),\n    (p = l = k = [])\n  ) &&\n  k.join`\n`)()\n```\n\n17. 中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件\n\n    ```js\n    var typing = false\n    $(\"#ipt\").on(\"compositionstart\", function() {\n      typing = true\n    })\n    $(\"#ipt\").on(\"compositionend\", function() {\n      typing = false\n    })\n    //oninput在oncompositionend之前执行，需加定时器\n    $(\"#ipt\").on(\"input\", function() {\n      setTimeout(function() {\n        if (!typing) {\n          //To do something...\n        }\n      }, 0)\n    })\n\n    //或用keyup代替input\n    $(\"#ipt\").on(\"keyup\", function() {\n      if (!typing) {\n        //To do something...\n      }\n    })\n    ```\n18. Navicat Premium for Mac的破解教程\n```https://www.jianshu.com/p/f3ef78deadaa```\n","source":"_posts/总结笔记20190614.md","raw":"---\ntitle: 总结笔记20190614\ndate: 2019-06-14 17:44:06\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n1. 解决 chrome network 中出现`provisional headers are shown`，导致跨域时，查看不了 cookie 的携带情况\n   - 解决方法https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger\n   - chrome://flags/\n   - Disable site isolation\n   - Enable network service\n   - Runs network service in-process\n2. less 的函数 data-uri，可以将图片编译成 base64 格式，图片过大时，不生效，最大尺寸为 24KB\n3. devDependencies 和 dependencies 区别\n   - 网上统一的观念是\n   - devDependencies 用于本地环境开发时候。 dependencies 用户发布环境 其实看名字我也知道是这个意思，我觉得没解释情况。 devDependencies 是只会在开发环境下依赖的模块，生产环境不会被打入包内。通过 NODE_ENV=developement 或 NODE_ENV=production 指定开发还是生产环境。 而 dependencies 依赖的包不仅开发环境能使用，生产环境也能使用。其实这句话是重点，按照这个观念很容易决定安装模块时是使用--save 还是--save-dev。\n4. 关于 cookie 携带问题\n   - cookie 携带：这个问题与你发起 ajax 请求的方式有关\n   - fetch 在默认情况下, 不管是同域还是跨域 ajax 请求都不会带上 cookie, 只有当设置了 credentials 时才会带上该 ajax 请求所在域的 cookie, 服务端需要设置响应头 Access-Control-Allow-Credentials: true, 否则浏览器会因为安全限制而报错, 拿不到响应\n   - axios 和 jQuery 在同域 ajax 请求时会带上 cookie, 跨域请求不会, 跨域请求需要设置 withCredentials 和服务端响应头\n   - 默认情况下，一般浏览器的 CORS 跨域请求都是不会发送 cookie 等认证信息到服务端的，除非指定了 xhr.withCredentials = true，但是只有客户端单方面的设置了这个值还不行，服务端也需要同意才可以，所以服务端也需要设置好返回头 Access-Control-Allow-Credentials: true；还有一点要注意的，返回头 Access-Control-Allow-Origin 的值不能为星号，必须是指定的域，否则 cookie 等认证信息也是发送不了。\n5. `process.argv`属性返回一个数组，这个数组包含了启动 Node.js 进程时的命令行参数。第一个元素为 process.execPath。如果需要获取 argv[0]的值请参见 node 文档的 process.argv0。第二个元素为当前执行的 JavaScript 文件路径。剩余的元素为其他命令行参数。\n6. CORS 的相关设置\n   ```node\n   Access-Control-Allow-Origin: * // 跨域时，如果客户端ajax设置了withCredentials: true，就不可以为通配符，否则浏览器还是会跨域拦截\n   Access-Control-Allow-Credentials: true // 表示客户端是否可以发送Cookie\n   Access-Control-Expose-Headers: FooBar\n   Content-Type: text/html; charset=utf-8\n   ```\n   ```js\n   // ajax set 跨域携带证书\n   xhrFields: {\n     withCredentials: true\n   }\n   ```\n7. 判断是否为对象\n   ```js\n   function isObject(x) {\n     return Object.prototype.toString.call(x) === \"[object Object]\"\n   }\n   ```\n8. (1,eval)(\"str\") 等价于 (eval)('str') => eval('str')\n9. `(1,2,3,4) === 4 // true`\n10. 易混淆的判断真假\n    - 0 判断为 false\n    - \"0\" 判断为 true\n    - \"\" 判断为 false\n    - \"null\" 判断为 true\n11. Promise 相关写法\n\n```js\nvar p1 = Promise.resolve(value)\n// 等价于\nvar p1 = new Promise(resolve => resolve(value))\n\nvar p2 = Promise.reject(\"err\")\n// 等价于\nvar p2 = new Promise((resolve, reject) => reject(\"err\"))\n```\n\n12. pm2 常用命令\n\n    ```nodejs\n    $ pm2 logs 显示所有进程日志\n    $ pm2 stop all 停止所有进程\n    $ pm2 restart all 重启所有进程\n    $ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)\n    $ pm2 stop 0 停止指定的进程\n    $ pm2 restart 0 重启指定的进程\n    $ pm2 startup 产生 init 脚本 保持进程活着\n    $ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)\n    $ pm2 delete 0 杀死指定的进程\n    $ pm2 delete all 杀死全部进程\n\n    运行进程的不同方式：\n    $ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目\n    $ pm2 start app.js -i 3 启动3个进程\n    $ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster\n    $ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)\n    $ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone\n    $ pm2 stop serverone 停止 serverone 进程\n    $ pm2 start app.json 启动进程, 在 app.json里设置选项\n    $ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数\n    $ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件\n    ```\n\n13. pm2 启动文件\n\n    - apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用\n    - name:应用程序名称\n    - cwd:应用程序所在的目录\n    - script:应用程序的脚本路径\n    - log_date_format:\n    - error_file:自定义应用程序的错误日志文件\n    - out_file:自定义应用程序日志文件\n    - pid_file:自定义应用程序的 pid 文件\n    - instances:\n    - min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量\n    - max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）\n    - cron_restart:定时启动，解决重启能解决的问题\n    - watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。\n    - merge_logs:\n    - exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs\n    - exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork\n    - autorestart:启用/禁用应用程序崩溃或退出时自动重启\n    - vizion:启用/禁用 vizion 特性(版本控制)\n\n14. onpagehide,onunload,onpageshow,onload\n\n```\n// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow\n// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\nevent.persisted 判断页面是否从缓存中加载\n```\n\n15. JS 模块化写法\n\n    ```js\n    let module = (function() {\n      let count = 1\n      return {\n        add: function(count) {\n          return this.count + count\n        }\n      }\n    })()\n    ```\n\n16. 得到一个键盘\n\n```js\n// 用字符串返回一个键盘图形\n;(_ =>\n  [...\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"].map(\n    x =>\n      ((o += `/${(b = \"_\".repeat(\n        (w =\n          x < y\n            ? 2\n            : \" 667699\"[\n                ((x = [\"BS\", \"TAB\", \"CAPS\", \"ENTER\"][p++] || \"SHIFT\"), p)\n              ])\n      ))}\\\\|`),\n      (m += y + (x + \"    \").slice(0, w) + y + y),\n      (n += y + b + y + y),\n      (l += \" __\" + b))[73] && (k.push(l, m, n, o), (l = \"\"), (m = n = o = y)),\n    (m = n = o = y = \"|\"),\n    (p = l = k = [])\n  ) &&\n  k.join`\n`)()\n```\n\n17. 中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件\n\n    ```js\n    var typing = false\n    $(\"#ipt\").on(\"compositionstart\", function() {\n      typing = true\n    })\n    $(\"#ipt\").on(\"compositionend\", function() {\n      typing = false\n    })\n    //oninput在oncompositionend之前执行，需加定时器\n    $(\"#ipt\").on(\"input\", function() {\n      setTimeout(function() {\n        if (!typing) {\n          //To do something...\n        }\n      }, 0)\n    })\n\n    //或用keyup代替input\n    $(\"#ipt\").on(\"keyup\", function() {\n      if (!typing) {\n        //To do something...\n      }\n    })\n    ```\n18. Navicat Premium for Mac的破解教程\n```https://www.jianshu.com/p/f3ef78deadaa```\n","slug":"总结笔记20190614","published":1,"updated":"2019-07-23T08:58:17.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwdz002kygf02h5ttar7","content":"<ol>\n<li>解决 chrome network 中出现<code>provisional headers are shown</code>，导致跨域时，查看不了 cookie 的携带情况<ul>\n<li>解决方法<a href=\"https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger</a></li>\n<li>chrome://flags/</li>\n<li>Disable site isolation</li>\n<li>Enable network service</li>\n<li>Runs network service in-process</li>\n</ul>\n</li>\n<li>less 的函数 data-uri，可以将图片编译成 base64 格式，图片过大时，不生效，最大尺寸为 24KB</li>\n<li>devDependencies 和 dependencies 区别<ul>\n<li>网上统一的观念是</li>\n<li>devDependencies 用于本地环境开发时候。 dependencies 用户发布环境 其实看名字我也知道是这个意思，我觉得没解释情况。 devDependencies 是只会在开发环境下依赖的模块，生产环境不会被打入包内。通过 NODE_ENV=developement 或 NODE_ENV=production 指定开发还是生产环境。 而 dependencies 依赖的包不仅开发环境能使用，生产环境也能使用。其实这句话是重点，按照这个观念很容易决定安装模块时是使用–save 还是–save-dev。</li>\n</ul>\n</li>\n<li>关于 cookie 携带问题<ul>\n<li>cookie 携带：这个问题与你发起 ajax 请求的方式有关</li>\n<li>fetch 在默认情况下, 不管是同域还是跨域 ajax 请求都不会带上 cookie, 只有当设置了 credentials 时才会带上该 ajax 请求所在域的 cookie, 服务端需要设置响应头 Access-Control-Allow-Credentials: true, 否则浏览器会因为安全限制而报错, 拿不到响应</li>\n<li>axios 和 jQuery 在同域 ajax 请求时会带上 cookie, 跨域请求不会, 跨域请求需要设置 withCredentials 和服务端响应头</li>\n<li>默认情况下，一般浏览器的 CORS 跨域请求都是不会发送 cookie 等认证信息到服务端的，除非指定了 xhr.withCredentials = true，但是只有客户端单方面的设置了这个值还不行，服务端也需要同意才可以，所以服务端也需要设置好返回头 Access-Control-Allow-Credentials: true；还有一点要注意的，返回头 Access-Control-Allow-Origin 的值不能为星号，必须是指定的域，否则 cookie 等认证信息也是发送不了。</li>\n</ul>\n</li>\n<li><code>process.argv</code>属性返回一个数组，这个数组包含了启动 Node.js 进程时的命令行参数。第一个元素为 process.execPath。如果需要获取 argv[0]的值请参见 node 文档的 process.argv0。第二个元素为当前执行的 JavaScript 文件路径。剩余的元素为其他命令行参数。</li>\n<li><p>CORS 的相关设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: * // 跨域时，如果客户端ajax设置了withCredentials: true，就不可以为通配符，否则浏览器还是会跨域拦截</span><br><span class=\"line\">Access-Control-Allow-Credentials: true // 表示客户端是否可以发送Cookie</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax set 跨域携带证书</span></span><br><span class=\"line\">xhrFields: &#123;</span><br><span class=\"line\">  withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断是否为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(x) === <span class=\"string\">\"[object Object]\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(1,eval)(“str”) 等价于 (eval)(‘str’) =&gt; eval(‘str’)</p>\n</li>\n<li><code>(1,2,3,4) === 4 // true</code></li>\n<li>易混淆的判断真假<ul>\n<li>0 判断为 false</li>\n<li>“0” 判断为 true</li>\n<li>“” 判断为 false</li>\n<li>“null” 判断为 true</li>\n</ul>\n</li>\n<li>Promise 相关写法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">\"err\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">\"err\"</span>))</span><br></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li><p>pm2 常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 logs 显示所有进程日志</span><br><span class=\"line\">$ pm2 stop all 停止所有进程</span><br><span class=\"line\">$ pm2 restart all 重启所有进程</span><br><span class=\"line\">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">$ pm2 stop 0 停止指定的进程</span><br><span class=\"line\">$ pm2 restart 0 重启指定的进程</span><br><span class=\"line\">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class=\"line\">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">$ pm2 delete 0 杀死指定的进程</span><br><span class=\"line\">$ pm2 delete all 杀死全部进程</span><br><span class=\"line\"></span><br><span class=\"line\">运行进程的不同方式：</span><br><span class=\"line\">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">$ pm2 start app.js -i 3 启动3个进程</span><br><span class=\"line\">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class=\"line\">$ pm2 stop serverone 停止 serverone 进程</span><br><span class=\"line\">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class=\"line\">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class=\"line\">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pm2 启动文件</p>\n<ul>\n<li>apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用</li>\n<li>name:应用程序名称</li>\n<li>cwd:应用程序所在的目录</li>\n<li>script:应用程序的脚本路径</li>\n<li>log_date_format:</li>\n<li>error_file:自定义应用程序的错误日志文件</li>\n<li>out_file:自定义应用程序日志文件</li>\n<li>pid_file:自定义应用程序的 pid 文件</li>\n<li>instances:</li>\n<li>min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量</li>\n<li>max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）</li>\n<li>cron_restart:定时启动，解决重启能解决的问题</li>\n<li>watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。</li>\n<li>merge_logs:</li>\n<li>exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li>\n<li>exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li>\n<li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li>\n<li>vizion:启用/禁用 vizion 特性(版本控制)</li>\n</ul>\n</li>\n<li><p>onpagehide,onunload,onpageshow,onload</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow</span><br><span class=\"line\">// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发</span><br><span class=\"line\">event.persisted 判断页面是否从缓存中加载</span><br></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li><p>JS 模块化写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count + count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>得到一个键盘</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用字符串返回一个键盘图形</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span></span><br><span class=\"line\">  [...<span class=\"string\">\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"</span>].map(</span><br><span class=\"line\">    x =&gt;</span><br><span class=\"line\">      ((o += <span class=\"string\">`/<span class=\"subst\">$&#123;(b = <span class=\"string\">\"_\"</span>.repeat(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        (w =</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          x &lt; y</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            ? <span class=\"number\">2</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            : <span class=\"string\">\" 667699\"</span>[</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">                ((x = [<span class=\"string\">\"BS\"</span>, <span class=\"string\">\"TAB\"</span>, <span class=\"string\">\"CAPS\"</span>, <span class=\"string\">\"ENTER\"</span>][p++] || <span class=\"string\">\"SHIFT\"</span>), p)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">              ])</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      ))&#125;</span>\\\\|`</span>),</span><br><span class=\"line\">      (m += y + (x + <span class=\"string\">\"    \"</span>).slice(<span class=\"number\">0</span>, w) + y + y),</span><br><span class=\"line\">      (n += y + b + y + y),</span><br><span class=\"line\">      (l += <span class=\"string\">\" __\"</span> + b))[<span class=\"number\">73</span>] &amp;&amp; (k.push(l, m, n, o), (l = <span class=\"string\">\"\"</span>), (m = n = o = y)),</span><br><span class=\"line\">    (m = n = o = y = <span class=\"string\">\"|\"</span>),</span><br><span class=\"line\">    (p = l = k = [])</span><br><span class=\"line\">  ) &amp;&amp;</span><br><span class=\"line\">  k.join<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">`</span>)()</span><br></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li><p>中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> typing = <span class=\"literal\">false</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"compositionstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"compositionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//oninput在oncompositionend之前执行，需加定时器</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"input\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或用keyup代替input</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"keyup\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Navicat Premium for Mac的破解教程<br><code>https://www.jianshu.com/p/f3ef78deadaa</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>解决 chrome network 中出现<code>provisional headers are shown</code>，导致跨域时，查看不了 cookie 的携带情况<ul>\n<li>解决方法<a href=\"https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger</a></li>\n<li>chrome://flags/</li>\n<li>Disable site isolation</li>\n<li>Enable network service</li>\n<li>Runs network service in-process</li>\n</ul>\n</li>\n<li>less 的函数 data-uri，可以将图片编译成 base64 格式，图片过大时，不生效，最大尺寸为 24KB</li>\n<li>devDependencies 和 dependencies 区别<ul>\n<li>网上统一的观念是</li>\n<li>devDependencies 用于本地环境开发时候。 dependencies 用户发布环境 其实看名字我也知道是这个意思，我觉得没解释情况。 devDependencies 是只会在开发环境下依赖的模块，生产环境不会被打入包内。通过 NODE_ENV=developement 或 NODE_ENV=production 指定开发还是生产环境。 而 dependencies 依赖的包不仅开发环境能使用，生产环境也能使用。其实这句话是重点，按照这个观念很容易决定安装模块时是使用–save 还是–save-dev。</li>\n</ul>\n</li>\n<li>关于 cookie 携带问题<ul>\n<li>cookie 携带：这个问题与你发起 ajax 请求的方式有关</li>\n<li>fetch 在默认情况下, 不管是同域还是跨域 ajax 请求都不会带上 cookie, 只有当设置了 credentials 时才会带上该 ajax 请求所在域的 cookie, 服务端需要设置响应头 Access-Control-Allow-Credentials: true, 否则浏览器会因为安全限制而报错, 拿不到响应</li>\n<li>axios 和 jQuery 在同域 ajax 请求时会带上 cookie, 跨域请求不会, 跨域请求需要设置 withCredentials 和服务端响应头</li>\n<li>默认情况下，一般浏览器的 CORS 跨域请求都是不会发送 cookie 等认证信息到服务端的，除非指定了 xhr.withCredentials = true，但是只有客户端单方面的设置了这个值还不行，服务端也需要同意才可以，所以服务端也需要设置好返回头 Access-Control-Allow-Credentials: true；还有一点要注意的，返回头 Access-Control-Allow-Origin 的值不能为星号，必须是指定的域，否则 cookie 等认证信息也是发送不了。</li>\n</ul>\n</li>\n<li><code>process.argv</code>属性返回一个数组，这个数组包含了启动 Node.js 进程时的命令行参数。第一个元素为 process.execPath。如果需要获取 argv[0]的值请参见 node 文档的 process.argv0。第二个元素为当前执行的 JavaScript 文件路径。剩余的元素为其他命令行参数。</li>\n<li><p>CORS 的相关设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: * // 跨域时，如果客户端ajax设置了withCredentials: true，就不可以为通配符，否则浏览器还是会跨域拦截</span><br><span class=\"line\">Access-Control-Allow-Credentials: true // 表示客户端是否可以发送Cookie</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax set 跨域携带证书</span></span><br><span class=\"line\">xhrFields: &#123;</span><br><span class=\"line\">  withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>判断是否为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(x) === <span class=\"string\">\"[object Object]\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(1,eval)(“str”) 等价于 (eval)(‘str’) =&gt; eval(‘str’)</p>\n</li>\n<li><code>(1,2,3,4) === 4 // true</code></li>\n<li>易混淆的判断真假<ul>\n<li>0 判断为 false</li>\n<li>“0” 判断为 true</li>\n<li>“” 判断为 false</li>\n<li>“null” 判断为 true</li>\n</ul>\n</li>\n<li>Promise 相关写法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">\"err\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">\"err\"</span>))</span><br></pre></td></tr></table></figure>\n<ol start=\"12\">\n<li><p>pm2 常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 logs 显示所有进程日志</span><br><span class=\"line\">$ pm2 stop all 停止所有进程</span><br><span class=\"line\">$ pm2 restart all 重启所有进程</span><br><span class=\"line\">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">$ pm2 stop 0 停止指定的进程</span><br><span class=\"line\">$ pm2 restart 0 重启指定的进程</span><br><span class=\"line\">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class=\"line\">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">$ pm2 delete 0 杀死指定的进程</span><br><span class=\"line\">$ pm2 delete all 杀死全部进程</span><br><span class=\"line\"></span><br><span class=\"line\">运行进程的不同方式：</span><br><span class=\"line\">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">$ pm2 start app.js -i 3 启动3个进程</span><br><span class=\"line\">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class=\"line\">$ pm2 stop serverone 停止 serverone 进程</span><br><span class=\"line\">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class=\"line\">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class=\"line\">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pm2 启动文件</p>\n<ul>\n<li>apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用</li>\n<li>name:应用程序名称</li>\n<li>cwd:应用程序所在的目录</li>\n<li>script:应用程序的脚本路径</li>\n<li>log_date_format:</li>\n<li>error_file:自定义应用程序的错误日志文件</li>\n<li>out_file:自定义应用程序日志文件</li>\n<li>pid_file:自定义应用程序的 pid 文件</li>\n<li>instances:</li>\n<li>min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量</li>\n<li>max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）</li>\n<li>cron_restart:定时启动，解决重启能解决的问题</li>\n<li>watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。</li>\n<li>merge_logs:</li>\n<li>exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li>\n<li>exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li>\n<li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li>\n<li>vizion:启用/禁用 vizion 特性(版本控制)</li>\n</ul>\n</li>\n<li><p>onpagehide,onunload,onpageshow,onload</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow</span><br><span class=\"line\">// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发</span><br><span class=\"line\">event.persisted 判断页面是否从缓存中加载</span><br></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li><p>JS 模块化写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count + count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>得到一个键盘</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用字符串返回一个键盘图形</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span></span><br><span class=\"line\">  [...<span class=\"string\">\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"</span>].map(</span><br><span class=\"line\">    x =&gt;</span><br><span class=\"line\">      ((o += <span class=\"string\">`/<span class=\"subst\">$&#123;(b = <span class=\"string\">\"_\"</span>.repeat(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        (w =</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          x &lt; y</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            ? <span class=\"number\">2</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            : <span class=\"string\">\" 667699\"</span>[</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">                ((x = [<span class=\"string\">\"BS\"</span>, <span class=\"string\">\"TAB\"</span>, <span class=\"string\">\"CAPS\"</span>, <span class=\"string\">\"ENTER\"</span>][p++] || <span class=\"string\">\"SHIFT\"</span>), p)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">              ])</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      ))&#125;</span>\\\\|`</span>),</span><br><span class=\"line\">      (m += y + (x + <span class=\"string\">\"    \"</span>).slice(<span class=\"number\">0</span>, w) + y + y),</span><br><span class=\"line\">      (n += y + b + y + y),</span><br><span class=\"line\">      (l += <span class=\"string\">\" __\"</span> + b))[<span class=\"number\">73</span>] &amp;&amp; (k.push(l, m, n, o), (l = <span class=\"string\">\"\"</span>), (m = n = o = y)),</span><br><span class=\"line\">    (m = n = o = y = <span class=\"string\">\"|\"</span>),</span><br><span class=\"line\">    (p = l = k = [])</span><br><span class=\"line\">  ) &amp;&amp;</span><br><span class=\"line\">  k.join<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">`</span>)()</span><br></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li><p>中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> typing = <span class=\"literal\">false</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"compositionstart\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"compositionend\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//oninput在oncompositionend之前执行，需加定时器</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"input\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或用keyup代替input</span></span><br><span class=\"line\">$(<span class=\"string\">\"#ipt\"</span>).on(<span class=\"string\">\"keyup\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Navicat Premium for Mac的破解教程<br><code>https://www.jianshu.com/p/f3ef78deadaa</code></p>\n</li>\n</ol>\n"},{"title":"总结笔记20190415","date":"2019-04-15T11:14:06.000Z","_content":"\n1. Async/Await 从 Node 版本 v7.6.0 开始支持\n2. setTimeout 的定时器值推荐最小使用 16.7ms 的原因（16.7 = 1000 / 60, 即每秒 60 帧）\n3. 超出部分展示省略号\n\n   ```css\n   // css控制行数展示，省略号\n   .ellipsis {\n     word-wrap: break-word; // 允许长单词换行到下一行\n     overflow: hidden;\n     text-overflow: ellipsis; // 显示省略符号来代表被修剪的文本 string 可以给定string\n     display: -webkit-box;\n     -webkit-line-clamp: 3; // Safari、Opera 以及 Chrome\n     -webkit-box-orient: vertical;\n   }\n   .ellipsis {\n     overflow: hidden;\n     text-overflow: ellipsis;\n     white-space: nowrap;\n   }\n   ```\n\n4. vscode 中 vue 无法格式化\n   ```json\n   {\n     \"vetur.format.defaultFormatterOptions\": {\n       \"js-beautify-html\": {\n         \"wrap_attributes\": \"force-aligned\"\n       },\n       \"prettyhtml\": {\n         \"printWidth\": 100,\n         \"singleQuote\": false,\n         \"wrapAttributes\": false,\n         \"sortAttributes\": true\n       },\n       // --- 解决问题 ---\n       \"prettier\": {\n         \"semi\": false,\n         \"singleQuote\": true\n       }\n       // --- 解决问题 ---\n     }\n   }\n   ```\n5. offsetTop，获取的距离最近的 offsetParent 的顶部高度，offsetParent 是距离该元素设置过 postion 的父元素（设置过定位的父元素）、否则 offsetParent 就是 body 元素 getBoundingClientRect() // 使用该方法，获取距离视窗顶部的高度\n6. window.scrollTo(x, y) x,y 为小数时，实际滚动时，是向下取整\n7. p 标签中不能包含 display:block 的元素，否则浏览器解析错误\n8. \\_.isEmpty(123) === true 纯数字判断为真，一般校验对象\n9. 想要 div 触发 focus 和 blur，需要添加 tabIndex 属性\n10. 判断空数组，空对象方法 Object.keys().length !== 0\n\n11. 判断是否为对象\n    ```js\n    function isObject(x) {\n      return Object.prototype.toString.call(x) === '[object Object]'\n    }\n    ```\n12. (1,eval)(\"str\") 等价于 (eval)('str') => eval('str')\n13. `(1,2,3,4) === 4 // true`\n14. 易混淆的判断真假\n    - 0 判断为 false\n    - \"0\" 判断为 true\n    - \"\" 判断为 false\n    - \"null\" 判断为 true\n15. Promise 相关写法\n\n    ```js\n    var p1 = Promise.resolve(value)\n    // 等价于\n    var p1 = new Promise(resolve => resolve(value))\n\n    var p2 = Promise.reject('err')\n    // 等价于\n    var p2 = new Promise((resolve, reject) => reject('err'))\n    ```\n\n16. pm2 常用命令\n\n    ```nodejs\n    $ pm2 logs 显示所有进程日志\n    $ pm2 stop all 停止所有进程\n    $ pm2 restart all 重启所有进程\n    $ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)\n    $ pm2 stop 0 停止指定的进程\n    $ pm2 restart 0 重启指定的进程\n    $ pm2 startup 产生 init 脚本 保持进程活着\n    $ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)\n    $ pm2 delete 0 杀死指定的进程\n    $ pm2 delete all 杀死全部进程\n\n    运行进程的不同方式：\n    $ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目\n    $ pm2 start app.js -i 3 启动3个进程\n    $ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster\n    $ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)\n    $ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone\n    $ pm2 stop serverone 停止 serverone 进程\n    $ pm2 start app.json 启动进程, 在 app.json里设置选项\n    $ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数\n    $ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件\n    ```\n\n17. pm2 启动文件\n\n    - apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用\n    - name:应用程序名称\n    - cwd:应用程序所在的目录\n    - script:应用程序的脚本路径\n    - log_date_format:\n    - error_file:自定义应用程序的错误日志文件\n    - out_file:自定义应用程序日志文件\n    - pid_file:自定义应用程序的 pid 文件\n    - instances:\n    - min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量\n    - max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）\n    - cron_restart:定时启动，解决重启能解决的问题\n    - watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。\n    - merge_logs:\n    - exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs\n    - exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork\n    - autorestart:启用/禁用应用程序崩溃或退出时自动重启\n    - vizion:启用/禁用 vizion 特性(版本控制)\n\n18. onpagehide,onunload,onpageshow,onload\n\n```\n// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow\n// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\nevent.persisted 判断页面是否从缓存中加载\n```\n\n15. JS 模块化写法\n\n    ```js\n    let module = (function() {\n      let count = 1\n      return {\n        add: function(count) {\n          return this.count + count\n        }\n      }\n    })()\n    ```\n\n16. 得到一个键盘\n\n```js\n// 用字符串返回一个键盘图形\n;(_ =>\n  [...\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"].map(\n    x =>\n      ((o += `/${(b = '_'.repeat(\n        (w =\n          x < y\n            ? 2\n            : ' 667699'[\n                ((x = ['BS', 'TAB', 'CAPS', 'ENTER'][p++] || 'SHIFT'), p)\n              ])\n      ))}\\\\|`),\n      (m += y + (x + '    ').slice(0, w) + y + y),\n      (n += y + b + y + y),\n      (l += ' __' + b))[73] && (k.push(l, m, n, o), (l = ''), (m = n = o = y)),\n    (m = n = o = y = '|'),\n    (p = l = k = [])\n  ) &&\n  k.join`\n`)()\n```\n\n17. 中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件\n\n    ```js\n    var typing = false\n    $('#ipt').on('compositionstart', function() {\n      typing = true\n    })\n    $('#ipt').on('compositionend', function() {\n      typing = false\n    })\n    //oninput在oncompositionend之前执行，需加定时器\n    $('#ipt').on('input', function() {\n      setTimeout(function() {\n        if (!typing) {\n          //To do something...\n        }\n      }, 0)\n    })\n\n    //或用keyup代替input\n    $('#ipt').on('keyup', function() {\n      if (!typing) {\n        //To do something...\n      }\n    })\n    ```\n","source":"_posts/总结笔记20190415.md","raw":"---\ntitle: 总结笔记20190415\ndate: 2019-04-15 19:14:06\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n1. Async/Await 从 Node 版本 v7.6.0 开始支持\n2. setTimeout 的定时器值推荐最小使用 16.7ms 的原因（16.7 = 1000 / 60, 即每秒 60 帧）\n3. 超出部分展示省略号\n\n   ```css\n   // css控制行数展示，省略号\n   .ellipsis {\n     word-wrap: break-word; // 允许长单词换行到下一行\n     overflow: hidden;\n     text-overflow: ellipsis; // 显示省略符号来代表被修剪的文本 string 可以给定string\n     display: -webkit-box;\n     -webkit-line-clamp: 3; // Safari、Opera 以及 Chrome\n     -webkit-box-orient: vertical;\n   }\n   .ellipsis {\n     overflow: hidden;\n     text-overflow: ellipsis;\n     white-space: nowrap;\n   }\n   ```\n\n4. vscode 中 vue 无法格式化\n   ```json\n   {\n     \"vetur.format.defaultFormatterOptions\": {\n       \"js-beautify-html\": {\n         \"wrap_attributes\": \"force-aligned\"\n       },\n       \"prettyhtml\": {\n         \"printWidth\": 100,\n         \"singleQuote\": false,\n         \"wrapAttributes\": false,\n         \"sortAttributes\": true\n       },\n       // --- 解决问题 ---\n       \"prettier\": {\n         \"semi\": false,\n         \"singleQuote\": true\n       }\n       // --- 解决问题 ---\n     }\n   }\n   ```\n5. offsetTop，获取的距离最近的 offsetParent 的顶部高度，offsetParent 是距离该元素设置过 postion 的父元素（设置过定位的父元素）、否则 offsetParent 就是 body 元素 getBoundingClientRect() // 使用该方法，获取距离视窗顶部的高度\n6. window.scrollTo(x, y) x,y 为小数时，实际滚动时，是向下取整\n7. p 标签中不能包含 display:block 的元素，否则浏览器解析错误\n8. \\_.isEmpty(123) === true 纯数字判断为真，一般校验对象\n9. 想要 div 触发 focus 和 blur，需要添加 tabIndex 属性\n10. 判断空数组，空对象方法 Object.keys().length !== 0\n\n11. 判断是否为对象\n    ```js\n    function isObject(x) {\n      return Object.prototype.toString.call(x) === '[object Object]'\n    }\n    ```\n12. (1,eval)(\"str\") 等价于 (eval)('str') => eval('str')\n13. `(1,2,3,4) === 4 // true`\n14. 易混淆的判断真假\n    - 0 判断为 false\n    - \"0\" 判断为 true\n    - \"\" 判断为 false\n    - \"null\" 判断为 true\n15. Promise 相关写法\n\n    ```js\n    var p1 = Promise.resolve(value)\n    // 等价于\n    var p1 = new Promise(resolve => resolve(value))\n\n    var p2 = Promise.reject('err')\n    // 等价于\n    var p2 = new Promise((resolve, reject) => reject('err'))\n    ```\n\n16. pm2 常用命令\n\n    ```nodejs\n    $ pm2 logs 显示所有进程日志\n    $ pm2 stop all 停止所有进程\n    $ pm2 restart all 重启所有进程\n    $ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)\n    $ pm2 stop 0 停止指定的进程\n    $ pm2 restart 0 重启指定的进程\n    $ pm2 startup 产生 init 脚本 保持进程活着\n    $ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)\n    $ pm2 delete 0 杀死指定的进程\n    $ pm2 delete all 杀死全部进程\n\n    运行进程的不同方式：\n    $ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目\n    $ pm2 start app.js -i 3 启动3个进程\n    $ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster\n    $ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)\n    $ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone\n    $ pm2 stop serverone 停止 serverone 进程\n    $ pm2 start app.json 启动进程, 在 app.json里设置选项\n    $ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数\n    $ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件\n    ```\n\n17. pm2 启动文件\n\n    - apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用\n    - name:应用程序名称\n    - cwd:应用程序所在的目录\n    - script:应用程序的脚本路径\n    - log_date_format:\n    - error_file:自定义应用程序的错误日志文件\n    - out_file:自定义应用程序日志文件\n    - pid_file:自定义应用程序的 pid 文件\n    - instances:\n    - min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量\n    - max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）\n    - cron_restart:定时启动，解决重启能解决的问题\n    - watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。\n    - merge_logs:\n    - exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs\n    - exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork\n    - autorestart:启用/禁用应用程序崩溃或退出时自动重启\n    - vizion:启用/禁用 vizion 特性(版本控制)\n\n18. onpagehide,onunload,onpageshow,onload\n\n```\n// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow\n// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\nevent.persisted 判断页面是否从缓存中加载\n```\n\n15. JS 模块化写法\n\n    ```js\n    let module = (function() {\n      let count = 1\n      return {\n        add: function(count) {\n          return this.count + count\n        }\n      }\n    })()\n    ```\n\n16. 得到一个键盘\n\n```js\n// 用字符串返回一个键盘图形\n;(_ =>\n  [...\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"].map(\n    x =>\n      ((o += `/${(b = '_'.repeat(\n        (w =\n          x < y\n            ? 2\n            : ' 667699'[\n                ((x = ['BS', 'TAB', 'CAPS', 'ENTER'][p++] || 'SHIFT'), p)\n              ])\n      ))}\\\\|`),\n      (m += y + (x + '    ').slice(0, w) + y + y),\n      (n += y + b + y + y),\n      (l += ' __' + b))[73] && (k.push(l, m, n, o), (l = ''), (m = n = o = y)),\n    (m = n = o = y = '|'),\n    (p = l = k = [])\n  ) &&\n  k.join`\n`)()\n```\n\n17. 中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件\n\n    ```js\n    var typing = false\n    $('#ipt').on('compositionstart', function() {\n      typing = true\n    })\n    $('#ipt').on('compositionend', function() {\n      typing = false\n    })\n    //oninput在oncompositionend之前执行，需加定时器\n    $('#ipt').on('input', function() {\n      setTimeout(function() {\n        if (!typing) {\n          //To do something...\n        }\n      }, 0)\n    })\n\n    //或用keyup代替input\n    $('#ipt').on('keyup', function() {\n      if (!typing) {\n        //To do something...\n      }\n    })\n    ```\n","slug":"总结笔记20190415","published":1,"updated":"2019-07-23T08:58:17.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwe2002pygf0jq7f1x9q","content":"<ol>\n<li>Async/Await 从 Node 版本 v7.6.0 开始支持</li>\n<li>setTimeout 的定时器值推荐最小使用 16.7ms 的原因（16.7 = 1000 / 60, 即每秒 60 帧）</li>\n<li><p>超出部分展示省略号</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// css控制行数展示，省略号</span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  word-wrap: break-word; // 允许长单词换行到下一行</span><br><span class=\"line\">  <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">  text-overflow: ellipsis; // 显示省略符号来代表被修剪的文本 string 可以给定string</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\">  -webkit-line-clamp: 3; // Safari、Opera 以及 Chrome</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vscode 中 vue 无法格式化</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"wrapAttributes\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sortAttributes\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // --- 解决问题 ---</span><br><span class=\"line\">    \"prettier\": &#123;</span><br><span class=\"line\">      \"semi\": false,</span><br><span class=\"line\">      \"singleQuote\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // --- 解决问题 ---</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>offsetTop，获取的距离最近的 offsetParent 的顶部高度，offsetParent 是距离该元素设置过 postion 的父元素（设置过定位的父元素）、否则 offsetParent 就是 body 元素 getBoundingClientRect() // 使用该方法，获取距离视窗顶部的高度</p>\n</li>\n<li>window.scrollTo(x, y) x,y 为小数时，实际滚动时，是向下取整</li>\n<li>p 标签中不能包含 display:block 的元素，否则浏览器解析错误</li>\n<li>_.isEmpty(123) === true 纯数字判断为真，一般校验对象</li>\n<li>想要 div 触发 focus 和 blur，需要添加 tabIndex 属性</li>\n<li><p>判断空数组，空对象方法 Object.keys().length !== 0</p>\n</li>\n<li><p>判断是否为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(x) === <span class=\"string\">'[object Object]'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(1,eval)(“str”) 等价于 (eval)(‘str’) =&gt; eval(‘str’)</p>\n</li>\n<li><code>(1,2,3,4) === 4 // true</code></li>\n<li>易混淆的判断真假<ul>\n<li>0 判断为 false</li>\n<li>“0” 判断为 true</li>\n<li>“” 判断为 false</li>\n<li>“null” 判断为 true</li>\n</ul>\n</li>\n<li><p>Promise 相关写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'err'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">'err'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pm2 常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 logs 显示所有进程日志</span><br><span class=\"line\">$ pm2 stop all 停止所有进程</span><br><span class=\"line\">$ pm2 restart all 重启所有进程</span><br><span class=\"line\">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">$ pm2 stop 0 停止指定的进程</span><br><span class=\"line\">$ pm2 restart 0 重启指定的进程</span><br><span class=\"line\">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class=\"line\">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">$ pm2 delete 0 杀死指定的进程</span><br><span class=\"line\">$ pm2 delete all 杀死全部进程</span><br><span class=\"line\"></span><br><span class=\"line\">运行进程的不同方式：</span><br><span class=\"line\">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">$ pm2 start app.js -i 3 启动3个进程</span><br><span class=\"line\">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class=\"line\">$ pm2 stop serverone 停止 serverone 进程</span><br><span class=\"line\">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class=\"line\">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class=\"line\">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pm2 启动文件</p>\n<ul>\n<li>apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用</li>\n<li>name:应用程序名称</li>\n<li>cwd:应用程序所在的目录</li>\n<li>script:应用程序的脚本路径</li>\n<li>log_date_format:</li>\n<li>error_file:自定义应用程序的错误日志文件</li>\n<li>out_file:自定义应用程序日志文件</li>\n<li>pid_file:自定义应用程序的 pid 文件</li>\n<li>instances:</li>\n<li>min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量</li>\n<li>max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）</li>\n<li>cron_restart:定时启动，解决重启能解决的问题</li>\n<li>watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。</li>\n<li>merge_logs:</li>\n<li>exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li>\n<li>exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li>\n<li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li>\n<li>vizion:启用/禁用 vizion 特性(版本控制)</li>\n</ul>\n</li>\n<li><p>onpagehide,onunload,onpageshow,onload</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow</span><br><span class=\"line\">// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发</span><br><span class=\"line\">event.persisted 判断页面是否从缓存中加载</span><br></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li><p>JS 模块化写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count + count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>得到一个键盘</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用字符串返回一个键盘图形</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span></span><br><span class=\"line\">  [...<span class=\"string\">\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"</span>].map(</span><br><span class=\"line\">    x =&gt;</span><br><span class=\"line\">      ((o += <span class=\"string\">`/<span class=\"subst\">$&#123;(b = <span class=\"string\">'_'</span>.repeat(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        (w =</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          x &lt; y</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            ? <span class=\"number\">2</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            : <span class=\"string\">' 667699'</span>[</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">                ((x = [<span class=\"string\">'BS'</span>, <span class=\"string\">'TAB'</span>, <span class=\"string\">'CAPS'</span>, <span class=\"string\">'ENTER'</span>][p++] || <span class=\"string\">'SHIFT'</span>), p)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">              ])</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      ))&#125;</span>\\\\|`</span>),</span><br><span class=\"line\">      (m += y + (x + <span class=\"string\">'    '</span>).slice(<span class=\"number\">0</span>, w) + y + y),</span><br><span class=\"line\">      (n += y + b + y + y),</span><br><span class=\"line\">      (l += <span class=\"string\">' __'</span> + b))[<span class=\"number\">73</span>] &amp;&amp; (k.push(l, m, n, o), (l = <span class=\"string\">''</span>), (m = n = o = y)),</span><br><span class=\"line\">    (m = n = o = y = <span class=\"string\">'|'</span>),</span><br><span class=\"line\">    (p = l = k = [])</span><br><span class=\"line\">  ) &amp;&amp;</span><br><span class=\"line\">  k.join<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">`</span>)()</span><br></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li><p>中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> typing = <span class=\"literal\">false</span></span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'compositionstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'compositionend'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//oninput在oncompositionend之前执行，需加定时器</span></span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或用keyup代替input</span></span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>Async/Await 从 Node 版本 v7.6.0 开始支持</li>\n<li>setTimeout 的定时器值推荐最小使用 16.7ms 的原因（16.7 = 1000 / 60, 即每秒 60 帧）</li>\n<li><p>超出部分展示省略号</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// css控制行数展示，省略号</span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  word-wrap: break-word; // 允许长单词换行到下一行</span><br><span class=\"line\">  <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">  text-overflow: ellipsis; // 显示省略符号来代表被修剪的文本 string 可以给定string</span><br><span class=\"line\">  <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\">  -webkit-line-clamp: 3; // Safari、Opera 以及 Chrome</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>vscode 中 vue 无法格式化</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-aligned\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"wrapAttributes\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sortAttributes\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    // --- 解决问题 ---</span><br><span class=\"line\">    \"prettier\": &#123;</span><br><span class=\"line\">      \"semi\": false,</span><br><span class=\"line\">      \"singleQuote\": true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // --- 解决问题 ---</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>offsetTop，获取的距离最近的 offsetParent 的顶部高度，offsetParent 是距离该元素设置过 postion 的父元素（设置过定位的父元素）、否则 offsetParent 就是 body 元素 getBoundingClientRect() // 使用该方法，获取距离视窗顶部的高度</p>\n</li>\n<li>window.scrollTo(x, y) x,y 为小数时，实际滚动时，是向下取整</li>\n<li>p 标签中不能包含 display:block 的元素，否则浏览器解析错误</li>\n<li>_.isEmpty(123) === true 纯数字判断为真，一般校验对象</li>\n<li>想要 div 触发 focus 和 blur，需要添加 tabIndex 属性</li>\n<li><p>判断空数组，空对象方法 Object.keys().length !== 0</p>\n</li>\n<li><p>判断是否为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(x) === <span class=\"string\">'[object Object]'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(1,eval)(“str”) 等价于 (eval)(‘str’) =&gt; eval(‘str’)</p>\n</li>\n<li><code>(1,2,3,4) === 4 // true</code></li>\n<li>易混淆的判断真假<ul>\n<li>0 判断为 false</li>\n<li>“0” 判断为 true</li>\n<li>“” 判断为 false</li>\n<li>“null” 判断为 true</li>\n</ul>\n</li>\n<li><p>Promise 相关写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(value)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(value))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'err'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> reject(<span class=\"string\">'err'</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pm2 常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 logs 显示所有进程日志</span><br><span class=\"line\">$ pm2 stop all 停止所有进程</span><br><span class=\"line\">$ pm2 restart all 重启所有进程</span><br><span class=\"line\">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">$ pm2 stop 0 停止指定的进程</span><br><span class=\"line\">$ pm2 restart 0 重启指定的进程</span><br><span class=\"line\">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class=\"line\">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">$ pm2 delete 0 杀死指定的进程</span><br><span class=\"line\">$ pm2 delete all 杀死全部进程</span><br><span class=\"line\"></span><br><span class=\"line\">运行进程的不同方式：</span><br><span class=\"line\">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">$ pm2 start app.js -i 3 启动3个进程</span><br><span class=\"line\">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class=\"line\">$ pm2 stop serverone 停止 serverone 进程</span><br><span class=\"line\">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class=\"line\">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class=\"line\">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>pm2 启动文件</p>\n<ul>\n<li>apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用</li>\n<li>name:应用程序名称</li>\n<li>cwd:应用程序所在的目录</li>\n<li>script:应用程序的脚本路径</li>\n<li>log_date_format:</li>\n<li>error_file:自定义应用程序的错误日志文件</li>\n<li>out_file:自定义应用程序日志文件</li>\n<li>pid_file:自定义应用程序的 pid 文件</li>\n<li>instances:</li>\n<li>min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量</li>\n<li>max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）</li>\n<li>cron_restart:定时启动，解决重启能解决的问题</li>\n<li>watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。</li>\n<li>merge_logs:</li>\n<li>exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li>\n<li>exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li>\n<li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li>\n<li>vizion:启用/禁用 vizion 特性(版本控制)</li>\n</ul>\n</li>\n<li><p>onpagehide,onunload,onpageshow,onload</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow</span><br><span class=\"line\">// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发</span><br><span class=\"line\">event.persisted 判断页面是否从缓存中加载</span><br></pre></td></tr></table></figure>\n<ol start=\"15\">\n<li><p>JS 模块化写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">module</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.count + count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>得到一个键盘</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用字符串返回一个键盘图形</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span></span><br><span class=\"line\">  [...<span class=\"string\">\"`1234567890-=~~QWERTYUIOP[]\\\\~ASDFGHJKL;'~~ZXCVBNM,./~\"</span>].map(</span><br><span class=\"line\">    x =&gt;</span><br><span class=\"line\">      ((o += <span class=\"string\">`/<span class=\"subst\">$&#123;(b = <span class=\"string\">'_'</span>.repeat(</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">        (w =</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">          x &lt; y</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            ? <span class=\"number\">2</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">            : <span class=\"string\">' 667699'</span>[</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">                ((x = [<span class=\"string\">'BS'</span>, <span class=\"string\">'TAB'</span>, <span class=\"string\">'CAPS'</span>, <span class=\"string\">'ENTER'</span>][p++] || <span class=\"string\">'SHIFT'</span>), p)</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">              ])</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      ))&#125;</span>\\\\|`</span>),</span><br><span class=\"line\">      (m += y + (x + <span class=\"string\">'    '</span>).slice(<span class=\"number\">0</span>, w) + y + y),</span><br><span class=\"line\">      (n += y + b + y + y),</span><br><span class=\"line\">      (l += <span class=\"string\">' __'</span> + b))[<span class=\"number\">73</span>] &amp;&amp; (k.push(l, m, n, o), (l = <span class=\"string\">''</span>), (m = n = o = y)),</span><br><span class=\"line\">    (m = n = o = y = <span class=\"string\">'|'</span>),</span><br><span class=\"line\">    (p = l = k = [])</span><br><span class=\"line\">  ) &amp;&amp;</span><br><span class=\"line\">  k.join<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">`</span>)()</span><br></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li><p>中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> typing = <span class=\"literal\">false</span></span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'compositionstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'compositionend'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  typing = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//oninput在oncompositionend之前执行，需加定时器</span></span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'input'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或用keyup代替input</span></span><br><span class=\"line\">$(<span class=\"string\">'#ipt'</span>).on(<span class=\"string\">'keyup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!typing) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//To do something...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"天空","date":"2019-07-20T13:52:10.000Z","photos":["/0720-天空/1.jpeg"],"_content":"\n{% asset_img 1.jpeg 媳妇最美 %}\n媳妇拍的不错～～\n\n{% asset_img 2.jpeg 媳妇最美 %}\n这样的风景，看着就很舒服～\n\n{% asset_img 3.jpeg 媳妇最美 %}\n一个天空，不同景色\n","source":"_posts/天空.md","raw":"---\ntitle: 天空\ndate: 2019-07-20 21:52:10\ncategories:\n  - Daily\ntags:\n  - 天空\nphotos:\n  - /0720-天空/1.jpeg\n---\n\n{% asset_img 1.jpeg 媳妇最美 %}\n媳妇拍的不错～～\n\n{% asset_img 2.jpeg 媳妇最美 %}\n这样的风景，看着就很舒服～\n\n{% asset_img 3.jpeg 媳妇最美 %}\n一个天空，不同景色\n","slug":"天空","published":1,"updated":"2019-07-23T08:58:17.081Z","comments":1,"layout":"post","link":"","_id":"cjyiazwe5002sygf098e906fs","content":"<img src=\"/0720-天空/1.jpeg\" title=\"媳妇最美\">\n<p>媳妇拍的不错～～</p>\n<img src=\"/0720-天空/2.jpeg\" title=\"媳妇最美\">\n<p>这样的风景，看着就很舒服～</p>\n<img src=\"/0720-天空/3.jpeg\" title=\"媳妇最美\">\n<p>一个天空，不同景色</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/0720-天空/1.jpeg\" title=\"媳妇最美\">\n<p>媳妇拍的不错～～</p>\n<img src=\"/0720-天空/2.jpeg\" title=\"媳妇最美\">\n<p>这样的风景，看着就很舒服～</p>\n<img src=\"/0720-天空/3.jpeg\" title=\"媳妇最美\">\n<p>一个天空，不同景色</p>\n"},{"title":"总结笔记20190104","date":"2019-01-03T16:00:00.000Z","_content":"\n### lodash 函数\n\n- \\_.camelCase([string=''])：转换字符串为 驼峰写法(小驼峰)\n- \\_.isNil(value)：检查 value 是否是 null 或者 undefined。\n- \\_.size()：返回集合的长度或对象中可枚举属性的个数。\n- \\_.isPlainObject(): 检查是否是普通对象。 也就是说该对象由 Object 构造函数创建，或者 [[Prototype]] 为 null\n- \\_.pick(object, \\*keys) 返回一个只有列入挑选 key 属性的对象\n- \\_.omit(object, [props]) 反向版的 pick，忽略[props]，返回之外的属性\n- _.identity(value) stooge === _.identity(stooge); // true 返回本身\n- \\_.rest(arguments, 0): ( 默认从 1 位开始),返回 0 位之后的数组\n\n### node 全局对象\n\n- process.cwd()获得当前执行 node 命令时候的文件夹目录名\n- process.execPath 属性，返回启动 Node.js 进程的可执行文件所在的绝对路径`/usr/local/bin/node`\n- process.argv 属性返回一个数组,数组包含了启动 Node.js 进程时的命令行参数\n  ```\n  $ node process-args.js one two=three four\n  /**\n      0: /usr/local/bin/node\n      1: /Users/mjr/work/node/process-args.js\n      2: one\n      3: two=three\n      4: four\n  **/\n  ```\n- \\_\\_dirname 获得当前执行文件所在目录的完整目录名\n- \\_\\_filename 获得当前执行文件的带有完整绝对路径的文件名\n\n### Javascript 相关\n\n- toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。\n  ```js\n  // https://www.jianshu.com/p/849b0ae36b36 不可用于高精度运算，金钱运算\n  var a = 1.335\n  console.log(a.toFixed(2))\n  // IE      1.34\n  //chorme   1.33\n  ```\n- Javascript 按位取反运算符 (~)\n  ```\n  // Javascript 按位取反运算符 (~) ，对一个表达式执行位非（求非）运算。\n  // 就来看看~1的计算步骤：\n  // 将1(这里叫：原码)转二进制 ＝ 00000001 按位取反 ＝ 11111110 发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001 末位加1取其补码 ＝ 10000010 转换回十进制 ＝ -2\n  var str = '123456'\n  // ~-1 === 0\n  if(~str.indexOf(0)){\n    console.log('str包含0')\n  } else {\n    console.log('str不包含0')\n  }\n  ```\n- 面试题实现`(a==1 && a==2 && a==3) === true` 双等于号\n\n  ```\n  const a = { value : 0 };\n  a.valueOf = function() {\n      return this.value += 1;\n  };\n\n  console.log(a==1 && a==2 && a==3); //true\n  ```\n\n- 面试题实现`(a===1 && a===2 && a===3) === true` 全等\n\n  ```\n  // window.value\n  var value = 0;\n\n  // 重写get取值方式\n  Object.defineProperty(window, 'a', {\n      get: function() {\n          return this.value += 1;\n      }\n  });\n\n  console.log(a===1 && a===2 && a===3) // true\n  ```\n\n- 利用 es6 函数 reduce，并行执行 promise\n  ```js\n  return bizs.reduce((pro, biz) => {\n    return pro.then(() => this.copySingleWithObserve(biz))\n  }, Promise.resolve())\n  ```\n- Object.create(null) 与 {} 区别\n  - 区别\n    1. Object.create(null)不会继承 Object 原型上的任何东西 如没有继承方法 toString(){}创建的新对象会继承所有 Object 的属性\n    2. 因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等\n  - 为什么用 Object.create(null)\n    1. 因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等\n    2. for in 循环的时候不会再遍历原型链上的属性 ,使用 create(null)就不会再对属性进行检查了,也可以使用 Object.keys[]\n  - 什么时候用 Object.create(null)\n    1. 你需要一个非常干净且高度可定制的对象当做数据字典的时候,比如 serverAPI 里的一些变量\n    2. 减少 hasOwnProperty 造成的性能损失\n\n### require 和 import\n\n1. require\n   - commonJS（适用于服务端，同步加载）\n     1. 运行时加载\n     2. 拷贝到本页面\n     3. 全部引入\n     4. 模块写法分 exports 和 module.exports。\n   - AMD (适用于客户端，异步加载)\n     - AMD 是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”\n     ```js\n     //require([module], callback);\n     require(['math'], function (math) {\n         math.add(2, 3);\n     });\n     // 模块写法 dependencies依赖模块\n     define(id?, dependencies?, factory)\n     ```\n   - CMD\n     - CMD 是\"Common Module Definition\"的缩写。类似于 requirejs，但是 seajs 是依赖就近，延迟执行，requirejs 是依赖前置，提前执行。\n2. import\n\n   > 推荐使用 ES6 的 import\n\n   - 编译时加载\n   - 只引用定义\n   - 按需加载\n\n### NodeJS 查看 ES6 支持率\n\n```\n// nodejs 8.0以上支持原生es6方法\n$ node -v\nv10.13.\n\nnpm install -g es-checker\n// 安装完毕，运行\nes-checke\n\n// 查看当前版本es6原生支持率92%\n=========================================\nPasses 39 feature Detections\nYour runtime supports 92% of ECMAScript 6\n=========================================\n```\n\n### package.json 中配置版本号\n\n1. '~': '~2.3.1',则更新'2.3.x'中最新的小版本,不会去更新'2.4.x'\n2. '^': '^2.2.2',则会去找'2.x.x'中最新的，不会去更新'3.x.x'\n\n### setTimeout\n\n```js\n// setTimeout的一道面试题\nfor (var i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i)\n  }, 1000)\n} //5,5,5,5,5\n```\n\n为什么会输出 5,5,5,5,5，而不是 0,1,2,3,4，因为 setTimeout 在 for 循环中异步的执行，将输出打印的操作，队列在 for 循环执行完之后。\n\n### 删除 js 数组中的某个元素\n\n```js\nvar _arr = ['a', 'b', 'c', 'ALL']\nvar _str = _arr.join(',')\nvar _index = _str.indexOf('ALL') // 获取\"ALL\"的位置\n_arr.splice(_index, 1) // 去除该元素（会改变原数组）\nconsole.log(_arr) // [\"a\", \"b\", \"c\"]\n```\n","source":"_posts/总结笔记20190104.md","raw":"---\ntitle: 总结笔记20190104\ndate: 2019-01-04 00:00:00\ntags:\n  - JavaScript\n  - ES6\ncategories:\n  - Note\n---\n\n### lodash 函数\n\n- \\_.camelCase([string=''])：转换字符串为 驼峰写法(小驼峰)\n- \\_.isNil(value)：检查 value 是否是 null 或者 undefined。\n- \\_.size()：返回集合的长度或对象中可枚举属性的个数。\n- \\_.isPlainObject(): 检查是否是普通对象。 也就是说该对象由 Object 构造函数创建，或者 [[Prototype]] 为 null\n- \\_.pick(object, \\*keys) 返回一个只有列入挑选 key 属性的对象\n- \\_.omit(object, [props]) 反向版的 pick，忽略[props]，返回之外的属性\n- _.identity(value) stooge === _.identity(stooge); // true 返回本身\n- \\_.rest(arguments, 0): ( 默认从 1 位开始),返回 0 位之后的数组\n\n### node 全局对象\n\n- process.cwd()获得当前执行 node 命令时候的文件夹目录名\n- process.execPath 属性，返回启动 Node.js 进程的可执行文件所在的绝对路径`/usr/local/bin/node`\n- process.argv 属性返回一个数组,数组包含了启动 Node.js 进程时的命令行参数\n  ```\n  $ node process-args.js one two=three four\n  /**\n      0: /usr/local/bin/node\n      1: /Users/mjr/work/node/process-args.js\n      2: one\n      3: two=three\n      4: four\n  **/\n  ```\n- \\_\\_dirname 获得当前执行文件所在目录的完整目录名\n- \\_\\_filename 获得当前执行文件的带有完整绝对路径的文件名\n\n### Javascript 相关\n\n- toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。\n  ```js\n  // https://www.jianshu.com/p/849b0ae36b36 不可用于高精度运算，金钱运算\n  var a = 1.335\n  console.log(a.toFixed(2))\n  // IE      1.34\n  //chorme   1.33\n  ```\n- Javascript 按位取反运算符 (~)\n  ```\n  // Javascript 按位取反运算符 (~) ，对一个表达式执行位非（求非）运算。\n  // 就来看看~1的计算步骤：\n  // 将1(这里叫：原码)转二进制 ＝ 00000001 按位取反 ＝ 11111110 发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001 末位加1取其补码 ＝ 10000010 转换回十进制 ＝ -2\n  var str = '123456'\n  // ~-1 === 0\n  if(~str.indexOf(0)){\n    console.log('str包含0')\n  } else {\n    console.log('str不包含0')\n  }\n  ```\n- 面试题实现`(a==1 && a==2 && a==3) === true` 双等于号\n\n  ```\n  const a = { value : 0 };\n  a.valueOf = function() {\n      return this.value += 1;\n  };\n\n  console.log(a==1 && a==2 && a==3); //true\n  ```\n\n- 面试题实现`(a===1 && a===2 && a===3) === true` 全等\n\n  ```\n  // window.value\n  var value = 0;\n\n  // 重写get取值方式\n  Object.defineProperty(window, 'a', {\n      get: function() {\n          return this.value += 1;\n      }\n  });\n\n  console.log(a===1 && a===2 && a===3) // true\n  ```\n\n- 利用 es6 函数 reduce，并行执行 promise\n  ```js\n  return bizs.reduce((pro, biz) => {\n    return pro.then(() => this.copySingleWithObserve(biz))\n  }, Promise.resolve())\n  ```\n- Object.create(null) 与 {} 区别\n  - 区别\n    1. Object.create(null)不会继承 Object 原型上的任何东西 如没有继承方法 toString(){}创建的新对象会继承所有 Object 的属性\n    2. 因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等\n  - 为什么用 Object.create(null)\n    1. 因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等\n    2. for in 循环的时候不会再遍历原型链上的属性 ,使用 create(null)就不会再对属性进行检查了,也可以使用 Object.keys[]\n  - 什么时候用 Object.create(null)\n    1. 你需要一个非常干净且高度可定制的对象当做数据字典的时候,比如 serverAPI 里的一些变量\n    2. 减少 hasOwnProperty 造成的性能损失\n\n### require 和 import\n\n1. require\n   - commonJS（适用于服务端，同步加载）\n     1. 运行时加载\n     2. 拷贝到本页面\n     3. 全部引入\n     4. 模块写法分 exports 和 module.exports。\n   - AMD (适用于客户端，异步加载)\n     - AMD 是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”\n     ```js\n     //require([module], callback);\n     require(['math'], function (math) {\n         math.add(2, 3);\n     });\n     // 模块写法 dependencies依赖模块\n     define(id?, dependencies?, factory)\n     ```\n   - CMD\n     - CMD 是\"Common Module Definition\"的缩写。类似于 requirejs，但是 seajs 是依赖就近，延迟执行，requirejs 是依赖前置，提前执行。\n2. import\n\n   > 推荐使用 ES6 的 import\n\n   - 编译时加载\n   - 只引用定义\n   - 按需加载\n\n### NodeJS 查看 ES6 支持率\n\n```\n// nodejs 8.0以上支持原生es6方法\n$ node -v\nv10.13.\n\nnpm install -g es-checker\n// 安装完毕，运行\nes-checke\n\n// 查看当前版本es6原生支持率92%\n=========================================\nPasses 39 feature Detections\nYour runtime supports 92% of ECMAScript 6\n=========================================\n```\n\n### package.json 中配置版本号\n\n1. '~': '~2.3.1',则更新'2.3.x'中最新的小版本,不会去更新'2.4.x'\n2. '^': '^2.2.2',则会去找'2.x.x'中最新的，不会去更新'3.x.x'\n\n### setTimeout\n\n```js\n// setTimeout的一道面试题\nfor (var i = 0; i < 5; i++) {\n  setTimeout(function() {\n    console.log(i)\n  }, 1000)\n} //5,5,5,5,5\n```\n\n为什么会输出 5,5,5,5,5，而不是 0,1,2,3,4，因为 setTimeout 在 for 循环中异步的执行，将输出打印的操作，队列在 for 循环执行完之后。\n\n### 删除 js 数组中的某个元素\n\n```js\nvar _arr = ['a', 'b', 'c', 'ALL']\nvar _str = _arr.join(',')\nvar _index = _str.indexOf('ALL') // 获取\"ALL\"的位置\n_arr.splice(_index, 1) // 去除该元素（会改变原数组）\nconsole.log(_arr) // [\"a\", \"b\", \"c\"]\n```\n","slug":"总结笔记20190104","published":1,"updated":"2019-07-23T08:58:17.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwe6002uygf0y24aej1c","content":"<h3 id=\"lodash-函数\"><a href=\"#lodash-函数\" class=\"headerlink\" title=\"lodash 函数\"></a>lodash 函数</h3><ul>\n<li>_.camelCase([string=’’])：转换字符串为 驼峰写法(小驼峰)</li>\n<li>_.isNil(value)：检查 value 是否是 null 或者 undefined。</li>\n<li>_.size()：返回集合的长度或对象中可枚举属性的个数。</li>\n<li>_.isPlainObject(): 检查是否是普通对象。 也就是说该对象由 Object 构造函数创建，或者 [[Prototype]] 为 null</li>\n<li>_.pick(object, *keys) 返回一个只有列入挑选 key 属性的对象</li>\n<li>_.omit(object, [props]) 反向版的 pick，忽略[props]，返回之外的属性</li>\n<li>_.identity(value) stooge === _.identity(stooge); // true 返回本身</li>\n<li>_.rest(arguments, 0): ( 默认从 1 位开始),返回 0 位之后的数组</li>\n</ul>\n<h3 id=\"node-全局对象\"><a href=\"#node-全局对象\" class=\"headerlink\" title=\"node 全局对象\"></a>node 全局对象</h3><ul>\n<li>process.cwd()获得当前执行 node 命令时候的文件夹目录名</li>\n<li>process.execPath 属性，返回启动 Node.js 进程的可执行文件所在的绝对路径<code>/usr/local/bin/node</code></li>\n<li><p>process.argv 属性返回一个数组,数组包含了启动 Node.js 进程时的命令行参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node process-args.js one two=three four</span><br><span class=\"line\">/**</span><br><span class=\"line\">    0: /usr/local/bin/node</span><br><span class=\"line\">    1: /Users/mjr/work/node/process-args.js</span><br><span class=\"line\">    2: one</span><br><span class=\"line\">    3: two=three</span><br><span class=\"line\">    4: four</span><br><span class=\"line\">**/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>__dirname 获得当前执行文件所在目录的完整目录名</p>\n</li>\n<li>__filename 获得当前执行文件的带有完整绝对路径的文件名</li>\n</ul>\n<h3 id=\"Javascript-相关\"><a href=\"#Javascript-相关\" class=\"headerlink\" title=\"Javascript 相关\"></a>Javascript 相关</h3><ul>\n<li><p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.jianshu.com/p/849b0ae36b36 不可用于高精度运算，金钱运算</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1.335</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.toFixed(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// IE      1.34</span></span><br><span class=\"line\"><span class=\"comment\">//chorme   1.33</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript 按位取反运算符 (~)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Javascript 按位取反运算符 (~) ，对一个表达式执行位非（求非）运算。</span><br><span class=\"line\">// 就来看看~1的计算步骤：</span><br><span class=\"line\">// 将1(这里叫：原码)转二进制 ＝ 00000001 按位取反 ＝ 11111110 发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001 末位加1取其补码 ＝ 10000010 转换回十进制 ＝ -2</span><br><span class=\"line\">var str = &apos;123456&apos;</span><br><span class=\"line\">// ~-1 === 0</span><br><span class=\"line\">if(~str.indexOf(0))&#123;</span><br><span class=\"line\">  console.log(&apos;str包含0&apos;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&apos;str不包含0&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>面试题实现<code>(a==1 &amp;&amp; a==2 &amp;&amp; a==3) === true</code> 双等于号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = &#123; value : 0 &#125;;</span><br><span class=\"line\">a.valueOf = function() &#123;</span><br><span class=\"line\">    return this.value += 1;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a==1 &amp;&amp; a==2 &amp;&amp; a==3); //true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>面试题实现<code>(a===1 &amp;&amp; a===2 &amp;&amp; a===3) === true</code> 全等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// window.value</span><br><span class=\"line\">var value = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重写get取值方式</span><br><span class=\"line\">Object.defineProperty(window, &apos;a&apos;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">        return this.value += 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a===1 &amp;&amp; a===2 &amp;&amp; a===3) // true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 es6 函数 reduce，并行执行 promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> bizs.reduce(<span class=\"function\">(<span class=\"params\">pro, biz</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pro.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.copySingleWithObserve(biz))</span><br><span class=\"line\">&#125;, <span class=\"built_in\">Promise</span>.resolve())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.create(null) 与 {} 区别</p>\n<ul>\n<li>区别<ol>\n<li>Object.create(null)不会继承 Object 原型上的任何东西 如没有继承方法 toString(){}创建的新对象会继承所有 Object 的属性</li>\n<li>因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等</li>\n</ol>\n</li>\n<li>为什么用 Object.create(null)<ol>\n<li>因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等</li>\n<li>for in 循环的时候不会再遍历原型链上的属性 ,使用 create(null)就不会再对属性进行检查了,也可以使用 Object.keys[]</li>\n</ol>\n</li>\n<li>什么时候用 Object.create(null)<ol>\n<li>你需要一个非常干净且高度可定制的对象当做数据字典的时候,比如 serverAPI 里的一些变量</li>\n<li>减少 hasOwnProperty 造成的性能损失</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"require-和-import\"><a href=\"#require-和-import\" class=\"headerlink\" title=\"require 和 import\"></a>require 和 import</h3><ol>\n<li><p>require</p>\n<ul>\n<li>commonJS（适用于服务端，同步加载）<ol>\n<li>运行时加载</li>\n<li>拷贝到本页面</li>\n<li>全部引入</li>\n<li>模块写法分 exports 和 module.exports。</li>\n</ol>\n</li>\n<li><p>AMD (适用于客户端，异步加载)</p>\n<ul>\n<li>AMD 是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//require([module], callback);</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">    math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 模块写法 dependencies依赖模块</span></span><br><span class=\"line\">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>CMD</p>\n<ul>\n<li>CMD 是”Common Module Definition”的缩写。类似于 requirejs，但是 seajs 是依赖就近，延迟执行，requirejs 是依赖前置，提前执行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>import</p>\n<blockquote>\n<p>推荐使用 ES6 的 import</p>\n</blockquote>\n<ul>\n<li>编译时加载</li>\n<li>只引用定义</li>\n<li>按需加载</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"NodeJS-查看-ES6-支持率\"><a href=\"#NodeJS-查看-ES6-支持率\" class=\"headerlink\" title=\"NodeJS 查看 ES6 支持率\"></a>NodeJS 查看 ES6 支持率</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nodejs 8.0以上支持原生es6方法</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v10.13.</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g es-checker</span><br><span class=\"line\">// 安装完毕，运行</span><br><span class=\"line\">es-checke</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看当前版本es6原生支持率92%</span><br><span class=\"line\">=========================================</span><br><span class=\"line\">Passes 39 feature Detections</span><br><span class=\"line\">Your runtime supports 92% of ECMAScript 6</span><br><span class=\"line\">=========================================</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json-中配置版本号\"><a href=\"#package-json-中配置版本号\" class=\"headerlink\" title=\"package.json 中配置版本号\"></a>package.json 中配置版本号</h3><ol>\n<li>‘~’: ‘~2.3.1’,则更新’2.3.x’中最新的小版本,不会去更新’2.4.x’</li>\n<li>‘^’: ‘^2.2.2’,则会去找’2.x.x’中最新的，不会去更新’3.x.x’</li>\n</ol>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setTimeout的一道面试题</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; <span class=\"comment\">//5,5,5,5,5</span></span><br></pre></td></tr></table></figure>\n<p>为什么会输出 5,5,5,5,5，而不是 0,1,2,3,4，因为 setTimeout 在 for 循环中异步的执行，将输出打印的操作，队列在 for 循环执行完之后。</p>\n<h3 id=\"删除-js-数组中的某个元素\"><a href=\"#删除-js-数组中的某个元素\" class=\"headerlink\" title=\"删除 js 数组中的某个元素\"></a>删除 js 数组中的某个元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'ALL'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> _str = _arr.join(<span class=\"string\">','</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> _index = _str.indexOf(<span class=\"string\">'ALL'</span>) <span class=\"comment\">// 获取\"ALL\"的位置</span></span><br><span class=\"line\">_arr.splice(_index, <span class=\"number\">1</span>) <span class=\"comment\">// 去除该元素（会改变原数组）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_arr) <span class=\"comment\">// [\"a\", \"b\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"lodash-函数\"><a href=\"#lodash-函数\" class=\"headerlink\" title=\"lodash 函数\"></a>lodash 函数</h3><ul>\n<li>_.camelCase([string=’’])：转换字符串为 驼峰写法(小驼峰)</li>\n<li>_.isNil(value)：检查 value 是否是 null 或者 undefined。</li>\n<li>_.size()：返回集合的长度或对象中可枚举属性的个数。</li>\n<li>_.isPlainObject(): 检查是否是普通对象。 也就是说该对象由 Object 构造函数创建，或者 [[Prototype]] 为 null</li>\n<li>_.pick(object, *keys) 返回一个只有列入挑选 key 属性的对象</li>\n<li>_.omit(object, [props]) 反向版的 pick，忽略[props]，返回之外的属性</li>\n<li>_.identity(value) stooge === _.identity(stooge); // true 返回本身</li>\n<li>_.rest(arguments, 0): ( 默认从 1 位开始),返回 0 位之后的数组</li>\n</ul>\n<h3 id=\"node-全局对象\"><a href=\"#node-全局对象\" class=\"headerlink\" title=\"node 全局对象\"></a>node 全局对象</h3><ul>\n<li>process.cwd()获得当前执行 node 命令时候的文件夹目录名</li>\n<li>process.execPath 属性，返回启动 Node.js 进程的可执行文件所在的绝对路径<code>/usr/local/bin/node</code></li>\n<li><p>process.argv 属性返回一个数组,数组包含了启动 Node.js 进程时的命令行参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node process-args.js one two=three four</span><br><span class=\"line\">/**</span><br><span class=\"line\">    0: /usr/local/bin/node</span><br><span class=\"line\">    1: /Users/mjr/work/node/process-args.js</span><br><span class=\"line\">    2: one</span><br><span class=\"line\">    3: two=three</span><br><span class=\"line\">    4: four</span><br><span class=\"line\">**/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>__dirname 获得当前执行文件所在目录的完整目录名</p>\n</li>\n<li>__filename 获得当前执行文件的带有完整绝对路径的文件名</li>\n</ul>\n<h3 id=\"Javascript-相关\"><a href=\"#Javascript-相关\" class=\"headerlink\" title=\"Javascript 相关\"></a>Javascript 相关</h3><ul>\n<li><p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://www.jianshu.com/p/849b0ae36b36 不可用于高精度运算，金钱运算</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1.335</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.toFixed(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"comment\">// IE      1.34</span></span><br><span class=\"line\"><span class=\"comment\">//chorme   1.33</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript 按位取反运算符 (~)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Javascript 按位取反运算符 (~) ，对一个表达式执行位非（求非）运算。</span><br><span class=\"line\">// 就来看看~1的计算步骤：</span><br><span class=\"line\">// 将1(这里叫：原码)转二进制 ＝ 00000001 按位取反 ＝ 11111110 发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001 末位加1取其补码 ＝ 10000010 转换回十进制 ＝ -2</span><br><span class=\"line\">var str = &apos;123456&apos;</span><br><span class=\"line\">// ~-1 === 0</span><br><span class=\"line\">if(~str.indexOf(0))&#123;</span><br><span class=\"line\">  console.log(&apos;str包含0&apos;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&apos;str不包含0&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>面试题实现<code>(a==1 &amp;&amp; a==2 &amp;&amp; a==3) === true</code> 双等于号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = &#123; value : 0 &#125;;</span><br><span class=\"line\">a.valueOf = function() &#123;</span><br><span class=\"line\">    return this.value += 1;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a==1 &amp;&amp; a==2 &amp;&amp; a==3); //true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>面试题实现<code>(a===1 &amp;&amp; a===2 &amp;&amp; a===3) === true</code> 全等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// window.value</span><br><span class=\"line\">var value = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重写get取值方式</span><br><span class=\"line\">Object.defineProperty(window, &apos;a&apos;, &#123;</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">        return this.value += 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a===1 &amp;&amp; a===2 &amp;&amp; a===3) // true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>利用 es6 函数 reduce，并行执行 promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> bizs.reduce(<span class=\"function\">(<span class=\"params\">pro, biz</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pro.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.copySingleWithObserve(biz))</span><br><span class=\"line\">&#125;, <span class=\"built_in\">Promise</span>.resolve())</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Object.create(null) 与 {} 区别</p>\n<ul>\n<li>区别<ol>\n<li>Object.create(null)不会继承 Object 原型上的任何东西 如没有继承方法 toString(){}创建的新对象会继承所有 Object 的属性</li>\n<li>因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等</li>\n</ol>\n</li>\n<li>为什么用 Object.create(null)<ol>\n<li>因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等</li>\n<li>for in 循环的时候不会再遍历原型链上的属性 ,使用 create(null)就不会再对属性进行检查了,也可以使用 Object.keys[]</li>\n</ol>\n</li>\n<li>什么时候用 Object.create(null)<ol>\n<li>你需要一个非常干净且高度可定制的对象当做数据字典的时候,比如 serverAPI 里的一些变量</li>\n<li>减少 hasOwnProperty 造成的性能损失</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"require-和-import\"><a href=\"#require-和-import\" class=\"headerlink\" title=\"require 和 import\"></a>require 和 import</h3><ol>\n<li><p>require</p>\n<ul>\n<li>commonJS（适用于服务端，同步加载）<ol>\n<li>运行时加载</li>\n<li>拷贝到本页面</li>\n<li>全部引入</li>\n<li>模块写法分 exports 和 module.exports。</li>\n</ol>\n</li>\n<li><p>AMD (适用于客户端，异步加载)</p>\n<ul>\n<li>AMD 是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//require([module], callback);</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">    math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 模块写法 dependencies依赖模块</span></span><br><span class=\"line\">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>CMD</p>\n<ul>\n<li>CMD 是”Common Module Definition”的缩写。类似于 requirejs，但是 seajs 是依赖就近，延迟执行，requirejs 是依赖前置，提前执行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>import</p>\n<blockquote>\n<p>推荐使用 ES6 的 import</p>\n</blockquote>\n<ul>\n<li>编译时加载</li>\n<li>只引用定义</li>\n<li>按需加载</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"NodeJS-查看-ES6-支持率\"><a href=\"#NodeJS-查看-ES6-支持率\" class=\"headerlink\" title=\"NodeJS 查看 ES6 支持率\"></a>NodeJS 查看 ES6 支持率</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nodejs 8.0以上支持原生es6方法</span><br><span class=\"line\">$ node -v</span><br><span class=\"line\">v10.13.</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g es-checker</span><br><span class=\"line\">// 安装完毕，运行</span><br><span class=\"line\">es-checke</span><br><span class=\"line\"></span><br><span class=\"line\">// 查看当前版本es6原生支持率92%</span><br><span class=\"line\">=========================================</span><br><span class=\"line\">Passes 39 feature Detections</span><br><span class=\"line\">Your runtime supports 92% of ECMAScript 6</span><br><span class=\"line\">=========================================</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json-中配置版本号\"><a href=\"#package-json-中配置版本号\" class=\"headerlink\" title=\"package.json 中配置版本号\"></a>package.json 中配置版本号</h3><ol>\n<li>‘~’: ‘~2.3.1’,则更新’2.3.x’中最新的小版本,不会去更新’2.4.x’</li>\n<li>‘^’: ‘^2.2.2’,则会去找’2.x.x’中最新的，不会去更新’3.x.x’</li>\n</ol>\n<h3 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout\"></a>setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setTimeout的一道面试题</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125; <span class=\"comment\">//5,5,5,5,5</span></span><br></pre></td></tr></table></figure>\n<p>为什么会输出 5,5,5,5,5，而不是 0,1,2,3,4，因为 setTimeout 在 for 循环中异步的执行，将输出打印的操作，队列在 for 循环执行完之后。</p>\n<h3 id=\"删除-js-数组中的某个元素\"><a href=\"#删除-js-数组中的某个元素\" class=\"headerlink\" title=\"删除 js 数组中的某个元素\"></a>删除 js 数组中的某个元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'ALL'</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> _str = _arr.join(<span class=\"string\">','</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> _index = _str.indexOf(<span class=\"string\">'ALL'</span>) <span class=\"comment\">// 获取\"ALL\"的位置</span></span><br><span class=\"line\">_arr.splice(_index, <span class=\"number\">1</span>) <span class=\"comment\">// 去除该元素（会改变原数组）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(_arr) <span class=\"comment\">// [\"a\", \"b\", \"c\"]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"无重复字符的最长子串","date":"2018-10-17T15:22:53.000Z","_content":"\n```javascript\n/*\n *  无重复字符的最长子串\n *  leetcode 算法题3\n */\n\n// 解法一\nvar map = {}\nvar head = 0\nvar i = 0\nvar max = 0\nfor (i; i < s.length; i++) {\n  if (map[s[i]] >= head) {\n    head = map[s[i]] + 1\n  }\n  map[s[i]] = i\n  max = max > i - head + 1 ? max : i - head + 1\n}\nreturn max\n\n// 解法二\nconst map = {}\nlet left = 0\nlet max = s.split('').reduce((max, v, i) => {\n  /*\n   * map[v] 初始为underfined，表明s[i]还没出现过，\n   * 一旦map[v]有值了，且大于left，就将left的值设为map[v]后一位\n   */\n  left = map[v] >= left ? map[v] + 1 : left\n  map[v] = i\n  return Math.max(max, i - left + 1)\n}, 0)\nconsole.log(max)\n```\n","source":"_posts/无重复字符的最长子串.md","raw":"---\ntitle: 无重复字符的最长子串\ndate: 2018-10-17 23:22:53\ntags:\n  - javascript\ncategories:\n  - LeetCode\n  - Code\n---\n\n```javascript\n/*\n *  无重复字符的最长子串\n *  leetcode 算法题3\n */\n\n// 解法一\nvar map = {}\nvar head = 0\nvar i = 0\nvar max = 0\nfor (i; i < s.length; i++) {\n  if (map[s[i]] >= head) {\n    head = map[s[i]] + 1\n  }\n  map[s[i]] = i\n  max = max > i - head + 1 ? max : i - head + 1\n}\nreturn max\n\n// 解法二\nconst map = {}\nlet left = 0\nlet max = s.split('').reduce((max, v, i) => {\n  /*\n   * map[v] 初始为underfined，表明s[i]还没出现过，\n   * 一旦map[v]有值了，且大于left，就将left的值设为map[v]后一位\n   */\n  left = map[v] >= left ? map[v] + 1 : left\n  map[v] = i\n  return Math.max(max, i - left + 1)\n}, 0)\nconsole.log(max)\n```\n","slug":"无重复字符的最长子串","published":1,"updated":"2019-07-23T08:58:17.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwe9002zygf0aljj6tnp","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  无重复字符的最长子串</span></span><br><span class=\"line\"><span class=\"comment\"> *  leetcode 算法题3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (map[s[i]] &gt;= head) &#123;</span><br><span class=\"line\">    head = map[s[i]] + <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map[s[i]] = i</span><br><span class=\"line\">  max = max &gt; i - head + <span class=\"number\">1</span> ? max : i - head + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> max</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> max = s.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">max, v, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * map[v] 初始为underfined，表明s[i]还没出现过，</span></span><br><span class=\"line\"><span class=\"comment\">   * 一旦map[v]有值了，且大于left，就将left的值设为map[v]后一位</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  left = map[v] &gt;= left ? map[v] + <span class=\"number\">1</span> : left</span><br><span class=\"line\">  map[v] = i</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(max, i - left + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> *  无重复字符的最长子串</span></span><br><span class=\"line\"><span class=\"comment\"> *  leetcode 算法题3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法一</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> head = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (map[s[i]] &gt;= head) &#123;</span><br><span class=\"line\">    head = map[s[i]] + <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map[s[i]] = i</span><br><span class=\"line\">  max = max &gt; i - head + <span class=\"number\">1</span> ? max : i - head + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> max</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解法二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> max = s.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">max, v, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * map[v] 初始为underfined，表明s[i]还没出现过，</span></span><br><span class=\"line\"><span class=\"comment\">   * 一旦map[v]有值了，且大于left，就将left的值设为map[v]后一位</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  left = map[v] &gt;= left ? map[v] + <span class=\"number\">1</span> : left</span><br><span class=\"line\">  map[v] = i</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(max, i - left + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max)</span><br></pre></td></tr></table></figure>\n"},{"title":"JavaScript深拷贝","date":"2018-10-16T16:00:00.000Z","_content":"\n1. slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝，对于对象数组的操作，还是浅拷贝\n\n<!--more-->\n\n2. JSON 对象的 parse 和 stringify （对象中不含有函数的话。JSON 解析反解析就行了,对于有函数属性的话，不起作用，会直接去除 function）\n3. `$.extend( [deep]`, `target`, `object1 [, objectN] )` jquery 的方法 `extend b=$.extend(true,[],a)`;\n4. 递归复制\n\n5. ```js\n   let d = JSON.parse(JSON.stringify(a)) //深复制包含子对象\n   let c = { ...a } //拷贝一层但不包含子对象\n   b = a //浅拷贝\n   ```\n\n6. ```js\n   // 基本类型 是深拷贝\n   var a = 1\n   var b = a\n   a = 2\n   console.log(a, b) // 2, 1 ，a b指向不同的数据\n\n   // 引用类型指向同一份数据\n   var a = { c: 1 }\n   var b = a\n   a.c = 2\n   console.log(a.c, b.c) // 2, 2 全是 2，a b 指向同一份数据\n\n   //方法 1:通过递归\n   function deepCopy(o, c) {\n     var c = c || {}\n     for (var i in o) {\n       if (typeof o[i] === 'object') {\n         if (o[i].constructor === Array) {\n           c[i] = []\n         } else {\n           c[i] = {}\n         }\n         deepCopy(c[i], o[i])\n       } else {\n         c[i] = o[i]\n       }\n       return c\n     }\n   }\n   //方法 2:通过 json 解析 function不可复制\n   var result = JSON.parse(JSON.stringify(test))\n   ```\n","source":"_posts/JavaScript深拷贝.md","raw":"---\ntitle: JavaScript深拷贝\ndate: 2018-10-17\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n1. slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝，对于对象数组的操作，还是浅拷贝\n\n<!--more-->\n\n2. JSON 对象的 parse 和 stringify （对象中不含有函数的话。JSON 解析反解析就行了,对于有函数属性的话，不起作用，会直接去除 function）\n3. `$.extend( [deep]`, `target`, `object1 [, objectN] )` jquery 的方法 `extend b=$.extend(true,[],a)`;\n4. 递归复制\n\n5. ```js\n   let d = JSON.parse(JSON.stringify(a)) //深复制包含子对象\n   let c = { ...a } //拷贝一层但不包含子对象\n   b = a //浅拷贝\n   ```\n\n6. ```js\n   // 基本类型 是深拷贝\n   var a = 1\n   var b = a\n   a = 2\n   console.log(a, b) // 2, 1 ，a b指向不同的数据\n\n   // 引用类型指向同一份数据\n   var a = { c: 1 }\n   var b = a\n   a.c = 2\n   console.log(a.c, b.c) // 2, 2 全是 2，a b 指向同一份数据\n\n   //方法 1:通过递归\n   function deepCopy(o, c) {\n     var c = c || {}\n     for (var i in o) {\n       if (typeof o[i] === 'object') {\n         if (o[i].constructor === Array) {\n           c[i] = []\n         } else {\n           c[i] = {}\n         }\n         deepCopy(c[i], o[i])\n       } else {\n         c[i] = o[i]\n       }\n       return c\n     }\n   }\n   //方法 2:通过 json 解析 function不可复制\n   var result = JSON.parse(JSON.stringify(test))\n   ```\n","slug":"JavaScript深拷贝","published":1,"updated":"2019-07-23T08:58:17.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazweb0032ygf0kdh4lroq","content":"<ol>\n<li>slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝，对于对象数组的操作，还是浅拷贝</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>JSON 对象的 parse 和 stringify （对象中不含有函数的话。JSON 解析反解析就行了,对于有函数属性的话，不起作用，会直接去除 function）</li>\n<li><code>$.extend( [deep]</code>, <code>target</code>, <code>object1 [, objectN] )</code> jquery 的方法 <code>extend b=$.extend(true,[],a)</code>;</li>\n<li><p>递归复制</p>\n</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a)) <span class=\"comment\">//深复制包含子对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123; ...a &#125; <span class=\"comment\">//拷贝一层但不包含子对象</span></span><br><span class=\"line\">b = a <span class=\"comment\">//浅拷贝</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本类型 是深拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">// 2, 1 ，a b指向不同的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用类型指向同一份数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">c</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">a.c = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.c, b.c) <span class=\"comment\">// 2, 2 全是 2，a b 指向同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法 1:通过递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">o, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = c || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> o[i] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o[i].constructor === <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        c[i] = []</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        c[i] = &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      deepCopy(c[i], o[i])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      c[i] = o[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法 2:通过 json 解析 function不可复制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(test))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝，对于对象数组的操作，还是浅拷贝</li>\n</ol>","more":"<ol start=\"2\">\n<li>JSON 对象的 parse 和 stringify （对象中不含有函数的话。JSON 解析反解析就行了,对于有函数属性的话，不起作用，会直接去除 function）</li>\n<li><code>$.extend( [deep]</code>, <code>target</code>, <code>object1 [, objectN] )</code> jquery 的方法 <code>extend b=$.extend(true,[],a)</code>;</li>\n<li><p>递归复制</p>\n</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> d = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a)) <span class=\"comment\">//深复制包含子对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123; ...a &#125; <span class=\"comment\">//拷贝一层但不包含子对象</span></span><br><span class=\"line\">b = a <span class=\"comment\">//浅拷贝</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本类型 是深拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b) <span class=\"comment\">// 2, 1 ，a b指向不同的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用类型指向同一份数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">c</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a</span><br><span class=\"line\">a.c = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.c, b.c) <span class=\"comment\">// 2, 2 全是 2，a b 指向同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法 1:通过递归</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">o, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> c = c || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> o[i] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (o[i].constructor === <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        c[i] = []</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        c[i] = &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      deepCopy(c[i], o[i])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      c[i] = o[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//方法 2:通过 json 解析 function不可复制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(test))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"获取首字符拼音首字母","date":"2018-07-19T16:00:00.000Z","_content":"\n```php\n/**\n * 获取首字符拼音首字母\n *\n * 判断是否为汉字 !preg_match(\"/^[x{4e00}-x{9fa5}]+$/u\", $s0)\n * 已知 “泸”，无法识别\n */\nfunction getFirstPing($str)\n{\n    $s0 = mb_substr($str, 0, 1, \"utf-8\");\n    $fchar = ord($s0{0});\n    if ($fchar >= ord(\"A\") and $fchar <= ord(\"z\")) return strtoupper($s0{0});\n    $s1 = iconv(\"UTF-8\", \"gb2312\", $s0);\n    $s2 = iconv(\"gb2312\", \"UTF-8\", $s1);\n    if ($s2 == $s0) {\n        $s = $s1;\n    } else {\n        $s = $s0;\n    }\n    $asc = ord($s{0}) * 256 + ord($s{1}) - 65536;\n    if ($asc >= -20319 && $asc <= -20284) return \"A\";\n    if ($asc >= -20283 && $asc <= -19776) return \"B\";\n    if ($asc >= -19775 && $asc <= -19219) return \"C\";\n    if ($asc >= -19218 && $asc <= -18711) return \"D\";\n    if ($asc >= -18710 && $asc <= -18527) return \"E\";\n    if ($asc >= -18526 && $asc <= -18240) return \"F\";\n    if ($asc >= -18239 && $asc <= -17923) return \"G\";\n    if ($asc >= -17922 && $asc <= -17418) return \"H\";\n    if ($asc >= -17922 && $asc <= -17418) return \"I\";\n    if ($asc >= -17417 && $asc <= -16475) return \"J\";\n    if ($asc >= -16474 && $asc <= -16213) return \"K\";\n    if ($asc >= -16212 && $asc <= -15641) return \"L\";\n    if ($asc >= -15640 && $asc <= -15166) return \"M\";\n    if ($asc >= -15165 && $asc <= -14923) return \"N\";\n    if ($asc >= -14922 && $asc <= -14915) return \"O\";\n    if ($asc >= -14914 && $asc <= -14631) return \"P\";\n    if ($asc >= -14630 && $asc <= -14150) return \"Q\";\n    if ($asc >= -14149 && $asc <= -14091) return \"R\";\n    if ($asc >= -14090 && $asc <= -13319) return \"S\";\n    if ($asc >= -13318 && $asc <= -12839) return \"T\";\n    if ($asc >= -12838 && $asc <= -12557) return \"W\";\n    if ($asc >= -12556 && $asc <= -11848) return \"X\";\n    if ($asc >= -11847 && $asc <= -11056) return \"Y\";\n    if ($asc >= -11055 && $asc <= -10247) return \"Z\";\n    return $s0;\n}\n```\n","source":"_posts/获取首字符拼音首字母.md","raw":"---\ntitle: 获取首字符拼音首字母\ndate: 2018-07-20\ntags:\n  - PHP\ncategories:\n  - Code\n---\n\n```php\n/**\n * 获取首字符拼音首字母\n *\n * 判断是否为汉字 !preg_match(\"/^[x{4e00}-x{9fa5}]+$/u\", $s0)\n * 已知 “泸”，无法识别\n */\nfunction getFirstPing($str)\n{\n    $s0 = mb_substr($str, 0, 1, \"utf-8\");\n    $fchar = ord($s0{0});\n    if ($fchar >= ord(\"A\") and $fchar <= ord(\"z\")) return strtoupper($s0{0});\n    $s1 = iconv(\"UTF-8\", \"gb2312\", $s0);\n    $s2 = iconv(\"gb2312\", \"UTF-8\", $s1);\n    if ($s2 == $s0) {\n        $s = $s1;\n    } else {\n        $s = $s0;\n    }\n    $asc = ord($s{0}) * 256 + ord($s{1}) - 65536;\n    if ($asc >= -20319 && $asc <= -20284) return \"A\";\n    if ($asc >= -20283 && $asc <= -19776) return \"B\";\n    if ($asc >= -19775 && $asc <= -19219) return \"C\";\n    if ($asc >= -19218 && $asc <= -18711) return \"D\";\n    if ($asc >= -18710 && $asc <= -18527) return \"E\";\n    if ($asc >= -18526 && $asc <= -18240) return \"F\";\n    if ($asc >= -18239 && $asc <= -17923) return \"G\";\n    if ($asc >= -17922 && $asc <= -17418) return \"H\";\n    if ($asc >= -17922 && $asc <= -17418) return \"I\";\n    if ($asc >= -17417 && $asc <= -16475) return \"J\";\n    if ($asc >= -16474 && $asc <= -16213) return \"K\";\n    if ($asc >= -16212 && $asc <= -15641) return \"L\";\n    if ($asc >= -15640 && $asc <= -15166) return \"M\";\n    if ($asc >= -15165 && $asc <= -14923) return \"N\";\n    if ($asc >= -14922 && $asc <= -14915) return \"O\";\n    if ($asc >= -14914 && $asc <= -14631) return \"P\";\n    if ($asc >= -14630 && $asc <= -14150) return \"Q\";\n    if ($asc >= -14149 && $asc <= -14091) return \"R\";\n    if ($asc >= -14090 && $asc <= -13319) return \"S\";\n    if ($asc >= -13318 && $asc <= -12839) return \"T\";\n    if ($asc >= -12838 && $asc <= -12557) return \"W\";\n    if ($asc >= -12556 && $asc <= -11848) return \"X\";\n    if ($asc >= -11847 && $asc <= -11056) return \"Y\";\n    if ($asc >= -11055 && $asc <= -10247) return \"Z\";\n    return $s0;\n}\n```\n","slug":"获取首字符拼音首字母","published":1,"updated":"2019-07-23T08:58:17.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwee0035ygf0x5ale4zm","content":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取首字符拼音首字母</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断是否为汉字 !preg_match(\"/^[x&#123;4e00&#125;-x&#123;9fa5&#125;]+$/u\", $s0)</span></span><br><span class=\"line\"><span class=\"comment\"> * 已知 “泸”，无法识别</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFirstPing</span><span class=\"params\">($str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $s0 = mb_substr($str, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">    $fchar = ord($s0&#123;<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($fchar &gt;= ord(<span class=\"string\">\"A\"</span>) <span class=\"keyword\">and</span> $fchar &lt;= ord(<span class=\"string\">\"z\"</span>)) <span class=\"keyword\">return</span> strtoupper($s0&#123;<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    $s1 = iconv(<span class=\"string\">\"UTF-8\"</span>, <span class=\"string\">\"gb2312\"</span>, $s0);</span><br><span class=\"line\">    $s2 = iconv(<span class=\"string\">\"gb2312\"</span>, <span class=\"string\">\"UTF-8\"</span>, $s1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($s2 == $s0) &#123;</span><br><span class=\"line\">        $s = $s1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $s = $s0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $asc = ord($s&#123;<span class=\"number\">0</span>&#125;) * <span class=\"number\">256</span> + ord($s&#123;<span class=\"number\">1</span>&#125;) - <span class=\"number\">65536</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-20319</span> &amp;&amp; $asc &lt;= <span class=\"number\">-20284</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-20283</span> &amp;&amp; $asc &lt;= <span class=\"number\">-19776</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-19775</span> &amp;&amp; $asc &lt;= <span class=\"number\">-19219</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"C\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-19218</span> &amp;&amp; $asc &lt;= <span class=\"number\">-18711</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"D\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-18710</span> &amp;&amp; $asc &lt;= <span class=\"number\">-18527</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"E\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-18526</span> &amp;&amp; $asc &lt;= <span class=\"number\">-18240</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"F\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-18239</span> &amp;&amp; $asc &lt;= <span class=\"number\">-17923</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"G\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-17922</span> &amp;&amp; $asc &lt;= <span class=\"number\">-17418</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"H\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-17922</span> &amp;&amp; $asc &lt;= <span class=\"number\">-17418</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"I\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-17417</span> &amp;&amp; $asc &lt;= <span class=\"number\">-16475</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"J\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-16474</span> &amp;&amp; $asc &lt;= <span class=\"number\">-16213</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"K\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-16212</span> &amp;&amp; $asc &lt;= <span class=\"number\">-15641</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"L\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-15640</span> &amp;&amp; $asc &lt;= <span class=\"number\">-15166</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"M\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-15165</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14923</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"N\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14922</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14915</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"O\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14914</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14631</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"P\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14630</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14150</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Q\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14149</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14091</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"R\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14090</span> &amp;&amp; $asc &lt;= <span class=\"number\">-13319</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"S\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-13318</span> &amp;&amp; $asc &lt;= <span class=\"number\">-12839</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"T\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-12838</span> &amp;&amp; $asc &lt;= <span class=\"number\">-12557</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"W\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-12556</span> &amp;&amp; $asc &lt;= <span class=\"number\">-11848</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"X\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-11847</span> &amp;&amp; $asc &lt;= <span class=\"number\">-11056</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Y\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-11055</span> &amp;&amp; $asc &lt;= <span class=\"number\">-10247</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Z\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $s0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取首字符拼音首字母</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断是否为汉字 !preg_match(\"/^[x&#123;4e00&#125;-x&#123;9fa5&#125;]+$/u\", $s0)</span></span><br><span class=\"line\"><span class=\"comment\"> * 已知 “泸”，无法识别</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFirstPing</span><span class=\"params\">($str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $s0 = mb_substr($str, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">    $fchar = ord($s0&#123;<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($fchar &gt;= ord(<span class=\"string\">\"A\"</span>) <span class=\"keyword\">and</span> $fchar &lt;= ord(<span class=\"string\">\"z\"</span>)) <span class=\"keyword\">return</span> strtoupper($s0&#123;<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    $s1 = iconv(<span class=\"string\">\"UTF-8\"</span>, <span class=\"string\">\"gb2312\"</span>, $s0);</span><br><span class=\"line\">    $s2 = iconv(<span class=\"string\">\"gb2312\"</span>, <span class=\"string\">\"UTF-8\"</span>, $s1);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($s2 == $s0) &#123;</span><br><span class=\"line\">        $s = $s1;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $s = $s0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $asc = ord($s&#123;<span class=\"number\">0</span>&#125;) * <span class=\"number\">256</span> + ord($s&#123;<span class=\"number\">1</span>&#125;) - <span class=\"number\">65536</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-20319</span> &amp;&amp; $asc &lt;= <span class=\"number\">-20284</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-20283</span> &amp;&amp; $asc &lt;= <span class=\"number\">-19776</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-19775</span> &amp;&amp; $asc &lt;= <span class=\"number\">-19219</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"C\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-19218</span> &amp;&amp; $asc &lt;= <span class=\"number\">-18711</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"D\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-18710</span> &amp;&amp; $asc &lt;= <span class=\"number\">-18527</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"E\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-18526</span> &amp;&amp; $asc &lt;= <span class=\"number\">-18240</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"F\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-18239</span> &amp;&amp; $asc &lt;= <span class=\"number\">-17923</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"G\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-17922</span> &amp;&amp; $asc &lt;= <span class=\"number\">-17418</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"H\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-17922</span> &amp;&amp; $asc &lt;= <span class=\"number\">-17418</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"I\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-17417</span> &amp;&amp; $asc &lt;= <span class=\"number\">-16475</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"J\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-16474</span> &amp;&amp; $asc &lt;= <span class=\"number\">-16213</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"K\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-16212</span> &amp;&amp; $asc &lt;= <span class=\"number\">-15641</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"L\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-15640</span> &amp;&amp; $asc &lt;= <span class=\"number\">-15166</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"M\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-15165</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14923</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"N\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14922</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14915</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"O\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14914</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14631</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"P\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14630</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14150</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Q\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14149</span> &amp;&amp; $asc &lt;= <span class=\"number\">-14091</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"R\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-14090</span> &amp;&amp; $asc &lt;= <span class=\"number\">-13319</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"S\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-13318</span> &amp;&amp; $asc &lt;= <span class=\"number\">-12839</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"T\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-12838</span> &amp;&amp; $asc &lt;= <span class=\"number\">-12557</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"W\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-12556</span> &amp;&amp; $asc &lt;= <span class=\"number\">-11848</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"X\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-11847</span> &amp;&amp; $asc &lt;= <span class=\"number\">-11056</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Y\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($asc &gt;= <span class=\"number\">-11055</span> &amp;&amp; $asc &lt;= <span class=\"number\">-10247</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"Z\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $s0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"滚动置顶元素","date":"2019-01-29T16:00:00.000Z","_content":"\n### 首先设置父元素为相对定位\n\n```css\n.parent {\n  position: relative;\n  top: 10rem;\n}\n```\n\n### 设置一个 fixed 的 class\n\n```css\n.fixed {\n  position: fixed;\n  top: 2rem;\n}\n```\n\n### jqeury 伪代码\n\n```js\n$(document).ready(function() {\n  // 元素距离屏幕顶端的高度\n  var _offectTop = $('.introduce').offset().top\n\n  // 滚动事件\n  $(document).scroll(function() {\n    // 滚动距离document的top高度\n    var _scrollTop = $(document).scrollTop()\n\n    // 32 为距离顶部的流出的距离相当于2rem\n    if (_scrollTop >= _offectTop - 32) {\n      $('.introduce').addClass('fixed')\n    } else {\n      console.log(1)\n      $('.introduce').removeClass('fixed')\n    }\n  })\n})\n```\n\n### JS 原生代码实现\n\n```js\n/**\n * 目前将父元素设置margin-top，不设置相对定位，解决锚点bug\n * todo目前遇到BUG，点击锚点后，元素置顶了\n **/\nwindow.onload = function() {\n  /**\n   * 原生offsetTop取值为相对于父元素， jquery的offset().top是取的距离屏幕顶部的距离\n   * 所以这里取父元素的offestTop\n   **/\n  var _parentDom = document.getElementById('main-left')\n  var _offectTop = _parentDom.offsetTop\n\n  var _needTopDom = document.getElementById('introduce')\n\n  window.onscroll = function() {\n    /**\n     * 获取滚动距离document的高度\n     *\n     * 声明了<!DOCTYPE html>，使用document.documentElement.scrollTop\n     * 没有声明，使用document.body.scrollTop\n     **/\n    var _scrollTop =\n      document.body.scrollTop || document.documentElement.scrollTop\n\n    // 32为距离顶部的流出的距离相当于2rem\n    if (_scrollTop > _offectTop - 32) {\n      _needTopDom.classList.add('fixed')\n    } else {\n      _needTopDom.classList.remove('fixed')\n    }\n  }\n}\n```\n","source":"_posts/滚动置顶元素.md","raw":"---\ntitle: 滚动置顶元素\ndate: 2019-01-30 00:00:00\ntags:\n  - JavaScript\ncategories:\n  - Code\n---\n\n### 首先设置父元素为相对定位\n\n```css\n.parent {\n  position: relative;\n  top: 10rem;\n}\n```\n\n### 设置一个 fixed 的 class\n\n```css\n.fixed {\n  position: fixed;\n  top: 2rem;\n}\n```\n\n### jqeury 伪代码\n\n```js\n$(document).ready(function() {\n  // 元素距离屏幕顶端的高度\n  var _offectTop = $('.introduce').offset().top\n\n  // 滚动事件\n  $(document).scroll(function() {\n    // 滚动距离document的top高度\n    var _scrollTop = $(document).scrollTop()\n\n    // 32 为距离顶部的流出的距离相当于2rem\n    if (_scrollTop >= _offectTop - 32) {\n      $('.introduce').addClass('fixed')\n    } else {\n      console.log(1)\n      $('.introduce').removeClass('fixed')\n    }\n  })\n})\n```\n\n### JS 原生代码实现\n\n```js\n/**\n * 目前将父元素设置margin-top，不设置相对定位，解决锚点bug\n * todo目前遇到BUG，点击锚点后，元素置顶了\n **/\nwindow.onload = function() {\n  /**\n   * 原生offsetTop取值为相对于父元素， jquery的offset().top是取的距离屏幕顶部的距离\n   * 所以这里取父元素的offestTop\n   **/\n  var _parentDom = document.getElementById('main-left')\n  var _offectTop = _parentDom.offsetTop\n\n  var _needTopDom = document.getElementById('introduce')\n\n  window.onscroll = function() {\n    /**\n     * 获取滚动距离document的高度\n     *\n     * 声明了<!DOCTYPE html>，使用document.documentElement.scrollTop\n     * 没有声明，使用document.body.scrollTop\n     **/\n    var _scrollTop =\n      document.body.scrollTop || document.documentElement.scrollTop\n\n    // 32为距离顶部的流出的距离相当于2rem\n    if (_scrollTop > _offectTop - 32) {\n      _needTopDom.classList.add('fixed')\n    } else {\n      _needTopDom.classList.remove('fixed')\n    }\n  }\n}\n```\n","slug":"滚动置顶元素","published":1,"updated":"2019-07-23T08:58:17.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazweh003aygf01phszaem","content":"<h3 id=\"首先设置父元素为相对定位\"><a href=\"#首先设置父元素为相对定位\" class=\"headerlink\" title=\"首先设置父元素为相对定位\"></a>首先设置父元素为相对定位</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置一个-fixed-的-class\"><a href=\"#设置一个-fixed-的-class\" class=\"headerlink\" title=\"设置一个 fixed 的 class\"></a>设置一个 fixed 的 class</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fixed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jqeury-伪代码\"><a href=\"#jqeury-伪代码\" class=\"headerlink\" title=\"jqeury 伪代码\"></a>jqeury 伪代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 元素距离屏幕顶端的高度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _offectTop = $(<span class=\"string\">'.introduce'</span>).offset().top</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 滚动事件</span></span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 滚动距离document的top高度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _scrollTop = $(<span class=\"built_in\">document</span>).scrollTop()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 32 为距离顶部的流出的距离相当于2rem</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_scrollTop &gt;= _offectTop - <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">      $(<span class=\"string\">'.introduce'</span>).addClass(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">      $(<span class=\"string\">'.introduce'</span>).removeClass(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"JS-原生代码实现\"><a href=\"#JS-原生代码实现\" class=\"headerlink\" title=\"JS 原生代码实现\"></a>JS 原生代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目前将父元素设置margin-top，不设置相对定位，解决锚点bug</span></span><br><span class=\"line\"><span class=\"comment\"> * todo目前遇到BUG，点击锚点后，元素置顶了</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 原生offsetTop取值为相对于父元素， jquery的offset().top是取的距离屏幕顶部的距离</span></span><br><span class=\"line\"><span class=\"comment\">   * 所以这里取父元素的offestTop</span></span><br><span class=\"line\"><span class=\"comment\">   **/</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _parentDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'main-left'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _offectTop = _parentDom.offsetTop</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _needTopDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'introduce'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取滚动距离document的高度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 声明了&lt;!DOCTYPE html&gt;，使用document.documentElement.scrollTop</span></span><br><span class=\"line\"><span class=\"comment\">     * 没有声明，使用document.body.scrollTop</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _scrollTop =</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.scrollTop || <span class=\"built_in\">document</span>.documentElement.scrollTop</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 32为距离顶部的流出的距离相当于2rem</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_scrollTop &gt; _offectTop - <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">      _needTopDom.classList.add(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _needTopDom.classList.remove(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"首先设置父元素为相对定位\"><a href=\"#首先设置父元素为相对定位\" class=\"headerlink\" title=\"首先设置父元素为相对定位\"></a>首先设置父元素为相对定位</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置一个-fixed-的-class\"><a href=\"#设置一个-fixed-的-class\" class=\"headerlink\" title=\"设置一个 fixed 的 class\"></a>设置一个 fixed 的 class</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fixed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jqeury-伪代码\"><a href=\"#jqeury-伪代码\" class=\"headerlink\" title=\"jqeury 伪代码\"></a>jqeury 伪代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 元素距离屏幕顶端的高度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _offectTop = $(<span class=\"string\">'.introduce'</span>).offset().top</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 滚动事件</span></span><br><span class=\"line\">  $(<span class=\"built_in\">document</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 滚动距离document的top高度</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _scrollTop = $(<span class=\"built_in\">document</span>).scrollTop()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 32 为距离顶部的流出的距离相当于2rem</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_scrollTop &gt;= _offectTop - <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">      $(<span class=\"string\">'.introduce'</span>).addClass(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">      $(<span class=\"string\">'.introduce'</span>).removeClass(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"JS-原生代码实现\"><a href=\"#JS-原生代码实现\" class=\"headerlink\" title=\"JS 原生代码实现\"></a>JS 原生代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目前将父元素设置margin-top，不设置相对定位，解决锚点bug</span></span><br><span class=\"line\"><span class=\"comment\"> * todo目前遇到BUG，点击锚点后，元素置顶了</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 原生offsetTop取值为相对于父元素， jquery的offset().top是取的距离屏幕顶部的距离</span></span><br><span class=\"line\"><span class=\"comment\">   * 所以这里取父元素的offestTop</span></span><br><span class=\"line\"><span class=\"comment\">   **/</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _parentDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'main-left'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _offectTop = _parentDom.offsetTop</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _needTopDom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'introduce'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取滚动距离document的高度</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 声明了&lt;!DOCTYPE html&gt;，使用document.documentElement.scrollTop</span></span><br><span class=\"line\"><span class=\"comment\">     * 没有声明，使用document.body.scrollTop</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _scrollTop =</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.scrollTop || <span class=\"built_in\">document</span>.documentElement.scrollTop</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 32为距离顶部的流出的距离相当于2rem</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_scrollTop &gt; _offectTop - <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">      _needTopDom.classList.add(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _needTopDom.classList.remove(<span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"正向代理、反向代理","date":"2018-08-14T16:00:00.000Z","_content":"\n> github 博客地址：https://shixiaohu2206.github.io/\n\n### 正向代理\n\n- 一般情况下，若没有特别说明的代理技术，通常指的是正向代理\n- 正向代理(forward)是一个位于客户端【用户 A】和原始服务器(origin server)【服务器 B】之间的服务器【代理服务器 Z】，为了从原始服务器取得内容，用户 A 向代理服务器 Z 发送一个请求并指定目标(服务器 B)，然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。（抄的）\n- 自己的理解：用户想要访问原始服务器的内容，但是不能直接获取到，因为各种墙的缘故，但是中间的代理服务器可以访问的到，所以，用户就携带自己想要访问的地址（A 网址），先去访问代理服务器，代理服务器接受（A 网址），这时代理服务器再去访问（A 网址），获得到内容，返回给代理服务器，代理服务器再返回给用户。完成正向代理的一个流程。（翻墙就是正向代理）\n\n### 反向代理\n\n- 网上都在说什么正向代理与反向代理正好相反，这个相反在我看来只是相对的某一个点\n- 反向代理的用户客户端，不需要做任何设置，需要设置的是反向代理服务器。\n- 对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。\n- 自己的理解：用户访问（A 网址），A 网址的代理服务器接受到用户的请求，但是真实的资源不在该代理服务器上，该代理服务器携带用户请求去访问原始的服务器，获得到内容，返回给代理服务器，代理服务器再返回给用户。完成反向代理的一个流程。用户不知道（A 网址）其实不是原始服务器，资源不在（A 网址）上\n\n### 负载均衡\n\n- 负载均衡是在反向代理的基础上实现的。当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器 B 的时候，让不同的代理服务器 Z（x）去应答不同的用户，然后发送不同用户需要的资源。\n- 当然反向代理服务器像正向代理服务器一样拥有 CACHE 的作用，它可以缓存原始资源服务器 B 的资源，而不是每次都要向原始资源服务器 B 请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户 X 来自同一个网络，那么用户 X 访问反向代理服务器 X，就会得到很高质量的速度。这正是 CDN 技术的核心。\n\n### 借用阿笠的一张图\n\n[](http://http://img.blog.csdn.net/20171023163129273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQzMjI3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### Nginx 反向代理配置\n\n```\n#反向代理,需要配置在server外面\nupstream github.xiaohuaiqing.com {\n        server 119.29.9.63:4000;\n        keepalive 2000;\n    }\n\n\nserver\n    {\n        listen 80;\n        #listen [::]:80;\n        server_name github.xiaohuaiqing.com;\n        index index.html index.htm index.php default.html default.htm default.php;\n        include other.conf;\n        #error_page   404   /404.html;\n        include enable-php.conf;\n\n        #反向代理\n        location /\n        {\n            proxy_pass http://github.xiaohuaiqing.com;\n            proxy_set_header Host $host:$server_port;\n        }\n\n        #单独加个css、js配置\n        location ~ .*.(js|css)$\n        {\n            proxy_pass http://github.xiaohuaiqing.com;\n            proxy_set_header Host $host:$server_port;\n        }\n\n\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires      30d;\n        }\n\n        location ~ .*.(js|css)?$\n        {\n            expires      12h;\n        }\n\n        location ~ /.\n        {\n            deny all;\n        }\n\n        access_log  /home/wwwlogs/github.xiaohuaiqing.com.log;\n    }\n```\n","source":"_posts/正向代理、反向代理.md","raw":"---\ntitle: 正向代理、反向代理\ndate: 2018-08-15 00:00:00\ntags:\n  - 代理\ncategories:\n  - Code\n---\n\n> github 博客地址：https://shixiaohu2206.github.io/\n\n### 正向代理\n\n- 一般情况下，若没有特别说明的代理技术，通常指的是正向代理\n- 正向代理(forward)是一个位于客户端【用户 A】和原始服务器(origin server)【服务器 B】之间的服务器【代理服务器 Z】，为了从原始服务器取得内容，用户 A 向代理服务器 Z 发送一个请求并指定目标(服务器 B)，然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。（抄的）\n- 自己的理解：用户想要访问原始服务器的内容，但是不能直接获取到，因为各种墙的缘故，但是中间的代理服务器可以访问的到，所以，用户就携带自己想要访问的地址（A 网址），先去访问代理服务器，代理服务器接受（A 网址），这时代理服务器再去访问（A 网址），获得到内容，返回给代理服务器，代理服务器再返回给用户。完成正向代理的一个流程。（翻墙就是正向代理）\n\n### 反向代理\n\n- 网上都在说什么正向代理与反向代理正好相反，这个相反在我看来只是相对的某一个点\n- 反向代理的用户客户端，不需要做任何设置，需要设置的是反向代理服务器。\n- 对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。\n- 自己的理解：用户访问（A 网址），A 网址的代理服务器接受到用户的请求，但是真实的资源不在该代理服务器上，该代理服务器携带用户请求去访问原始的服务器，获得到内容，返回给代理服务器，代理服务器再返回给用户。完成反向代理的一个流程。用户不知道（A 网址）其实不是原始服务器，资源不在（A 网址）上\n\n### 负载均衡\n\n- 负载均衡是在反向代理的基础上实现的。当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器 B 的时候，让不同的代理服务器 Z（x）去应答不同的用户，然后发送不同用户需要的资源。\n- 当然反向代理服务器像正向代理服务器一样拥有 CACHE 的作用，它可以缓存原始资源服务器 B 的资源，而不是每次都要向原始资源服务器 B 请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户 X 来自同一个网络，那么用户 X 访问反向代理服务器 X，就会得到很高质量的速度。这正是 CDN 技术的核心。\n\n### 借用阿笠的一张图\n\n[](http://http://img.blog.csdn.net/20171023163129273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQzMjI3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### Nginx 反向代理配置\n\n```\n#反向代理,需要配置在server外面\nupstream github.xiaohuaiqing.com {\n        server 119.29.9.63:4000;\n        keepalive 2000;\n    }\n\n\nserver\n    {\n        listen 80;\n        #listen [::]:80;\n        server_name github.xiaohuaiqing.com;\n        index index.html index.htm index.php default.html default.htm default.php;\n        include other.conf;\n        #error_page   404   /404.html;\n        include enable-php.conf;\n\n        #反向代理\n        location /\n        {\n            proxy_pass http://github.xiaohuaiqing.com;\n            proxy_set_header Host $host:$server_port;\n        }\n\n        #单独加个css、js配置\n        location ~ .*.(js|css)$\n        {\n            proxy_pass http://github.xiaohuaiqing.com;\n            proxy_set_header Host $host:$server_port;\n        }\n\n\n        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n        {\n            expires      30d;\n        }\n\n        location ~ .*.(js|css)?$\n        {\n            expires      12h;\n        }\n\n        location ~ /.\n        {\n            deny all;\n        }\n\n        access_log  /home/wwwlogs/github.xiaohuaiqing.com.log;\n    }\n```\n","slug":"正向代理、反向代理","published":1,"updated":"2019-07-23T08:58:17.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwej003cygf02llddzcg","content":"<blockquote>\n<p>github 博客地址：<a href=\"https://shixiaohu2206.github.io/\" target=\"_blank\" rel=\"noopener\">https://shixiaohu2206.github.io/</a></p>\n</blockquote>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><ul>\n<li>一般情况下，若没有特别说明的代理技术，通常指的是正向代理</li>\n<li>正向代理(forward)是一个位于客户端【用户 A】和原始服务器(origin server)【服务器 B】之间的服务器【代理服务器 Z】，为了从原始服务器取得内容，用户 A 向代理服务器 Z 发送一个请求并指定目标(服务器 B)，然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。（抄的）</li>\n<li>自己的理解：用户想要访问原始服务器的内容，但是不能直接获取到，因为各种墙的缘故，但是中间的代理服务器可以访问的到，所以，用户就携带自己想要访问的地址（A 网址），先去访问代理服务器，代理服务器接受（A 网址），这时代理服务器再去访问（A 网址），获得到内容，返回给代理服务器，代理服务器再返回给用户。完成正向代理的一个流程。（翻墙就是正向代理）</li>\n</ul>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><ul>\n<li>网上都在说什么正向代理与反向代理正好相反，这个相反在我看来只是相对的某一个点</li>\n<li>反向代理的用户客户端，不需要做任何设置，需要设置的是反向代理服务器。</li>\n<li>对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</li>\n<li>自己的理解：用户访问（A 网址），A 网址的代理服务器接受到用户的请求，但是真实的资源不在该代理服务器上，该代理服务器携带用户请求去访问原始的服务器，获得到内容，返回给代理服务器，代理服务器再返回给用户。完成反向代理的一个流程。用户不知道（A 网址）其实不是原始服务器，资源不在（A 网址）上</li>\n</ul>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><ul>\n<li>负载均衡是在反向代理的基础上实现的。当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器 B 的时候，让不同的代理服务器 Z（x）去应答不同的用户，然后发送不同用户需要的资源。</li>\n<li>当然反向代理服务器像正向代理服务器一样拥有 CACHE 的作用，它可以缓存原始资源服务器 B 的资源，而不是每次都要向原始资源服务器 B 请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户 X 来自同一个网络，那么用户 X 访问反向代理服务器 X，就会得到很高质量的速度。这正是 CDN 技术的核心。</li>\n</ul>\n<h3 id=\"借用阿笠的一张图\"><a href=\"#借用阿笠的一张图\" class=\"headerlink\" title=\"借用阿笠的一张图\"></a>借用阿笠的一张图</h3><p><a href=\"http://http://img.blog.csdn.net/20171023163129273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQzMjI3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h3 id=\"Nginx-反向代理配置\"><a href=\"#Nginx-反向代理配置\" class=\"headerlink\" title=\"Nginx 反向代理配置\"></a>Nginx 反向代理配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#反向代理,需要配置在server外面</span><br><span class=\"line\">upstream github.xiaohuaiqing.com &#123;</span><br><span class=\"line\">        server 119.29.9.63:4000;</span><br><span class=\"line\">        keepalive 2000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        #listen [::]:80;</span><br><span class=\"line\">        server_name github.xiaohuaiqing.com;</span><br><span class=\"line\">        index index.html index.htm index.php default.html default.htm default.php;</span><br><span class=\"line\">        include other.conf;</span><br><span class=\"line\">        #error_page   404   /404.html;</span><br><span class=\"line\">        include enable-php.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        #反向代理</span><br><span class=\"line\">        location /</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            proxy_pass http://github.xiaohuaiqing.com;</span><br><span class=\"line\">            proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #单独加个css、js配置</span><br><span class=\"line\">        location ~ .*.(js|css)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            proxy_pass http://github.xiaohuaiqing.com;</span><br><span class=\"line\">            proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires      30d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires      12h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ /.</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        access_log  /home/wwwlogs/github.xiaohuaiqing.com.log;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>github 博客地址：<a href=\"https://shixiaohu2206.github.io/\" target=\"_blank\" rel=\"noopener\">https://shixiaohu2206.github.io/</a></p>\n</blockquote>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><ul>\n<li>一般情况下，若没有特别说明的代理技术，通常指的是正向代理</li>\n<li>正向代理(forward)是一个位于客户端【用户 A】和原始服务器(origin server)【服务器 B】之间的服务器【代理服务器 Z】，为了从原始服务器取得内容，用户 A 向代理服务器 Z 发送一个请求并指定目标(服务器 B)，然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。（抄的）</li>\n<li>自己的理解：用户想要访问原始服务器的内容，但是不能直接获取到，因为各种墙的缘故，但是中间的代理服务器可以访问的到，所以，用户就携带自己想要访问的地址（A 网址），先去访问代理服务器，代理服务器接受（A 网址），这时代理服务器再去访问（A 网址），获得到内容，返回给代理服务器，代理服务器再返回给用户。完成正向代理的一个流程。（翻墙就是正向代理）</li>\n</ul>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><ul>\n<li>网上都在说什么正向代理与反向代理正好相反，这个相反在我看来只是相对的某一个点</li>\n<li>反向代理的用户客户端，不需要做任何设置，需要设置的是反向代理服务器。</li>\n<li>对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</li>\n<li>自己的理解：用户访问（A 网址），A 网址的代理服务器接受到用户的请求，但是真实的资源不在该代理服务器上，该代理服务器携带用户请求去访问原始的服务器，获得到内容，返回给代理服务器，代理服务器再返回给用户。完成反向代理的一个流程。用户不知道（A 网址）其实不是原始服务器，资源不在（A 网址）上</li>\n</ul>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><ul>\n<li>负载均衡是在反向代理的基础上实现的。当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器 B 的时候，让不同的代理服务器 Z（x）去应答不同的用户，然后发送不同用户需要的资源。</li>\n<li>当然反向代理服务器像正向代理服务器一样拥有 CACHE 的作用，它可以缓存原始资源服务器 B 的资源，而不是每次都要向原始资源服务器 B 请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户 X 来自同一个网络，那么用户 X 访问反向代理服务器 X，就会得到很高质量的速度。这正是 CDN 技术的核心。</li>\n</ul>\n<h3 id=\"借用阿笠的一张图\"><a href=\"#借用阿笠的一张图\" class=\"headerlink\" title=\"借用阿笠的一张图\"></a>借用阿笠的一张图</h3><p><a href=\"http://http://img.blog.csdn.net/20171023163129273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQzMjI3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h3 id=\"Nginx-反向代理配置\"><a href=\"#Nginx-反向代理配置\" class=\"headerlink\" title=\"Nginx 反向代理配置\"></a>Nginx 反向代理配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#反向代理,需要配置在server外面</span><br><span class=\"line\">upstream github.xiaohuaiqing.com &#123;</span><br><span class=\"line\">        server 119.29.9.63:4000;</span><br><span class=\"line\">        keepalive 2000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">server</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        #listen [::]:80;</span><br><span class=\"line\">        server_name github.xiaohuaiqing.com;</span><br><span class=\"line\">        index index.html index.htm index.php default.html default.htm default.php;</span><br><span class=\"line\">        include other.conf;</span><br><span class=\"line\">        #error_page   404   /404.html;</span><br><span class=\"line\">        include enable-php.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">        #反向代理</span><br><span class=\"line\">        location /</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            proxy_pass http://github.xiaohuaiqing.com;</span><br><span class=\"line\">            proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #单独加个css、js配置</span><br><span class=\"line\">        location ~ .*.(js|css)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            proxy_pass http://github.xiaohuaiqing.com;</span><br><span class=\"line\">            proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires      30d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ .*.(js|css)?$</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            expires      12h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ /.</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            deny all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        access_log  /home/wwwlogs/github.xiaohuaiqing.com.log;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"记博客搭建","date":"2018-08-21T16:00:00.000Z","_content":"\n> 1、 之前写过 WordPress 版的博客，使用别人造好的轮，但是始终感觉缺点什么 [博客地址](http://utone.xiaohuaiqing.com/)\n> 2、 还用过 Hexo 搭建过博客，基本也是拿来主义 [博客地址](http://github.xiaohuaiqing.com/)\n> 3、趁着工作中使用 React、Express 前后端分离的项目结构，决心搭建一个属于自己的博客系统\n> 4、奉行”先有再优“、后续会不断优化完善博客\n> 5、感谢[大雄博客](https://199508.com/)，灵感及页面样式从中获取很多\n\n<!--more-->\n\n## 概述\n\n- 前后端分离，前端使用 React 框架，分为前台、后台两个项目。后端使用 Express 框架\n- React\n  1、React 版本为 `\"react\": \"^16.4.1\"`\n  2、使用 Ant Design 的一些基本组件，如弹出、表单组件，版本为`\"antd\": \"^3.8.0\"`\n  2、使用 Dvajs 和 Umi，重构了博客系统，也修改了样式布局\n  3、使用 scss，css 的扩展，写样式更加简洁\n- Express\n  1、使用 Express 的脚手架搭建、版本为 `\"express\": \"~4.16.0\"`\n  2、在加载路由前后，使用了一些中间件，后续将中间件整理出来\n  3、使用 JWT，来验证请求\n\n```js\nimport { Fragment, PureComponent } from 'react'\nimport { BackTop, Icon, Row, Col } from 'antd'\nimport { connect } from 'dva'\n// import { WiredCard } from \"wired-elements\";\nimport withRouter from 'umi/withRouter'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport Header from './header/components/Header'\nimport Footer from './footer/components/Footer'\nimport Siderbar from './siderbar/components/siderbar'\n\nclass Layout extends PureComponent {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.location.pathname === this.props.location.pathname) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * xs  <576px\n   * sm  ≥576px\n   * md  ≥768px\n   * lg  ≥992px\n   * xl  ≥1200px\n   * xxl ≥1600px\n   */\n  render() {\n    const { children, location } = this.props\n\n    // 前台布局\n    return (\n      <Fragment>\n        <div className=\"body\">\n          <Header />\n          <div className=\"main\">\n            <TransitionGroup>\n              <CSSTransition\n                key={location.key}\n                appear={true}\n                classNames=\"example\"\n                timeout={{ enter: 300, exit: 100 }}\n              >\n                {children}\n              </CSSTransition>\n            </TransitionGroup>\n          </div>\n        </div>\n        <Footer />\n      </Fragment>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {}\n}\n\nexport default withRouter(connect(mapStateToProps)(Layout))\n```\n","source":"_posts/记博客搭建.md","raw":"---\ntitle: 记博客搭建\ndate: 2018-08-22\ntags:\n  - React\n  - DvaJs\n  - Umi\ncategories:\n  - Code\n---\n\n> 1、 之前写过 WordPress 版的博客，使用别人造好的轮，但是始终感觉缺点什么 [博客地址](http://utone.xiaohuaiqing.com/)\n> 2、 还用过 Hexo 搭建过博客，基本也是拿来主义 [博客地址](http://github.xiaohuaiqing.com/)\n> 3、趁着工作中使用 React、Express 前后端分离的项目结构，决心搭建一个属于自己的博客系统\n> 4、奉行”先有再优“、后续会不断优化完善博客\n> 5、感谢[大雄博客](https://199508.com/)，灵感及页面样式从中获取很多\n\n<!--more-->\n\n## 概述\n\n- 前后端分离，前端使用 React 框架，分为前台、后台两个项目。后端使用 Express 框架\n- React\n  1、React 版本为 `\"react\": \"^16.4.1\"`\n  2、使用 Ant Design 的一些基本组件，如弹出、表单组件，版本为`\"antd\": \"^3.8.0\"`\n  2、使用 Dvajs 和 Umi，重构了博客系统，也修改了样式布局\n  3、使用 scss，css 的扩展，写样式更加简洁\n- Express\n  1、使用 Express 的脚手架搭建、版本为 `\"express\": \"~4.16.0\"`\n  2、在加载路由前后，使用了一些中间件，后续将中间件整理出来\n  3、使用 JWT，来验证请求\n\n```js\nimport { Fragment, PureComponent } from 'react'\nimport { BackTop, Icon, Row, Col } from 'antd'\nimport { connect } from 'dva'\n// import { WiredCard } from \"wired-elements\";\nimport withRouter from 'umi/withRouter'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport Header from './header/components/Header'\nimport Footer from './footer/components/Footer'\nimport Siderbar from './siderbar/components/siderbar'\n\nclass Layout extends PureComponent {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.location.pathname === this.props.location.pathname) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * xs  <576px\n   * sm  ≥576px\n   * md  ≥768px\n   * lg  ≥992px\n   * xl  ≥1200px\n   * xxl ≥1600px\n   */\n  render() {\n    const { children, location } = this.props\n\n    // 前台布局\n    return (\n      <Fragment>\n        <div className=\"body\">\n          <Header />\n          <div className=\"main\">\n            <TransitionGroup>\n              <CSSTransition\n                key={location.key}\n                appear={true}\n                classNames=\"example\"\n                timeout={{ enter: 300, exit: 100 }}\n              >\n                {children}\n              </CSSTransition>\n            </TransitionGroup>\n          </div>\n        </div>\n        <Footer />\n      </Fragment>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {}\n}\n\nexport default withRouter(connect(mapStateToProps)(Layout))\n```\n","slug":"记博客搭建","published":1,"updated":"2019-07-23T08:58:17.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjyiazwem003gygf0uhxwae9p","content":"<blockquote>\n<p>1、 之前写过 WordPress 版的博客，使用别人造好的轮，但是始终感觉缺点什么 <a href=\"http://utone.xiaohuaiqing.com/\" target=\"_blank\" rel=\"noopener\">博客地址</a><br>2、 还用过 Hexo 搭建过博客，基本也是拿来主义 <a href=\"http://github.xiaohuaiqing.com/\" target=\"_blank\" rel=\"noopener\">博客地址</a><br>3、趁着工作中使用 React、Express 前后端分离的项目结构，决心搭建一个属于自己的博客系统<br>4、奉行”先有再优“、后续会不断优化完善博客<br>5、感谢<a href=\"https://199508.com/\" target=\"_blank\" rel=\"noopener\">大雄博客</a>，灵感及页面样式从中获取很多</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>前后端分离，前端使用 React 框架，分为前台、后台两个项目。后端使用 Express 框架</li>\n<li>React<br>1、React 版本为 <code>&quot;react&quot;: &quot;^16.4.1&quot;</code><br>2、使用 Ant Design 的一些基本组件，如弹出、表单组件，版本为<code>&quot;antd&quot;: &quot;^3.8.0&quot;</code><br>2、使用 Dvajs 和 Umi，重构了博客系统，也修改了样式布局<br>3、使用 scss，css 的扩展，写样式更加简洁</li>\n<li>Express<br>1、使用 Express 的脚手架搭建、版本为 <code>&quot;express&quot;: &quot;~4.16.0&quot;</code><br>2、在加载路由前后，使用了一些中间件，后续将中间件整理出来<br>3、使用 JWT，来验证请求</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Fragment, PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BackTop, Icon, Row, Col &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span></span><br><span class=\"line\"><span class=\"comment\">// import &#123; WiredCard &#125; from \"wired-elements\";</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">'umi/withRouter'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-transition-group'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span> <span class=\"string\">'./header/components/Header'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Footer <span class=\"keyword\">from</span> <span class=\"string\">'./footer/components/Footer'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Siderbar <span class=\"keyword\">from</span> <span class=\"string\">'./siderbar/components/siderbar'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Layout</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.location.pathname === <span class=\"keyword\">this</span>.props.location.pathname) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * xs  &lt;576px</span></span><br><span class=\"line\"><span class=\"comment\">   * sm  ≥576px</span></span><br><span class=\"line\"><span class=\"comment\">   * md  ≥768px</span></span><br><span class=\"line\"><span class=\"comment\">   * lg  ≥992px</span></span><br><span class=\"line\"><span class=\"comment\">   * xl  ≥1200px</span></span><br><span class=\"line\"><span class=\"comment\">   * xxl ≥1600px</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; children, location &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前台布局</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Fragment&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"body\"</span>&gt;</span><br><span class=\"line\">          &lt;Header /&gt;</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"main\"</span>&gt;</span><br><span class=\"line\">            &lt;TransitionGroup&gt;</span><br><span class=\"line\">              &lt;CSSTransition</span><br><span class=\"line\">                key=&#123;location.key&#125;</span><br><span class=\"line\">                appear=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">                classNames=<span class=\"string\">\"example\"</span></span><br><span class=\"line\">                timeout=&#123;&#123; <span class=\"attr\">enter</span>: <span class=\"number\">300</span>, <span class=\"attr\">exit</span>: <span class=\"number\">100</span> &#125;&#125;</span><br><span class=\"line\">              &gt;</span><br><span class=\"line\">                &#123;children&#125;</span><br><span class=\"line\">              &lt;<span class=\"regexp\">/CSSTransition&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>TransitionGroup&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;Footer /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function mapStateToProps(state) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return &#123;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default withRouter(connect(mapStateToProps)(Layout))</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>1、 之前写过 WordPress 版的博客，使用别人造好的轮，但是始终感觉缺点什么 <a href=\"http://utone.xiaohuaiqing.com/\" target=\"_blank\" rel=\"noopener\">博客地址</a><br>2、 还用过 Hexo 搭建过博客，基本也是拿来主义 <a href=\"http://github.xiaohuaiqing.com/\" target=\"_blank\" rel=\"noopener\">博客地址</a><br>3、趁着工作中使用 React、Express 前后端分离的项目结构，决心搭建一个属于自己的博客系统<br>4、奉行”先有再优“、后续会不断优化完善博客<br>5、感谢<a href=\"https://199508.com/\" target=\"_blank\" rel=\"noopener\">大雄博客</a>，灵感及页面样式从中获取很多</p>\n</blockquote>","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li>前后端分离，前端使用 React 框架，分为前台、后台两个项目。后端使用 Express 框架</li>\n<li>React<br>1、React 版本为 <code>&quot;react&quot;: &quot;^16.4.1&quot;</code><br>2、使用 Ant Design 的一些基本组件，如弹出、表单组件，版本为<code>&quot;antd&quot;: &quot;^3.8.0&quot;</code><br>2、使用 Dvajs 和 Umi，重构了博客系统，也修改了样式布局<br>3、使用 scss，css 的扩展，写样式更加简洁</li>\n<li>Express<br>1、使用 Express 的脚手架搭建、版本为 <code>&quot;express&quot;: &quot;~4.16.0&quot;</code><br>2、在加载路由前后，使用了一些中间件，后续将中间件整理出来<br>3、使用 JWT，来验证请求</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Fragment, PureComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BackTop, Icon, Row, Col &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'dva'</span></span><br><span class=\"line\"><span class=\"comment\">// import &#123; WiredCard &#125; from \"wired-elements\";</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> withRouter <span class=\"keyword\">from</span> <span class=\"string\">'umi/withRouter'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-transition-group'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span> <span class=\"string\">'./header/components/Header'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Footer <span class=\"keyword\">from</span> <span class=\"string\">'./footer/components/Footer'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Siderbar <span class=\"keyword\">from</span> <span class=\"string\">'./siderbar/components/siderbar'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Layout</span> <span class=\"keyword\">extends</span> <span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.location.pathname === <span class=\"keyword\">this</span>.props.location.pathname) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * xs  &lt;576px</span></span><br><span class=\"line\"><span class=\"comment\">   * sm  ≥576px</span></span><br><span class=\"line\"><span class=\"comment\">   * md  ≥768px</span></span><br><span class=\"line\"><span class=\"comment\">   * lg  ≥992px</span></span><br><span class=\"line\"><span class=\"comment\">   * xl  ≥1200px</span></span><br><span class=\"line\"><span class=\"comment\">   * xxl ≥1600px</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; children, location &#125; = <span class=\"keyword\">this</span>.props</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前台布局</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Fragment&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"body\"</span>&gt;</span><br><span class=\"line\">          &lt;Header /&gt;</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"main\"</span>&gt;</span><br><span class=\"line\">            &lt;TransitionGroup&gt;</span><br><span class=\"line\">              &lt;CSSTransition</span><br><span class=\"line\">                key=&#123;location.key&#125;</span><br><span class=\"line\">                appear=&#123;<span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">                classNames=<span class=\"string\">\"example\"</span></span><br><span class=\"line\">                timeout=&#123;&#123; <span class=\"attr\">enter</span>: <span class=\"number\">300</span>, <span class=\"attr\">exit</span>: <span class=\"number\">100</span> &#125;&#125;</span><br><span class=\"line\">              &gt;</span><br><span class=\"line\">                &#123;children&#125;</span><br><span class=\"line\">              &lt;<span class=\"regexp\">/CSSTransition&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>TransitionGroup&gt;</span><br><span class=\"line\">          &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;Footer /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">function mapStateToProps(state) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return &#123;&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default withRouter(connect(mapStateToProps)(Layout))</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/天空/2.jpeg","slug":"2.jpeg","post":"cjyiazwe5002sygf098e906fs","modified":1,"renderable":0},{"_id":"source/_posts/南京游/2.jpeg","slug":"2.jpeg","post":"cjyiazwdv002hygf0klbchlod","modified":1,"renderable":0},{"_id":"source/_posts/南京游/5.jpeg","slug":"5.jpeg","post":"cjyiazwdv002hygf0klbchlod","modified":1,"renderable":0},{"_id":"source/_posts/南京游/3.jpeg","slug":"3.jpeg","post":"cjyiazwdv002hygf0klbchlod","modified":1,"renderable":0},{"_id":"source/_posts/天空/1.jpeg","post":"cjyiazwe5002sygf098e906fs","slug":"1.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/天空/3.jpeg","post":"cjyiazwe5002sygf098e906fs","slug":"3.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/南京游/1.jpeg","slug":"1.jpeg","post":"cjyiazwdv002hygf0klbchlod","modified":1,"renderable":0},{"_id":"source/_posts/南京游/4.jpeg","slug":"4.jpeg","post":"cjyiazwdv002hygf0klbchlod","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjyiazwbo0006ygf0laua3pvo","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwbx000cygf00ai1jir2"},{"post_id":"cjyiazwbe0001ygf0bfck0jga","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwc1000gygf0b5zed5dd"},{"post_id":"cjyiazwbq0007ygf0n78m8zn4","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwc4000jygf0g0kmi611"},{"post_id":"cjyiazwbu000aygf01wmh8zl1","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwc7000oygf0qnsumr27"},{"post_id":"cjyiazwbh0002ygf05cbs7j99","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwc9000qygf0ssunbsnq"},{"post_id":"cjyiazwbm0005ygf0ngrw6k7b","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwcb000vygf0ewvnzuu2"},{"post_id":"cjyiazwc3000iygf02phw10eh","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwcc000xygf0gunp44if"},{"post_id":"cjyiazwbw000bygf07beoxeic","category_id":"cjyiazwc4000kygf0rvp9ftk9","_id":"cjyiazwce0010ygf04vbq7wv3"},{"post_id":"cjyiazwc8000pygf05ubyj762","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwcf0013ygf0es5x0c65"},{"post_id":"cjyiazwca000uygf0mzgculmr","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwcf0014ygf0w1soexpo"},{"post_id":"cjyiazwbz000fygf0tcyiin97","category_id":"cjyiazwc9000rygf0crszabuf","_id":"cjyiazwcg0016ygf0tafb1pqn"},{"post_id":"cjyiazwc6000nygf07ear65e0","category_id":"cjyiazwc9000rygf0crszabuf","_id":"cjyiazwch0018ygf03p2re8bd"},{"post_id":"cjyiazwd5001vygf0jujoxj6z","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwdh0022ygf0rr12tl02"},{"post_id":"cjyiazwd7001xygf0n6hnhfqz","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwdn0025ygf0jyqb6xdl"},{"post_id":"cjyiazwd9001zygf0v0zccd1a","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwdp0028ygf0ywk1wk99"},{"post_id":"cjyiazwdf0021ygf023mftcou","category_id":"cjyiazwc4000kygf0rvp9ftk9","_id":"cjyiazwdr002bygf0aau0tkn0"},{"post_id":"cjyiazwdm0024ygf0banu2dns","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwdu002fygf0i7205xmb"},{"post_id":"cjyiazwdo0027ygf08vlzcjtp","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwdw002iygf07r277zir"},{"post_id":"cjyiazwdr002aygf02mk57tnj","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwe0002lygf0r469zn4z"},{"post_id":"cjyiazwdt002eygf02wgooy7q","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwe4002qygf01igme0ex"},{"post_id":"cjyiazwdz002kygf02h5ttar7","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwe7002vygf0wfcdhfu9"},{"post_id":"cjyiazwe2002pygf0jq7f1x9q","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwea0030ygf0joo00kev"},{"post_id":"cjyiazwdv002hygf0klbchlod","category_id":"cjyiazwe1002mygf07xhjato5","_id":"cjyiazwec0033ygf0hnx88gai"},{"post_id":"cjyiazwe6002uygf0y24aej1c","category_id":"cjyiazwc4000kygf0rvp9ftk9","_id":"cjyiazweg0038ygf0xobwqxfn"},{"post_id":"cjyiazweb0032ygf0kdh4lroq","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwel003dygf06f9ocs5j"},{"post_id":"cjyiazwe5002sygf098e906fs","category_id":"cjyiazwe8002wygf0tjir867a","_id":"cjyiazwen003hygf06di8727j"},{"post_id":"cjyiazwee0035ygf0x5ale4zm","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwep003kygf0hl9towmt"},{"post_id":"cjyiazweh003aygf01phszaem","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazweq003nygf0h6ov6t0w"},{"post_id":"cjyiazwej003cygf02llddzcg","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazweq003pygf0bb1yjlvt"},{"post_id":"cjyiazwem003gygf0uhxwae9p","category_id":"cjyiazwbj0003ygf00wo5r1wh","_id":"cjyiazwer003sygf0btovb23q"},{"post_id":"cjyiazwe9002zygf0aljj6tnp","category_id":"cjyiazwef0036ygf0x9cn43ry","_id":"cjyiazwes003uygf0tvs2qiv1"},{"post_id":"cjyiazwe9002zygf0aljj6tnp","category_id":"cjyiazweo003iygf06x5gncyf","_id":"cjyiazwes003vygf0o508pkwf"}],"PostTag":[{"post_id":"cjyiazwbe0001ygf0bfck0jga","tag_id":"cjyiazwbl0004ygf0xzyjccd8","_id":"cjyiazwc2000hygf0blb81gh0"},{"post_id":"cjyiazwbe0001ygf0bfck0jga","tag_id":"cjyiazwbs0009ygf0opex65xx","_id":"cjyiazwc5000lygf0rbgb6ihz"},{"post_id":"cjyiazwc6000nygf07ear65e0","tag_id":"cjyiazwby000eygf0bdkd6qf6","_id":"cjyiazwca000sygf0837qsv5r"},{"post_id":"cjyiazwbh0002ygf05cbs7j99","tag_id":"cjyiazwby000eygf0bdkd6qf6","_id":"cjyiazwcc000wygf0zgzxtpsi"},{"post_id":"cjyiazwbh0002ygf05cbs7j99","tag_id":"cjyiazwc5000mygf04ch6hvo4","_id":"cjyiazwcd000zygf0bwvqksd5"},{"post_id":"cjyiazwc8000pygf05ubyj762","tag_id":"cjyiazwbl0004ygf0xzyjccd8","_id":"cjyiazwcf0012ygf0dbpkdnb7"},{"post_id":"cjyiazwbm0005ygf0ngrw6k7b","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwch0017ygf0roh0c1gl"},{"post_id":"cjyiazwbm0005ygf0ngrw6k7b","tag_id":"cjyiazwce0011ygf0b8btlyk8","_id":"cjyiazwch0019ygf0h2mxqbsw"},{"post_id":"cjyiazwbo0006ygf0laua3pvo","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwci001bygf08it1qoe3"},{"post_id":"cjyiazwbq0007ygf0n78m8zn4","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwcj001dygf051kcsn4p"},{"post_id":"cjyiazwbu000aygf01wmh8zl1","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwcl001hygf0ds7rb1vg"},{"post_id":"cjyiazwbu000aygf01wmh8zl1","tag_id":"cjyiazwck001eygf0sqesn6oa","_id":"cjyiazwcl001iygf09nrxx7c6"},{"post_id":"cjyiazwbu000aygf01wmh8zl1","tag_id":"cjyiazwck001fygf0l9xfipk1","_id":"cjyiazwcm001kygf01y0of3zp"},{"post_id":"cjyiazwbw000bygf07beoxeic","tag_id":"cjyiazwcl001gygf01s8abqai","_id":"cjyiazwcm001lygf0z6o2r9nx"},{"post_id":"cjyiazwbz000fygf0tcyiin97","tag_id":"cjyiazwcm001jygf00lhv20dz","_id":"cjyiazwco001oygf0o69r79vg"},{"post_id":"cjyiazwbz000fygf0tcyiin97","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwco001pygf0ywq2l1ky"},{"post_id":"cjyiazwc3000iygf02phw10eh","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwcp001rygf002evocke"},{"post_id":"cjyiazwca000uygf0mzgculmr","tag_id":"cjyiazwcp001qygf0nzkgsm5q","_id":"cjyiazwcq001tygf099jql3wu"},{"post_id":"cjyiazwca000uygf0mzgculmr","tag_id":"cjyiazwcp001sygf0ctblmbx3","_id":"cjyiazwcq001uygf0apqvno79"},{"post_id":"cjyiazwd7001xygf0n6hnhfqz","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwde0020ygf0sbcj2p3a"},{"post_id":"cjyiazwd9001zygf0v0zccd1a","tag_id":"cjyiazwby000eygf0bdkd6qf6","_id":"cjyiazwdm0023ygf0qh5tofxy"},{"post_id":"cjyiazwdf0021ygf023mftcou","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwdo0026ygf0rovmgyk8"},{"post_id":"cjyiazwd5001vygf0jujoxj6z","tag_id":"cjyiazwd9001yygf0uoyp09pg","_id":"cjyiazwdq0029ygf0jwue6pl9"},{"post_id":"cjyiazwd5001vygf0jujoxj6z","tag_id":"cjyiazwck001fygf0l9xfipk1","_id":"cjyiazwdt002dygf0nix5lc8q"},{"post_id":"cjyiazwdm0024ygf0banu2dns","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwdv002gygf0cgwud6qu"},{"post_id":"cjyiazwdr002aygf02mk57tnj","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwdy002jygf0ly0278o3"},{"post_id":"cjyiazwdt002eygf02wgooy7q","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwe2002oygf06qoivlc3"},{"post_id":"cjyiazwdo0027ygf08vlzcjtp","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwe4002rygf0b3tsevyz"},{"post_id":"cjyiazwdo0027ygf08vlzcjtp","tag_id":"cjyiazwds002cygf0gbcve8dp","_id":"cjyiazwe6002tygf0q8fpfbqz"},{"post_id":"cjyiazwdz002kygf02h5ttar7","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazwe8002yygf0bw2o65bi"},{"post_id":"cjyiazwe2002pygf0jq7f1x9q","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazweb0031ygf0ut1rjk84"},{"post_id":"cjyiazwdv002hygf0klbchlod","tag_id":"cjyiazwe1002nygf06v85xumt","_id":"cjyiazwed0034ygf0uonge7ic"},{"post_id":"cjyiazweb0032ygf0kdh4lroq","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazweh0039ygf0v1s1ikxt"},{"post_id":"cjyiazwe5002sygf098e906fs","tag_id":"cjyiazwe8002xygf0npufnbwf","_id":"cjyiazwei003bygf0bfn7qxdp"},{"post_id":"cjyiazwee0035ygf0x5ale4zm","tag_id":"cjyiazwby000eygf0bdkd6qf6","_id":"cjyiazwem003fygf0mehjc0s1"},{"post_id":"cjyiazweh003aygf01phszaem","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazweo003jygf0zd22rnov"},{"post_id":"cjyiazwe6002uygf0y24aej1c","tag_id":"cjyiazwca000tygf08ce2a984","_id":"cjyiazweq003mygf085ax0yns"},{"post_id":"cjyiazwe6002uygf0y24aej1c","tag_id":"cjyiazweg0037ygf0p4okpnpn","_id":"cjyiazweq003oygf0w6kc791f"},{"post_id":"cjyiazwe9002zygf0aljj6tnp","tag_id":"cjyiazwel003eygf0y23qkcz9","_id":"cjyiazwer003rygf01my2o5lc"},{"post_id":"cjyiazwej003cygf02llddzcg","tag_id":"cjyiazwep003lygf0jcc801e5","_id":"cjyiazwes003tygf0cd7fq8qb"},{"post_id":"cjyiazwem003gygf0uhxwae9p","tag_id":"cjyiazwcm001jygf00lhv20dz","_id":"cjyiazwet003xygf0r989q8wx"},{"post_id":"cjyiazwem003gygf0uhxwae9p","tag_id":"cjyiazwer003qygf0bowz2m3i","_id":"cjyiazweu003yygf0yy5n9wnb"},{"post_id":"cjyiazwem003gygf0uhxwae9p","tag_id":"cjyiazwet003wygf0edcgjh2f","_id":"cjyiazweu003zygf0b5wy8a3d"}],"Tag":[{"name":"Git","_id":"cjyiazwbl0004ygf0xzyjccd8"},{"name":"SSH","_id":"cjyiazwbs0009ygf0opex65xx"},{"name":"PHP","_id":"cjyiazwby000eygf0bdkd6qf6"},{"name":"MySql","_id":"cjyiazwc5000mygf04ch6hvo4"},{"name":"JavaScript","_id":"cjyiazwca000tygf08ce2a984"},{"name":"Eslint","_id":"cjyiazwce0011ygf0b8btlyk8"},{"name":"NodeJS","_id":"cjyiazwck001eygf0sqesn6oa"},{"name":"Linux","_id":"cjyiazwck001fygf0l9xfipk1"},{"name":"VsCode","_id":"cjyiazwcl001gygf01s8abqai"},{"name":"React","_id":"cjyiazwcm001jygf00lhv20dz"},{"name":"Css","_id":"cjyiazwcp001qygf0nzkgsm5q"},{"name":"Float","_id":"cjyiazwcp001sygf0ctblmbx3"},{"name":"Nginx","_id":"cjyiazwd9001yygf0uoyp09pg"},{"name":"Promise","_id":"cjyiazwds002cygf0gbcve8dp"},{"name":"南京","_id":"cjyiazwe1002nygf06v85xumt"},{"name":"天空","_id":"cjyiazwe8002xygf0npufnbwf"},{"name":"ES6","_id":"cjyiazweg0037ygf0p4okpnpn"},{"name":"javascript","_id":"cjyiazwel003eygf0y23qkcz9"},{"name":"代理","_id":"cjyiazwep003lygf0jcc801e5"},{"name":"DvaJs","_id":"cjyiazwer003qygf0bowz2m3i"},{"name":"Umi","_id":"cjyiazwet003wygf0edcgjh2f"}]}}