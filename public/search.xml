<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>天空</title>
      <link href="//0720-%E5%A4%A9%E7%A9%BA/"/>
      <url>//0720-%E5%A4%A9%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<img src="/0720-天空/1.jpeg" title="媳妇最美"><p>媳妇拍的不错～～</p><img src="/0720-天空/2.jpeg" title="媳妇最美"><p>这样的风景，看着就很舒服～</p><img src="/0720-天空/3.jpeg" title="媳妇最美"><p>一个天空，不同景色</p>]]></content>
      
      
      <categories>
          
          <category> Daily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天空 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南京游</title>
      <link href="//0720-%E5%8D%97%E4%BA%AC%E6%B8%B8/"/>
      <url>//0720-%E5%8D%97%E4%BA%AC%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>南京，呆了小两年吧，旧地重游，临行前几日患了热毒，第二天在南京一大早就去南京中医院，也算旅游中难忘的回忆了～～</p></blockquote><h1 id="古鸡鸣寺"><a href="#古鸡鸣寺" class="headerlink" title="古鸡鸣寺"></a>古鸡鸣寺</h1><blockquote><p>去了鸡鸣寺，听说求姻缘很灵～</p></blockquote><img src="/0720-南京游/4.jpeg" title="媳妇最美"><p>鸡鸣寺站下来，走个五分钟就到了。</p><img src="/0720-南京游/5.jpeg" title="媳妇最美"><p>我可爱的媳妇～</p><h1 id="玄武湖"><a href="#玄武湖" class="headerlink" title="玄武湖"></a>玄武湖</h1><blockquote><p>还遇到有玄武湖跑圈活动～</p></blockquote><img src="/0720-南京游/1.jpeg" title="媳妇最美"><p>媳妇标准拍照姿势～～</p><img src="/0720-南京游/2.jpeg" title="媳妇最美"><p>媳妇的背影～</p><h1 id="烤肉"><a href="#烤肉" class="headerlink" title="烤肉"></a>烤肉</h1><blockquote><p>等了1、2个小时的新石器烤肉，感觉点了，有点吃不完等节奏～</p></blockquote><img src="/0720-南京游/3.jpeg" title="媳妇最美">]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 南京 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWA功能</title>
      <link href="//0614-PWA%E5%8A%9F%E8%83%BD/"/>
      <url>//0614-PWA%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>PWA（Progressive Web App）, 即渐进式 web 应用。PWA 本质上是 web 应用，目的是通过多项新技术，在安全、性能、体验等方面给用户原生应用的体验。而且无需像原生应用那样繁琐的下载、安装、升级等操作。</p></blockquote><a id="more"></a><p>打开<code>chrome://inspect/#service-workers</code>可查看 chrome 当前运行的 service worker</p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><blockquote><p>Service Worker 是 PWA 的核心技术</p></blockquote><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>基于 HTTPS 环境，这是构建 PWA 的硬性前提</li><li>是一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context</li><li>可拦截 HTTP 请求和响应，可缓存文件，缓存的文件可以在网络离线状态时取到</li><li>能向客户端推送消息</li><li>不能直接操作 DOM</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><h3 id="Service-Worker-生命周期"><a href="#Service-Worker-生命周期" class="headerlink" title="Service Worker 生命周期"></a>Service Worker 生命周期</h3><blockquote><p>注册–安装–激活</p></blockquote><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><blockquote><p>告诉浏览器 serviceworkerJS 文件存放在什么位置，浏览器下载、解析、执行。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">'/sw.js'</span>)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注册成功</span></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">'ServiceWorker registration successful with scope: '</span>,</span><br><span class="line">          registration.scope</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注册失败:(</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ServiceWorker registration failed: '</span>, err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p>注册结束后，触发 install 事件，进行安装。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CACHE_VERSION = <span class="string">'sw_v8'</span></span><br><span class="line"><span class="keyword">var</span> CACHE_FILES = [<span class="string">'/js/jquery/min.js'</span>, <span class="string">'/js/zui/min.js'</span>, <span class="string">'/js/chanzhi.js'</span>]</span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.open(CACHE_VERSION).then(<span class="function"><span class="params">cache</span> =&gt;</span> cache.addAll(CACHE_FILES))</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><blockquote><p>当安装成功后，serviceworker 就会激活，这时就会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">keys</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">        keys.map(<span class="function"><span class="keyword">function</span>(<span class="params">key, i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (key !== CACHE_VERSION) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.delete(keys[i])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Service-Worker-缓存功能"><a href="#Service-Worker-缓存功能" class="headerlink" title="Service Worker 缓存功能"></a>Service Worker 缓存功能</h3><blockquote><p>安装时，service worker 将我们指定的静态资源进行缓存（即预缓存）,与此同时，service worker 还可以拦截 HTTP 请求相应，做到动态缓存</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response) &#123;</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> requestToCache = event.request.clone()</span><br><span class="line">      <span class="keyword">return</span> fetch(requestToCache).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response || response.status !== <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> response</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> responseToCache = response.clone()</span><br><span class="line">        caches.open(CACHE_VERSION).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</span><br><span class="line">          cache.put(requestToCache, responseToCache)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="PWA-添加横幅，增加用户使用率"><a href="#PWA-添加横幅，增加用户使用率" class="headerlink" title="PWA 添加横幅，增加用户使用率"></a>PWA 添加横幅，增加用户使用率</h4><ol><li><a href="https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners" target="_blank" rel="noopener">https://lavas.baidu.com/doc/engage-retain-users/add-to-home-screen/app-install-banners</a></li><li><a href="https://github.com/electron-react-boilerplate/electron-react-boilerplate" target="_blank" rel="noopener">https://github.com/electron-react-boilerplate/electron-react-boilerplate</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范</title>
      <link href="//0614-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>//0614-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h4 id="代码规范优点"><a href="#代码规范优点" class="headerlink" title="代码规范优点"></a>代码规范优点</h4><blockquote><p>由于项目开发多成员协作问题，程序员开发习惯不同，项目的不断迭代会导致代码质量问题、代码维护问题、可读性问题的出现，所以好的校验工具可以确保一个项目遵循代码规范、避免一些常见的隐患出现</p></blockquote><h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><blockquote><p>配置文档地址: <a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener">https://prettier.io/docs/en/options.html</a></p></blockquote><ol><li>在项目根目录下添加<code>prettier.config.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  printWidth: <span class="number">80</span>, <span class="comment">// 一行最大多少字符</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// tab占用的字符数</span></span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 在语句末尾添加分号</span></span><br><span class="line">  useTabs: <span class="literal">false</span>, <span class="comment">// 是否使用tab代替空格</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 是否使用单引号</span></span><br><span class="line">  jsxSingleQuote: <span class="literal">false</span>, <span class="comment">// jsx是否使用单引号</span></span><br><span class="line">  jsxBracketSameLinte: <span class="literal">true</span>, <span class="comment">// 在多行JSX元素最后一行的末尾添加 &gt; 而使 &gt; 单独一行（不适用于自闭和元素）</span></span><br><span class="line">  trailingComma: <span class="string">'none'</span>, <span class="comment">// 在任何可能的多行中输入尾逗号</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>, <span class="comment">// 在对象字面量声明所使用的的花括号后（&#123;）和前（&#125;）输出空格</span></span><br><span class="line">  jsxBracketSameLine: <span class="literal">false</span>, <span class="comment">// 看官网</span></span><br><span class="line">  arrowParens: <span class="string">'avoid'</span>, <span class="comment">// 为单行箭头函数的参数添加圆括号,</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * endOfLine: "&lt;auto|lf|crlf|cr&gt;"</span></span><br><span class="line"><span class="comment">   * "auto" - 维护现有的行结尾（通过查看第一行之后使用的内容来标准化一个文件中的混合值）</span></span><br><span class="line"><span class="comment">   * "lf"- Line Feed only（\n），在Linux和macOS以及git repos内部很常见</span></span><br><span class="line"><span class="comment">   * "crlf"- 回车符+换行符（\r\n），在Windows上很常见</span></span><br><span class="line"><span class="comment">   * "cr"- 仅限回车符（\r），很少使用</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  endOfLine: <span class="string">'auto'</span> <span class="comment">// 文件行结尾风格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h3><blockquote><p>配置文档地址：<a href="https://cn.eslint.org/docs/rules/" target="_blank" rel="noopener">https://cn.eslint.org/docs/rules/</a></p></blockquote><ol><li>在项目跟目录下添加<code>.eslintrc.json</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  parser: <span class="string">'babel-eslint'</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    commonjs: <span class="literal">true</span>,</span><br><span class="line">    amd: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">    mocha: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [<span class="string">'eslint:recommended'</span>, <span class="string">'plugin:react/recommended'</span>], <span class="comment">// 使用Eslint官方规则推荐</span></span><br><span class="line">  globals: &#123;</span><br><span class="line">    Atomics: <span class="string">'readonly'</span>,</span><br><span class="line">    SharedArrayBuffer: <span class="string">'readonly'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2018</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    semi: <span class="number">0</span>, <span class="comment">// 要求或禁止使用分号代替 ASI</span></span><br><span class="line">    <span class="string">'no-undef'</span>: <span class="number">2</span>, <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class="line">    <span class="string">'jsx-quotes'</span>: <span class="number">0</span>, <span class="comment">// 强制在 JSX 属性中一致地使用双引号或单引号</span></span><br><span class="line">    quotes: [<span class="number">0</span>, <span class="string">'single'</span>, <span class="string">'double'</span>], <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></span><br><span class="line">    <span class="string">'no-multi-spaces'</span>: <span class="number">2</span>, <span class="comment">// 禁止使用多个空格</span></span><br><span class="line">    <span class="string">'comma-spacing'</span>: [<span class="number">2</span>, &#123; <span class="attr">before</span>: <span class="literal">false</span>, <span class="attr">after</span>: <span class="literal">true</span> &#125;], <span class="comment">// 强制在逗号前后使用一致的空格</span></span><br><span class="line">    <span class="string">'comma-dangle'</span>: <span class="number">2</span>, <span class="comment">// 要求或禁止末尾逗号</span></span><br><span class="line">    <span class="string">'valid-jsdoc'</span>: <span class="number">0</span>, <span class="comment">// 强制使用有效的 JSDoc 注释</span></span><br><span class="line">    indent: [<span class="string">'error'</span>, <span class="number">2</span>], <span class="comment">// 强制使用一致的缩进</span></span><br><span class="line">    <span class="string">'arrow-parens'</span>: <span class="number">0</span>, <span class="comment">// 要求箭头函数的参数使用圆括号</span></span><br><span class="line">    <span class="string">'object-curly-spacing'</span>: <span class="number">0</span>, <span class="comment">// 强制在大括号中使用一致的空格</span></span><br><span class="line">    <span class="string">'spaced-comment'</span>: [<span class="number">2</span>, <span class="string">'always'</span>], <span class="comment">// 强制在注释中 // 或 /* 使用一致的空格</span></span><br><span class="line">    <span class="string">'one-var-declaration-per-line'</span>: <span class="number">2</span>, <span class="comment">// 要求或禁止在变量声明周围换行</span></span><br><span class="line">    <span class="string">'default-case'</span>: <span class="number">2</span>, <span class="comment">// 要求 switch 语句中有 default 分支</span></span><br><span class="line">    <span class="string">'no-new-wrappers'</span>: <span class="number">2</span>, <span class="comment">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></span><br><span class="line">    eqeqeq: <span class="number">1</span>, <span class="comment">// 要求使用 === 和 !==</span></span><br><span class="line">    <span class="string">'no-alert'</span>: <span class="number">1</span>, <span class="comment">// 禁用 alert、confirm 和 prompt</span></span><br><span class="line">    <span class="string">'no-console'</span>: <span class="number">1</span>, <span class="comment">// 禁用 alert、confirm 和 prompt</span></span><br><span class="line">    <span class="string">'no-eval'</span>: <span class="number">1</span>, <span class="comment">// 禁用 eval()</span></span><br><span class="line">    <span class="string">'no-implied-eval'</span>: <span class="number">1</span>, <span class="comment">// 禁止使用类似 eval() 的方法</span></span><br><span class="line">    <span class="string">'eol-last'</span>: <span class="number">2</span>, <span class="comment">// 要求或禁止文件末尾存在空行</span></span><br><span class="line">    <span class="string">'no-multiple-empty-lines'</span>: <span class="number">2</span>, <span class="comment">// 禁止出现多行空行</span></span><br><span class="line">    <span class="string">'no-var'</span>: <span class="number">2</span>, <span class="comment">// 要求使用 let 或 const 而不是 var</span></span><br><span class="line">    <span class="string">'prefer-const'</span>: <span class="number">2</span> <span class="comment">// 要求使用 const 声明那些声明后不再被修改的变量</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结笔记20190614</title>
      <link href="//0614-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020190614/"/>
      <url>//0614-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020190614/</url>
      
        <content type="html"><![CDATA[<ol><li>解决 chrome network 中出现<code>provisional headers are shown</code>，导致跨域时，查看不了 cookie 的携带情况<ul><li>解决方法<a href="https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger" target="_blank" rel="noopener">https://stackoverflow.com/questions/21177387/caution-provisional-headers-are-shown-in-chrome-debugger</a></li><li>chrome://flags/</li><li>Disable site isolation</li><li>Enable network service</li><li>Runs network service in-process</li></ul></li><li>less 的函数 data-uri，可以将图片编译成 base64 格式，图片过大时，不生效，最大尺寸为 24KB</li><li>devDependencies 和 dependencies 区别<ul><li>网上统一的观念是</li><li>devDependencies 用于本地环境开发时候。 dependencies 用户发布环境 其实看名字我也知道是这个意思，我觉得没解释情况。 devDependencies 是只会在开发环境下依赖的模块，生产环境不会被打入包内。通过 NODE_ENV=developement 或 NODE_ENV=production 指定开发还是生产环境。 而 dependencies 依赖的包不仅开发环境能使用，生产环境也能使用。其实这句话是重点，按照这个观念很容易决定安装模块时是使用–save 还是–save-dev。</li></ul></li><li>关于 cookie 携带问题<ul><li>cookie 携带：这个问题与你发起 ajax 请求的方式有关</li><li>fetch 在默认情况下, 不管是同域还是跨域 ajax 请求都不会带上 cookie, 只有当设置了 credentials 时才会带上该 ajax 请求所在域的 cookie, 服务端需要设置响应头 Access-Control-Allow-Credentials: true, 否则浏览器会因为安全限制而报错, 拿不到响应</li><li>axios 和 jQuery 在同域 ajax 请求时会带上 cookie, 跨域请求不会, 跨域请求需要设置 withCredentials 和服务端响应头</li><li>默认情况下，一般浏览器的 CORS 跨域请求都是不会发送 cookie 等认证信息到服务端的，除非指定了 xhr.withCredentials = true，但是只有客户端单方面的设置了这个值还不行，服务端也需要同意才可以，所以服务端也需要设置好返回头 Access-Control-Allow-Credentials: true；还有一点要注意的，返回头 Access-Control-Allow-Origin 的值不能为星号，必须是指定的域，否则 cookie 等认证信息也是发送不了。</li></ul></li><li><code>process.argv</code>属性返回一个数组，这个数组包含了启动 Node.js 进程时的命令行参数。第一个元素为 process.execPath。如果需要获取 argv[0]的值请参见 node 文档的 process.argv0。第二个元素为当前执行的 JavaScript 文件路径。剩余的元素为其他命令行参数。</li><li><p>CORS 的相关设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: * // 跨域时，如果客户端ajax设置了withCredentials: true，就不可以为通配符，否则浏览器还是会跨域拦截</span><br><span class="line">Access-Control-Allow-Credentials: true // 表示客户端是否可以发送Cookie</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax set 跨域携带证书</span></span><br><span class="line">xhrFields: &#123;</span><br><span class="line">  withCredentials: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否为对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">"[object Object]"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(1,eval)(“str”) 等价于 (eval)(‘str’) =&gt; eval(‘str’)</p></li><li><code>(1,2,3,4) === 4 // true</code></li><li>易混淆的判断真假<ul><li>0 判断为 false</li><li>“0” 判断为 true</li><li>“” 判断为 false</li><li>“null” 判断为 true</li></ul></li><li>Promise 相关写法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(value)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">"err"</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">"err"</span>))</span><br></pre></td></tr></table></figure><ol start="12"><li><p>pm2 常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs 显示所有进程日志</span><br><span class="line">$ pm2 stop all 停止所有进程</span><br><span class="line">$ pm2 restart all 重启所有进程</span><br><span class="line">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class="line">$ pm2 stop 0 停止指定的进程</span><br><span class="line">$ pm2 restart 0 重启指定的进程</span><br><span class="line">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class="line">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class="line">$ pm2 delete 0 杀死指定的进程</span><br><span class="line">$ pm2 delete all 杀死全部进程</span><br><span class="line"></span><br><span class="line">运行进程的不同方式：</span><br><span class="line">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class="line">$ pm2 start app.js -i 3 启动3个进程</span><br><span class="line">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class="line">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class="line">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class="line">$ pm2 stop serverone 停止 serverone 进程</span><br><span class="line">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class="line">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class="line">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure></li><li><p>pm2 启动文件</p><ul><li>apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用</li><li>name:应用程序名称</li><li>cwd:应用程序所在的目录</li><li>script:应用程序的脚本路径</li><li>log_date_format:</li><li>error_file:自定义应用程序的错误日志文件</li><li>out_file:自定义应用程序日志文件</li><li>pid_file:自定义应用程序的 pid 文件</li><li>instances:</li><li>min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量</li><li>max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）</li><li>cron_restart:定时启动，解决重启能解决的问题</li><li>watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。</li><li>merge_logs:</li><li>exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li><li>exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li><li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li><li>vizion:启用/禁用 vizion 特性(版本控制)</li></ul></li><li><p>onpagehide,onunload,onpageshow,onload</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow</span><br><span class="line">// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发</span><br><span class="line">event.persisted 判断页面是否从缓存中加载</span><br></pre></td></tr></table></figure><ol start="15"><li><p>JS 模块化写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count + count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>得到一个键盘</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用字符串返回一个键盘图形</span></span><br><span class="line">;(<span class="function"><span class="params">_</span> =&gt;</span></span><br><span class="line">  [...<span class="string">"`1234567890-=~~QWERTYUIOP[]\\~ASDFGHJKL;'~~ZXCVBNM,./~"</span>].map(</span><br><span class="line">    x =&gt;</span><br><span class="line">      ((o += <span class="string">`/<span class="subst">$&#123;(b = <span class="string">"_"</span>.repeat(</span></span></span><br><span class="line"><span class="string"><span class="subst">        (w =</span></span></span><br><span class="line"><span class="string"><span class="subst">          x &lt; y</span></span></span><br><span class="line"><span class="string"><span class="subst">            ? <span class="number">2</span></span></span></span><br><span class="line"><span class="string"><span class="subst">            : <span class="string">" 667699"</span>[</span></span></span><br><span class="line"><span class="string"><span class="subst">                ((x = [<span class="string">"BS"</span>, <span class="string">"TAB"</span>, <span class="string">"CAPS"</span>, <span class="string">"ENTER"</span>][p++] || <span class="string">"SHIFT"</span>), p)</span></span></span><br><span class="line"><span class="string"><span class="subst">              ])</span></span></span><br><span class="line"><span class="string"><span class="subst">      ))&#125;</span>\\|`</span>),</span><br><span class="line">      (m += y + (x + <span class="string">"    "</span>).slice(<span class="number">0</span>, w) + y + y),</span><br><span class="line">      (n += y + b + y + y),</span><br><span class="line">      (l += <span class="string">" __"</span> + b))[<span class="number">73</span>] &amp;&amp; (k.push(l, m, n, o), (l = <span class="string">""</span>), (m = n = o = y)),</span><br><span class="line">    (m = n = o = y = <span class="string">"|"</span>),</span><br><span class="line">    (p = l = k = [])</span><br><span class="line">  ) &amp;&amp;</span><br><span class="line">  k.join<span class="string">`</span></span><br><span class="line"><span class="string">`</span>)()</span><br></pre></td></tr></table></figure><ol start="17"><li><p>中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> typing = <span class="literal">false</span></span><br><span class="line">$(<span class="string">"#ipt"</span>).on(<span class="string">"compositionstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  typing = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">"#ipt"</span>).on(<span class="string">"compositionend"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  typing = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//oninput在oncompositionend之前执行，需加定时器</span></span><br><span class="line">$(<span class="string">"#ipt"</span>).on(<span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!typing) &#123;</span><br><span class="line">      <span class="comment">//To do something...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//或用keyup代替input</span></span><br><span class="line">$(<span class="string">"#ipt"</span>).on(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!typing) &#123;</span><br><span class="line">    <span class="comment">//To do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Navicat Premium for Mac的破解教程<br><code>https://www.jianshu.com/p/f3ef78deadaa</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结笔记20190415</title>
      <link href="//0415-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020190415/"/>
      <url>//0415-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020190415/</url>
      
        <content type="html"><![CDATA[<ol><li>Async/Await 从 Node 版本 v7.6.0 开始支持</li><li>setTimeout 的定时器值推荐最小使用 16.7ms 的原因（16.7 = 1000 / 60, 即每秒 60 帧）</li><li><p>超出部分展示省略号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// css控制行数展示，省略号</span><br><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  word-wrap: break-word; // 允许长单词换行到下一行</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">  text-overflow: ellipsis; // 显示省略符号来代表被修剪的文本 string 可以给定string</span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line">  -webkit-line-clamp: 3; // Safari、Opera 以及 Chrome</span><br><span class="line">  <span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vscode 中 vue 无法格式化</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"js-beautify-html"</span>: &#123;</span><br><span class="line">      <span class="attr">"wrap_attributes"</span>: <span class="string">"force-aligned"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"prettyhtml"</span>: &#123;</span><br><span class="line">      <span class="attr">"printWidth"</span>: <span class="number">100</span>,</span><br><span class="line">      <span class="attr">"singleQuote"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"wrapAttributes"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"sortAttributes"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    // --- 解决问题 ---</span><br><span class="line">    "prettier": &#123;</span><br><span class="line">      "semi": false,</span><br><span class="line">      "singleQuote": true</span><br><span class="line">    &#125;</span><br><span class="line">    // --- 解决问题 ---</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>offsetTop，获取的距离最近的 offsetParent 的顶部高度，offsetParent 是距离该元素设置过 postion 的父元素（设置过定位的父元素）、否则 offsetParent 就是 body 元素 getBoundingClientRect() // 使用该方法，获取距离视窗顶部的高度</p></li><li>window.scrollTo(x, y) x,y 为小数时，实际滚动时，是向下取整</li><li>p 标签中不能包含 display:block 的元素，否则浏览器解析错误</li><li>_.isEmpty(123) === true 纯数字判断为真，一般校验对象</li><li>想要 div 触发 focus 和 blur，需要添加 tabIndex 属性</li><li><p>判断空数组，空对象方法 Object.keys().length !== 0</p></li><li><p>判断是否为对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Object]'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(1,eval)(“str”) 等价于 (eval)(‘str’) =&gt; eval(‘str’)</p></li><li><code>(1,2,3,4) === 4 // true</code></li><li>易混淆的判断真假<ul><li>0 判断为 false</li><li>“0” 判断为 true</li><li>“” 判断为 false</li><li>“null” 判断为 true</li></ul></li><li><p>Promise 相关写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(value)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.reject(<span class="string">'err'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">'err'</span>))</span><br></pre></td></tr></table></figure></li><li><p>pm2 常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 logs 显示所有进程日志</span><br><span class="line">$ pm2 stop all 停止所有进程</span><br><span class="line">$ pm2 restart all 重启所有进程</span><br><span class="line">$ pm2 reload all 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class="line">$ pm2 stop 0 停止指定的进程</span><br><span class="line">$ pm2 restart 0 重启指定的进程</span><br><span class="line">$ pm2 startup 产生 init 脚本 保持进程活着</span><br><span class="line">$ pm2 web 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class="line">$ pm2 delete 0 杀死指定的进程</span><br><span class="line">$ pm2 delete all 杀死全部进程</span><br><span class="line"></span><br><span class="line">运行进程的不同方式：</span><br><span class="line">$ pm2 start app.js -i max 根据有效CPU数目启动最大进程数目</span><br><span class="line">$ pm2 start app.js -i 3 启动3个进程</span><br><span class="line">$ pm2 start app.js -x 用fork模式启动 app.js 而不是使用 cluster</span><br><span class="line">$ pm2 start app.js -x -- -a 23 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class="line">$ pm2 start app.js --name serverone 启动一个进程并把它命名为 serverone</span><br><span class="line">$ pm2 stop serverone 停止 serverone 进程</span><br><span class="line">$ pm2 start app.json 启动进程, 在 app.json里设置选项</span><br><span class="line">$ pm2 start app.js -i max -- -a 23 在--之后给 app.js 传递参数</span><br><span class="line">$ pm2 start app.js -i max -e err.log -o out.log 启动 并 生成一个配置文件</span><br></pre></td></tr></table></figure></li><li><p>pm2 启动文件</p><ul><li>apps:json 结构，apps 是一个数组，每一个数组成员就是对应一个 pm2 中运行的应用</li><li>name:应用程序名称</li><li>cwd:应用程序所在的目录</li><li>script:应用程序的脚本路径</li><li>log_date_format:</li><li>error_file:自定义应用程序的错误日志文件</li><li>out_file:自定义应用程序日志文件</li><li>pid_file:自定义应用程序的 pid 文件</li><li>instances:</li><li>min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程- 序异常退出，此时触发重启 max_restarts 设置数量</li><li>max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）</li><li>cron_restart:定时启动，解决重启能解决的问题</li><li>watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自- 动重载。这里也可以设置你要监控的文件。</li><li>merge_logs:</li><li>exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs</li><li>exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork</li><li>autorestart:启用/禁用应用程序崩溃或退出时自动重启</li><li>vizion:启用/禁用 vizion 特性(版本控制)</li></ul></li><li><p>onpagehide,onunload,onpageshow,onload</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发， onpageshow</span><br><span class="line">// 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发</span><br><span class="line">event.persisted 判断页面是否从缓存中加载</span><br></pre></td></tr></table></figure><ol start="15"><li><p>JS 模块化写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.count + count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>得到一个键盘</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用字符串返回一个键盘图形</span></span><br><span class="line">;(<span class="function"><span class="params">_</span> =&gt;</span></span><br><span class="line">  [...<span class="string">"`1234567890-=~~QWERTYUIOP[]\\~ASDFGHJKL;'~~ZXCVBNM,./~"</span>].map(</span><br><span class="line">    x =&gt;</span><br><span class="line">      ((o += <span class="string">`/<span class="subst">$&#123;(b = <span class="string">'_'</span>.repeat(</span></span></span><br><span class="line"><span class="string"><span class="subst">        (w =</span></span></span><br><span class="line"><span class="string"><span class="subst">          x &lt; y</span></span></span><br><span class="line"><span class="string"><span class="subst">            ? <span class="number">2</span></span></span></span><br><span class="line"><span class="string"><span class="subst">            : <span class="string">' 667699'</span>[</span></span></span><br><span class="line"><span class="string"><span class="subst">                ((x = [<span class="string">'BS'</span>, <span class="string">'TAB'</span>, <span class="string">'CAPS'</span>, <span class="string">'ENTER'</span>][p++] || <span class="string">'SHIFT'</span>), p)</span></span></span><br><span class="line"><span class="string"><span class="subst">              ])</span></span></span><br><span class="line"><span class="string"><span class="subst">      ))&#125;</span>\\|`</span>),</span><br><span class="line">      (m += y + (x + <span class="string">'    '</span>).slice(<span class="number">0</span>, w) + y + y),</span><br><span class="line">      (n += y + b + y + y),</span><br><span class="line">      (l += <span class="string">' __'</span> + b))[<span class="number">73</span>] &amp;&amp; (k.push(l, m, n, o), (l = <span class="string">''</span>), (m = n = o = y)),</span><br><span class="line">    (m = n = o = y = <span class="string">'|'</span>),</span><br><span class="line">    (p = l = k = [])</span><br><span class="line">  ) &amp;&amp;</span><br><span class="line">  k.join<span class="string">`</span></span><br><span class="line"><span class="string">`</span>)()</span><br></pre></td></tr></table></figure><ol start="17"><li><p>中文输入下 input 的 compositionstart 与 compositionend，实现仅在选词后触发 input 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> typing = <span class="literal">false</span></span><br><span class="line">$(<span class="string">'#ipt'</span>).on(<span class="string">'compositionstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  typing = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#ipt'</span>).on(<span class="string">'compositionend'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  typing = <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//oninput在oncompositionend之前执行，需加定时器</span></span><br><span class="line">$(<span class="string">'#ipt'</span>).on(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!typing) &#123;</span><br><span class="line">      <span class="comment">//To do something...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//或用keyup代替input</span></span><br><span class="line">$(<span class="string">'#ipt'</span>).on(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!typing) &#123;</span><br><span class="line">    <span class="comment">//To do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint 配置参数说明</title>
      <link href="//0415-Eslint%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/"/>
      <url>//0415-Eslint%20%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="Eslint-配置参数说明"><a href="#Eslint-配置参数说明" class="headerlink" title="Eslint 配置参数说明"></a>Eslint 配置参数说明</h3><ul><li>0 或’off’：关闭规则。</li><li>1 或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。</li><li>2 或’error’：打开规则，并且作为一个错误 (退出码为 1，检查不通过)。</li></ul><a id="more"></a><h3 id="ESLint-常用配置"><a href="#ESLint-常用配置" class="headerlink" title="ESLint 常用配置"></a>ESLint 常用配置</h3><ul><li>Possible Errors 可能的错误或逻辑错误</li><li>no-cond-assign 禁止条件表达式中出现模棱两可的赋值操作符</li><li>no-console 禁用 console</li><li>no-constant-condition 禁止在条件中使用常量表达式</li><li>no-debugger 禁用 debugger</li><li>no-dupe-args 禁止 function 定义中出现重名参数</li><li>no-dupe-keys 禁止对象字面量中出现重复的 key</li><li>no-duplicate-case 禁止出现重复的 case 标签</li><li>no-empty 禁止出现空语句块</li><li>no-ex-assign 禁止对 catch 子句的参数重新赋值</li><li>no-extra-boolean-cast 禁止不必要的布尔转换</li><li>no-extra-parens 禁止不必要的括号</li><li>no-extra-semi 禁止不必要的分号</li><li>no-func-assign 禁止对 function 声明重新赋值</li><li>no-inner-declarations 禁止在嵌套的块中出现变量声明或 function 声明</li><li>no-irregular-whitespace 禁止在字符串和注释之外不规则的空白</li><li>no-obj-calls 禁止把全局对象作为函数调用</li><li>no-sparse-arrays 禁用稀疏数组</li><li>no-prototype-builtins 禁止直接使用 Object.prototypes 的内置属性</li><li>no-unexpected-multiline 禁止出现令人困惑的多行表达式</li><li>no-unreachable 禁止在 return、throw、continue 和 break 语句之后出现不可达代码</li><li>use-isnan 要求使用 isNaN() 检查 NaN</li><li>valid-typeof 强制 typeof 表达式与有效的字符串进行比较</li></ul><h3 id="Best-Practices-最佳实践"><a href="#Best-Practices-最佳实践" class="headerlink" title="Best Practices 最佳实践"></a>Best Practices 最佳实践</h3><ul><li>array-callback-return 强制数组方法的回调函数中有 return 语句</li><li>block-scoped-var 强制把变量的使用限制在其定义的作用域范围内</li><li>complexity 指定程序中允许的最大环路复杂度</li><li>consistent-return 要求 return 语句要么总是指定返回的值，要么不指定</li><li>curly 强制所有控制语句使用一致的括号风格</li><li>default-case 要求 switch 语句中有 default 分支</li><li>dot-location 强制在点号之前和之后一致的换行</li><li>dot-notation 强制在任何允许的时候使用点号</li><li>eqeqeq 要求使用 === 和 !==</li><li>guard-for-in 要求 for-in 循环中有一个 if 语句</li><li>no-alert 禁用 alert、confirm 和 prompt</li><li>no-case-declarations 不允许在 case 子句中使用词法声明</li><li>no-else-return 禁止 if 语句中有 return 之后有 else</li><li>no-empty-function 禁止出现空函数</li><li>no-eq-null 禁止在没有类型检查操作符的情况下与 null 进行比较</li><li>no-eval 禁用 eval()</li><li>no-extra-bind 禁止不必要的 .bind() 调用</li><li>no-fallthrough 禁止 case 语句落空</li><li>no-floating-decimal 禁止数字字面量中使用前导和末尾小数点</li><li>no-implicit-coercion 禁止使用短符号进行类型转换</li><li>no-implicit-globals 禁止在全局范围内使用 var 和命名的 function 声明</li><li>no-invalid-this: 禁止 this 关键字出现在类和类对象之外</li><li>no-lone-blocks 禁用不必要的嵌套块</li><li>no-loop-func 禁止在循环中出现 function 声明和表达式</li><li>no-magic-numbers 禁用魔术数字</li><li>no-multi-spaces 禁止使用多个空格</li><li>no-multi-str 禁止使用多行字符串</li><li>no-new 禁止在非赋值或条件语句中使用 new 操作符</li><li>no-new-func 禁止对 Function 对象使用 new 操作符</li><li>no-new-wrappers 禁止对 String，Number 和 Boolean 使用 new 操作符</li><li>no-param-reassign 不允许对 function 的参数进行重新赋值</li><li>no-redeclare 禁止使用 var 多次声明同一变量</li><li>no-return-assign 禁止在 return 语句中使用赋值语句</li><li>no-script-url 禁止使用 javascript: url</li><li>no-self-assign 禁止自我赋值</li><li>no-self-compare 禁止自身比较</li><li>no-sequences 禁用逗号操作符</li><li>no-unmodified-loop-condition 禁用一成不变的循环条件</li><li>no-unused-expressions 禁止出现未使用过的表达式</li><li>no-useless-call 禁止不必要的 .call() 和 .apply()</li><li>no-useless-concat 禁止不必要的字符串字面量或模板字面量的连接</li><li>vars-on-top 要求所有的 var 声明出现在它们所在的作用域顶部</li><li>Strict Mode 使用严格模式和严格模式指</li><li>strict 要求或禁止使用严格模式指令</li></ul><h3 id="Variables-变量声明"><a href="#Variables-变量声明" class="headerlink" title="Variables 变量声明"></a>Variables 变量声明</h3><ul><li>init-declarations 要求或禁止 var 声明中的初始化</li><li>no-catch-shadow 不允许 catch 子句的参数与外层作用域中的变量同名</li><li>no-restricted-globals 禁用特定的全局变量</li><li>no-shadow 禁止 var 声明 与外层作用域的变量同名</li><li>no-undef 禁用未声明的变量，除非它们在 /global / 注释中被提到</li><li>no-undef-init 禁止将变量初始化为 undefined</li><li>no-unused-vars 禁止出现未使用过的变量</li><li>no-use-before-define 不允许在变量定义之前使用它们</li></ul><h3 id="Nodejs-and-CommonJS-Node-js-CommonJS"><a href="#Nodejs-and-CommonJS-Node-js-CommonJS" class="headerlink" title="Nodejs and CommonJS Node.js,CommonJS"></a>Nodejs and CommonJS Node.js,CommonJS</h3><ul><li>global-require 要求 require() 出现在顶层模块作用域中</li><li>handle-callback-err 要求回调函数中有容错处理</li><li>no-mixed-requires 禁止混合常规 var 声明和 require 调用</li><li>no-new-require 禁止调用 require 时使用 new 操作符</li><li>no-path-concat 禁止对 dirname 和 filename 进行字符串连接</li><li>no-restricted-modules 禁用指定的通过 require 加载的模块</li></ul><h3 id="Stylistic-Issues-风格指南"><a href="#Stylistic-Issues-风格指南" class="headerlink" title="Stylistic Issues 风格指南"></a>Stylistic Issues 风格指南</h3><ul><li>array-bracket-spacing 强制数组方括号中使用一致的空格</li><li>block-spacing 强制在单行代码块中使用一致的空格</li><li>brace-style 强制在代码块中使用一致的大括号风格</li><li>camelcase 强制使用骆驼拼写法命名约定</li><li>comma-spacing 强制在逗号前后使用一致的空格</li><li>comma-style 强制使用一致的逗号风格</li><li>computed-property-spacing 强制在计算的属性的方括号中使用一致的空格</li><li>eol-last 强制文件末尾至少保留一行空行</li><li>func-names 强制使用命名的 function 表达式</li><li>func-style 强制一致地使用函数声明或函数表达式</li><li>indent 强制使用一致的缩进</li><li>jsx-quotes 强制在 JSX 属性中一致地使用双引号或单引号</li><li>key-spacing 强制在对象字面量的属性中键和值之间使用一致的间距</li><li>keyword-spacing 强制在关键字前后使用一致的空格</li><li>linebreak-style 强制使用一致的换行风格</li><li>lines-around-comment 要求在注释周围有空行</li><li>max-depth 强制可嵌套的块的最大深度</li><li>max-len 强制一行的最大长度</li><li>max-lines 强制最大行数</li><li>max-nested-callbacks 强制回调函数最大嵌套深度</li><li>max-params 强制 function 定义中最多允许的参数数量</li><li>max-statements 强制 function 块最多允许的的语句数量</li><li>max-statements-per-line 强制每一行中所允许的最大语句数量</li><li>new-cap 要求构造函数首字母大写</li><li>new-parens 要求调用无参构造函数时有圆括号</li><li>newline-after-var 要求或禁止 var 声明语句后有一行空行</li><li>newline-before-return 要求 return 语句之前有一空行</li><li>newline-per-chained-call 要求方法链中每个调用都有一个换行符</li><li>no-array-constructor 禁止使用 Array 构造函数</li><li>no-continue 禁用 continue 语句</li><li>no-inline-comments 禁止在代码行后使用内联注释</li><li>no-lonely-if 禁止 if 作为唯一的语句出现在 else 语句中</li><li>no-mixed-spaces-and-tabs 不允许空格和 tab 混合缩进</li><li>no-multiple-empty-lines 不允许多个空行</li><li>no-negated-condition 不允许否定的表达式</li><li>no-plusplus 禁止使用一元操作符 ++ 和 –</li><li>no-spaced-func 禁止 function 标识符和括号之间出现空格</li><li>no-ternary 不允许使用三元操作符</li><li>no-trailing-spaces 禁用行尾空格</li><li>no-whitespace-before-property 禁止属性前有空白</li><li>object-curly-newline 强制花括号内换行符的一致性</li><li>object-curly-spacing 强制在花括号中使用一致的空格</li><li>object-property-newline 强制将对象的属性放在不同的行上</li><li>one-var 强制函数中的变量要么一起声明要么分开声明</li><li>one-var-declaration-per-line 要求或禁止在 var 声明周围换行</li><li>operator-assignment 要求或禁止在可能的情况下要求使用简化的赋值操作符</li><li>operator-linebreak 强制操作符使用一致的换行符</li><li>quote-props 要求对象字面量属性名称用引号括起来</li><li>quotes 强制使用一致的反勾号、双引号或单引号</li><li>require-jsdoc 要求使用 JSDoc 注释</li><li>semi 要求或禁止使用分号而不是 ASI</li><li>semi-spacing 强制分号之前和之后使用一致的空格</li><li>sort-vars 要求同一个声明块中的变量按顺序排列</li><li>space-before-blocks 强制在块之前使用一致的空格</li><li>space-before-function-paren 强制在 function 的左括号之前使用一致的空格</li><li>space-in-parens 强制在圆括号内使用一致的空格</li><li>space-infix-ops 要求操作符周围有空格</li><li>space-unary-ops 强制在一元操作符前后使用一致的空格</li><li>spaced-comment 强制在注释中 // 或 /* 使用一致的空格</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5与Native交互</title>
      <link href="//0415-H5%E4%B8%8ENative%E4%BA%A4%E4%BA%92/"/>
      <url>//0415-H5%E4%B8%8ENative%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍三种-APP-的开发模式"><a href="#介绍三种-APP-的开发模式" class="headerlink" title="介绍三种 APP 的开发模式"></a>介绍三种 APP 的开发模式</h3><ul><li>Native</li><li>WebAPP</li><li>HybridAPP</li></ul><h3 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>原生应用。性能最好，交互体验有优势</li><li>可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>更新体验较差、需要用户手动更新。</li><li>苹果商店发布流程繁琐</li><li>使用不同的开发语言，所以开发、维护成本大</li></ol><h3 id="WebAPP"><a href="#WebAPP" class="headerlink" title="WebAPP"></a>WebAPP</h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li>开发成本低，效率快</li><li>跨平台、升级维护简单，不受应用商店限制</li><li>不需要用户下载使用，有浏览器即可访问</li></ol><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ol><li>依赖网络，访问速度受限于终端网速。每次访问，消耗流量</li><li>性能差，用户体验较差（因为需要去远端下载资源）</li><li>无法调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li></ol><h3 id="HybridAPP"><a href="#HybridAPP" class="headerlink" title="HybridAPP"></a>HybridAPP</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li>开发成本较低，效率较快,性能介于 Native 与 WebAPP 之间，可与 Nactive 媲美</li><li>跨平台、实现多端展示同一个交互层</li><li>可以调用移动硬件设备的底层功能（摄像头、日历和地理位置等）</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li>用户需要在应用商店下载，发布流程繁琐</li><li>团队中需要有懂 Web、IOS 开发的技术人员，双方需要配合工作</li></ol><h4 id="Crocodile-框架中通信"><a href="#Crocodile-框架中通信" class="headerlink" title="Crocodile 框架中通信"></a>Crocodile 框架中通信</h4><ol><li>执行 webapck 打包 Hybrid 包时，将 vendor/bridge.js 文件打包至 crocodile.seed.js 中，在前端应用启动时，优先于其他脚本代码加载。</li><li>当 Native 的 webview 加载完成后，调用 H5 的<code>web_view_finished_load</code>接口获取 Nacti 端的基本信息(版本、系统参数…)</li></ol><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">WebSettings webSettings = mWebView.getSettings();</span><br><span class="line"><span class="comment">//Android容器允许JS脚本</span></span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//Android容器设置侨连对象</span></span><br><span class="line">mWebView.addJavascriptInterface(getJSBridge(), <span class="string">"JSBridge"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Android4.2版本以上，本地方法要加上注解@JavascriptInterface，否则会找不到方法。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getJSBridge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object insertObj = <span class="keyword">new</span> Object()&#123;</span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"foo"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JavascriptInterface</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">foo2</span><span class="params">(<span class="keyword">final</span> String param)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"foo2:"</span> + param;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> insertObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JS-调用"><a href="#JS-调用" class="headerlink" title="JS 调用"></a>JS 调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用方法一</span></span><br><span class="line"><span class="built_in">window</span>.JSBridge.foo() <span class="comment">//返回:'foo'</span></span><br><span class="line"><span class="comment">//调用方法二</span></span><br><span class="line"><span class="built_in">window</span>.JSBridge.foo2(<span class="string">'test'</span>) <span class="comment">//返回:'foo2:test'</span></span><br></pre></td></tr></table></figure><h5 id="4-4-版本前"><a href="#4-4-版本前" class="headerlink" title="4.4 版本前"></a>4.4 版本前</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mWebView = new WebView(this); //即当前webview对象</span></span><br><span class="line">mWebView.loadUrl(<span class="string">"javascript: 方法名('参数,需要转为字符串')"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ui线程中运行</span></span><br><span class="line"> runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mWebView.loadUrl(<span class="string">"javascript: 方法名('参数,需要转为字符串')"</span>);</span><br><span class="line">            Toast.makeText(Activity名.<span class="keyword">this</span>, <span class="string">"调用方法..."</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="4-4-版本后（包括）"><a href="#4-4-版本后（包括）" class="headerlink" title="4.4 版本后（包括）"></a>4.4 版本后（包括）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步执行JS代码,并获取返回值</span></span><br><span class="line">mWebView.evaluateJavascript(<span class="string">"javascript: 方法名('参数,需要转为字符串')"</span>, <span class="keyword">new</span> ValueCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里的value即为对应JS方法的返回值</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数防抖、函数节流</title>
      <link href="//0214-%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/"/>
      <url>//0214-%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h1 id="函数消抖（debounce）"><a href="#函数消抖（debounce）" class="headerlink" title="函数消抖（debounce）"></a>函数消抖（debounce）</h1><blockquote><p>当调用函数 n 秒后，才会执行该动作，若在这 n 秒内又调用该函数则将取消前一次并重新计算执行时间</p></blockquote><h2 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h2><blockquote><p>设定一个全局变量保存定时器，事件触发时，判断定时器是否存在，存在时，消除定时器，不存在时，重新设定定时器，确保一段时间内，只存在一个定时器。</p></blockquote><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'log'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn()</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = _debounce(_log, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h1 id="函数节流（throttle）"><a href="#函数节流（throttle）" class="headerlink" title="函数节流（throttle）"></a>函数节流（throttle）</h1><blockquote><p>函数预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期</p></blockquote><h2 id="代码原理-1"><a href="#代码原理-1" class="headerlink" title="代码原理"></a>代码原理</h2><blockquote><p>定义一个时间周期，当调用动作频率小于定义的时间周期，则进入下一周期，不会频繁触发</p></blockquote><h2 id="伪代码-1"><a href="#伪代码-1" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'log'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_throttle</span>(<span class="params">method, duration</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> begin = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">      _args = <span class="built_in">arguments</span>,</span><br><span class="line">      current = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (current - begin &gt;= duration) &#123;</span><br><span class="line">      method.apply(_this, _args)</span><br><span class="line">      begin = current</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = _throttle(_log, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx开启gzip配置</title>
      <link href="//0201-ngixn%E5%BC%80%E5%90%AFgzip%E9%85%8D%E7%BD%AE/"/>
      <url>//0201-ngixn%E5%BC%80%E5%90%AFgzip%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-开启-gzip-配置"><a href="#Nginx-开启-gzip-配置" class="headerlink" title="Nginx 开启 gzip 配置"></a>Nginx 开启 gzip 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name  www.utone.xyz;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    gzip_comp_level 5;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]."</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /data/blog/shixiaohu2206.github.io;</span><br><span class="line">        <span class="comment">#error_page  404/data/blog/shixiaohu2206.github.io/404.html;</span></span><br><span class="line">        <span class="comment">#try_files $uri /index.html;</span></span><br><span class="line">        index index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>gzip on<br>设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。</li><li>gzip_buffers 4 16k<br>获取多少内存用于缓存压缩结果，‘4 16k’表示以 16k*4 为单位获得</li><li>gzip_comp_level 5<br>gzip 压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;</li><li>gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php<br>对特定的 MIME 类型生效,其中’text/html’被系统强制启用</li><li>gzip_http_version 1.1<br>识别 http 协议的版本,早起浏览器可能不支持 gzip 自解压,用户会看到乱码</li><li>gzip_vary on<br>启用应答头”Vary: Accept-Encoding”</li><li>gzip_proxied off<br>nginx 做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果 header 头中包括”Expires”头信息),no-cache(启用压缩,header 头中包含”Cache-Control:no-cache”),no-store(启用压缩,header 头中包含”Cache-Control:no-store”),private(启用压缩,header 头中包含”Cache-Control:private”),no_last_modefied(启用压缩,header 头中不包含”Last-Modified”),no_etag(启用压缩,如果 header 头中不包含”Etag”头信息),auth(启用压缩,如果 header 头中包含”Authorization”头信息)</li><li>gzip_disable msie6<br>(IE5.5 和 IE6 SP1 使用 msie6 参数来禁止 gzip 压缩 )指定哪些不需要 gzip 压缩的浏览器(将和 User-Agents 进行匹配),依赖于 PCRE 库</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚动置顶元素</title>
      <link href="//0130-%E6%BB%9A%E5%8A%A8%E7%BD%AE%E9%A1%B6%E5%85%83%E7%B4%A0/"/>
      <url>//0130-%E6%BB%9A%E5%8A%A8%E7%BD%AE%E9%A1%B6%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="首先设置父元素为相对定位"><a href="#首先设置父元素为相对定位" class="headerlink" title="首先设置父元素为相对定位"></a>首先设置父元素为相对定位</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置一个-fixed-的-class"><a href="#设置一个-fixed-的-class" class="headerlink" title="设置一个 fixed 的 class"></a>设置一个 fixed 的 class</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jqeury-伪代码"><a href="#jqeury-伪代码" class="headerlink" title="jqeury 伪代码"></a>jqeury 伪代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 元素距离屏幕顶端的高度</span></span><br><span class="line">  <span class="keyword">var</span> _offectTop = $(<span class="string">'.introduce'</span>).offset().top</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 滚动事件</span></span><br><span class="line">  $(<span class="built_in">document</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 滚动距离document的top高度</span></span><br><span class="line">    <span class="keyword">var</span> _scrollTop = $(<span class="built_in">document</span>).scrollTop()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 32 为距离顶部的流出的距离相当于2rem</span></span><br><span class="line">    <span class="keyword">if</span> (_scrollTop &gt;= _offectTop - <span class="number">32</span>) &#123;</span><br><span class="line">      $(<span class="string">'.introduce'</span>).addClass(<span class="string">'fixed'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">      $(<span class="string">'.introduce'</span>).removeClass(<span class="string">'fixed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JS-原生代码实现"><a href="#JS-原生代码实现" class="headerlink" title="JS 原生代码实现"></a>JS 原生代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目前将父元素设置margin-top，不设置相对定位，解决锚点bug</span></span><br><span class="line"><span class="comment"> * todo目前遇到BUG，点击锚点后，元素置顶了</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 原生offsetTop取值为相对于父元素， jquery的offset().top是取的距离屏幕顶部的距离</span></span><br><span class="line"><span class="comment">   * 所以这里取父元素的offestTop</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  <span class="keyword">var</span> _parentDom = <span class="built_in">document</span>.getElementById(<span class="string">'main-left'</span>)</span><br><span class="line">  <span class="keyword">var</span> _offectTop = _parentDom.offsetTop</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _needTopDom = <span class="built_in">document</span>.getElementById(<span class="string">'introduce'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取滚动距离document的高度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 声明了&lt;!DOCTYPE html&gt;，使用document.documentElement.scrollTop</span></span><br><span class="line"><span class="comment">     * 没有声明，使用document.body.scrollTop</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">var</span> _scrollTop =</span><br><span class="line">      <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 32为距离顶部的流出的距离相当于2rem</span></span><br><span class="line">    <span class="keyword">if</span> (_scrollTop &gt; _offectTop - <span class="number">32</span>) &#123;</span><br><span class="line">      _needTopDom.classList.add(<span class="string">'fixed'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _needTopDom.classList.remove(<span class="string">'fixed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结笔记20190104</title>
      <link href="//0104-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020190104/"/>
      <url>//0104-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020190104/</url>
      
        <content type="html"><![CDATA[<h3 id="lodash-函数"><a href="#lodash-函数" class="headerlink" title="lodash 函数"></a>lodash 函数</h3><ul><li>_.camelCase([string=’’])：转换字符串为 驼峰写法(小驼峰)</li><li>_.isNil(value)：检查 value 是否是 null 或者 undefined。</li><li>_.size()：返回集合的长度或对象中可枚举属性的个数。</li><li>_.isPlainObject(): 检查是否是普通对象。 也就是说该对象由 Object 构造函数创建，或者 [[Prototype]] 为 null</li><li>_.pick(object, *keys) 返回一个只有列入挑选 key 属性的对象</li><li>_.omit(object, [props]) 反向版的 pick，忽略[props]，返回之外的属性</li><li>_.identity(value) stooge === _.identity(stooge); // true 返回本身</li><li>_.rest(arguments, 0): ( 默认从 1 位开始),返回 0 位之后的数组</li></ul><h3 id="node-全局对象"><a href="#node-全局对象" class="headerlink" title="node 全局对象"></a>node 全局对象</h3><ul><li>process.cwd()获得当前执行 node 命令时候的文件夹目录名</li><li>process.execPath 属性，返回启动 Node.js 进程的可执行文件所在的绝对路径<code>/usr/local/bin/node</code></li><li><p>process.argv 属性返回一个数组,数组包含了启动 Node.js 进程时的命令行参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ node process-args.js one two=three four</span><br><span class="line">/**</span><br><span class="line">    0: /usr/local/bin/node</span><br><span class="line">    1: /Users/mjr/work/node/process-args.js</span><br><span class="line">    2: one</span><br><span class="line">    3: two=three</span><br><span class="line">    4: four</span><br><span class="line">**/</span><br></pre></td></tr></table></figure></li><li><p>__dirname 获得当前执行文件所在目录的完整目录名</p></li><li>__filename 获得当前执行文件的带有完整绝对路径的文件名</li></ul><h3 id="Javascript-相关"><a href="#Javascript-相关" class="headerlink" title="Javascript 相关"></a>Javascript 相关</h3><ul><li><p>toFixed() 方法可把 Number 四舍五入为指定小数位数的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.jianshu.com/p/849b0ae36b36 不可用于高精度运算，金钱运算</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1.335</span></span><br><span class="line"><span class="built_in">console</span>.log(a.toFixed(<span class="number">2</span>))</span><br><span class="line"><span class="comment">// IE      1.34</span></span><br><span class="line"><span class="comment">//chorme   1.33</span></span><br></pre></td></tr></table></figure></li><li><p>Javascript 按位取反运算符 (~)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Javascript 按位取反运算符 (~) ，对一个表达式执行位非（求非）运算。</span><br><span class="line">// 就来看看~1的计算步骤：</span><br><span class="line">// 将1(这里叫：原码)转二进制 ＝ 00000001 按位取反 ＝ 11111110 发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001 末位加1取其补码 ＝ 10000010 转换回十进制 ＝ -2</span><br><span class="line">var str = &apos;123456&apos;</span><br><span class="line">// ~-1 === 0</span><br><span class="line">if(~str.indexOf(0))&#123;</span><br><span class="line">  console.log(&apos;str包含0&apos;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log(&apos;str不包含0&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>面试题实现<code>(a==1 &amp;&amp; a==2 &amp;&amp; a==3) === true</code> 双等于号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const a = &#123; value : 0 &#125;;</span><br><span class="line">a.valueOf = function() &#123;</span><br><span class="line">    return this.value += 1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(a==1 &amp;&amp; a==2 &amp;&amp; a==3); //true</span><br></pre></td></tr></table></figure></li><li><p>面试题实现<code>(a===1 &amp;&amp; a===2 &amp;&amp; a===3) === true</code> 全等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// window.value</span><br><span class="line">var value = 0;</span><br><span class="line"></span><br><span class="line">// 重写get取值方式</span><br><span class="line">Object.defineProperty(window, &apos;a&apos;, &#123;</span><br><span class="line">    get: function() &#123;</span><br><span class="line">        return this.value += 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(a===1 &amp;&amp; a===2 &amp;&amp; a===3) // true</span><br></pre></td></tr></table></figure></li><li><p>利用 es6 函数 reduce，并行执行 promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> bizs.reduce(<span class="function">(<span class="params">pro, biz</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> pro.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.copySingleWithObserve(biz))</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve())</span><br></pre></td></tr></table></figure></li><li><p>Object.create(null) 与 {} 区别</p><ul><li>区别<ol><li>Object.create(null)不会继承 Object 原型上的任何东西 如没有继承方法 toString(){}创建的新对象会继承所有 Object 的属性</li><li>因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等</li></ol></li><li>为什么用 Object.create(null)<ol><li>因为使用 create 创建的没有任何属性 可以自己定义 hasOwnProperty,toString()方法等</li><li>for in 循环的时候不会再遍历原型链上的属性 ,使用 create(null)就不会再对属性进行检查了,也可以使用 Object.keys[]</li></ol></li><li>什么时候用 Object.create(null)<ol><li>你需要一个非常干净且高度可定制的对象当做数据字典的时候,比如 serverAPI 里的一些变量</li><li>减少 hasOwnProperty 造成的性能损失</li></ol></li></ul></li></ul><h3 id="require-和-import"><a href="#require-和-import" class="headerlink" title="require 和 import"></a>require 和 import</h3><ol><li><p>require</p><ul><li>commonJS（适用于服务端，同步加载）<ol><li>运行时加载</li><li>拷贝到本页面</li><li>全部引入</li><li>模块写法分 exports 和 module.exports。</li></ol></li><li><p>AMD (适用于客户端，异步加载)</p><ul><li>AMD 是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//require([module], callback);</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">    math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 模块写法 dependencies依赖模块</span></span><br><span class="line">define(id?, dependencies?, factory)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CMD</p><ul><li>CMD 是”Common Module Definition”的缩写。类似于 requirejs，但是 seajs 是依赖就近，延迟执行，requirejs 是依赖前置，提前执行。</li></ul></li></ul></li><li><p>import</p><blockquote><p>推荐使用 ES6 的 import</p></blockquote><ul><li>编译时加载</li><li>只引用定义</li><li>按需加载</li></ul></li></ol><h3 id="NodeJS-查看-ES6-支持率"><a href="#NodeJS-查看-ES6-支持率" class="headerlink" title="NodeJS 查看 ES6 支持率"></a>NodeJS 查看 ES6 支持率</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// nodejs 8.0以上支持原生es6方法</span><br><span class="line">$ node -v</span><br><span class="line">v10.13.</span><br><span class="line"></span><br><span class="line">npm install -g es-checker</span><br><span class="line">// 安装完毕，运行</span><br><span class="line">es-checke</span><br><span class="line"></span><br><span class="line">// 查看当前版本es6原生支持率92%</span><br><span class="line">=========================================</span><br><span class="line">Passes 39 feature Detections</span><br><span class="line">Your runtime supports 92% of ECMAScript 6</span><br><span class="line">=========================================</span><br></pre></td></tr></table></figure><h3 id="package-json-中配置版本号"><a href="#package-json-中配置版本号" class="headerlink" title="package.json 中配置版本号"></a>package.json 中配置版本号</h3><ol><li>‘~’: ‘~2.3.1’,则更新’2.3.x’中最新的小版本,不会去更新’2.4.x’</li><li>‘^’: ‘^2.2.2’,则会去找’2.x.x’中最新的，不会去更新’3.x.x’</li></ol><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout的一道面试题</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="comment">//5,5,5,5,5</span></span><br></pre></td></tr></table></figure><p>为什么会输出 5,5,5,5,5，而不是 0,1,2,3,4，因为 setTimeout 在 for 循环中异步的执行，将输出打印的操作，队列在 for 循环执行完之后。</p><h3 id="删除-js-数组中的某个元素"><a href="#删除-js-数组中的某个元素" class="headerlink" title="删除 js 数组中的某个元素"></a>删除 js 数组中的某个元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'ALL'</span>]</span><br><span class="line"><span class="keyword">var</span> _str = _arr.join(<span class="string">','</span>)</span><br><span class="line"><span class="keyword">var</span> _index = _str.indexOf(<span class="string">'ALL'</span>) <span class="comment">// 获取"ALL"的位置</span></span><br><span class="line">_arr.splice(_index, <span class="number">1</span>) <span class="comment">// 去除该元素（会改变原数组）</span></span><br><span class="line"><span class="built_in">console</span>.log(_arr) <span class="comment">// ["a", "b", "c"]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符的最长子串</title>
      <link href="//1017-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>//1017-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  无重复字符的最长子串</span></span><br><span class="line"><span class="comment"> *  leetcode 算法题3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法一</span></span><br><span class="line"><span class="keyword">var</span> map = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> head = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (i; i &lt; s.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (map[s[i]] &gt;= head) &#123;</span><br><span class="line">    head = map[s[i]] + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  map[s[i]] = i</span><br><span class="line">  max = max &gt; i - head + <span class="number">1</span> ? max : i - head + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法二</span></span><br><span class="line"><span class="keyword">const</span> map = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> max = s.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">max, v, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * map[v] 初始为underfined，表明s[i]还没出现过，</span></span><br><span class="line"><span class="comment">   * 一旦map[v]有值了，且大于left，就将left的值设为map[v]后一位</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  left = map[v] &gt;= left ? map[v] + <span class="number">1</span> : left</span><br><span class="line">  map[v] = i</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(max, i - left + <span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css浮动后父元素高度坍塌</title>
      <link href="//1017-css%E6%B5%AE%E5%8A%A8%E5%90%8E%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C/"/>
      <url>//1017-css%E6%B5%AE%E5%8A%A8%E5%90%8E%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%9D%8D%E5%A1%8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  *  父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷</span></span><br><span class="line"><span class="comment">  *  所以要清除浮动</span></span><br><span class="line"><span class="comment">  *  给父级添加overflow:hidden 清除浮动方法</span></span><br><span class="line"><span class="comment">  *  万能清除法 after伪类 清浮动(现在主流方法，推荐使用)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.float_div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
            <tag> Float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hasOwnProperty原型链方法</title>
      <link href="//1017-hasOwnProperty%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%96%B9%E6%B3%95/"/>
      <url>//1017-hasOwnProperty%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Object的hasOwnProperty()方法返回一个布尔值</span></span><br><span class="line"><span class="comment"> *  判断对象是否包含特定的自身（非继承）属性。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  在看开源项目的过程中，经常会看到类似如下的源码</span></span><br><span class="line"><span class="comment"> *  for...in循环对象的所有枚举属性</span></span><br><span class="line"><span class="comment"> *  然后再使用hasOwnProperty()方法来忽略继承属性。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  hasOwnProperty: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  bar: <span class="string">'Here be dragons'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.hasOwnProperty(<span class="string">'bar'</span>) <span class="comment">// 始终返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法</span></span><br><span class="line"><span class="comment">// 使用另一个对象的`hasOwnProperty` 并且call</span></span><br><span class="line">;(&#123;&#125;.hasOwnProperty.call(foo, <span class="string">'bar'</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用 Object 原型上的 hasOwnProperty 属性</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty.call(foo, <span class="string">'bar'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结笔记20181017</title>
      <link href="//1017-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020181017/"/>
      <url>//1017-%E6%80%BB%E7%BB%93%E7%AC%94%E8%AE%B020181017/</url>
      
        <content type="html"><![CDATA[<ul><li>node 连接数据库时需要设置时区，不然查出来的时间格式不是东八区</li><li>no-referrer-when-downgrade 是 chrome 自动加的，表示从 https 降级到 http 时不发送 reffer</li><li>Buffer.byteLength 获取字符串的字节长度</li><li>position: sticky</li><li>设置父元素 overflow:hidden 解决浮动后没有高度</li></ul><a id="more"></a><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚合</span></span><br><span class="line">array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">total, currentValue, currentIndex, arr</span>), <span class="title">initialValue</span>)</span></span><br><span class="line"><span class="function"><span class="title">initialValue</span> 初始值</span></span><br><span class="line"><span class="function"><span class="title">total</span>必需。初始值, 或者计算结束后的返回值。</span></span><br><span class="line"><span class="function"><span class="title">currentValue</span>必需。当前元素</span></span><br><span class="line"><span class="function"><span class="title">currentIndex</span>可选。当前元素的索引</span></span><br><span class="line"><span class="function"><span class="title">arr</span>可选。当前元素所属的数组对象。</span></span><br></pre></td></tr></table></figure></li><li><p>[]==![] true<br>在相等运算符中，如果运算符两边的值有一个是布尔类型，则会把 true 转换成 1，false 则转换为 0<br>相等运算符如果有一边是数字，而另一边是对象，则会把对象转换成数字。而空的数组对象转换成数字是 0<br>![]会转化为 0, 而空的数组对象[]转换成数字是 0 所以为 true<br>[]===![] 全等的话，为 false</p></li><li><p>函数声明、函数表达式</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f1) <span class="comment">// function f1() &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 函数声明</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f2) <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 函数表达式</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>node 最新版本 Node.js 10.11.0 2018-09-19 6.8.275.32 6.4.1 64</p></li><li>使用 Array.every 和 Array.some 来处理全部/部分满足条件</li><li><p>因为作用域链，外部不能访问内部的变量和方法，这时我们就需要通过闭包，返回内部的方法和变量给外部，从而就形成了一个闭包。</p></li><li><p>弹簧振动效果 css，类似于苹果手机打开图片 Transition: 0.6s cubic-bezir(.29,1.1,.29,1.1)</p></li><li>github 徽章 <a href="https://img.shields.io/discourse/https/meta.discourse.org/topics.svg" target="_blank" rel="noopener">https://img.shields.io/discourse/https/meta.discourse.org/topics.svg</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript深拷贝</title>
      <link href="//1017-JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>//1017-JavaScript%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<ol><li>slice 和 concat 这两个方法，仅适用于对不包含引用对象的一维数组的深拷贝，对于对象数组的操作，还是浅拷贝</li></ol><a id="more"></a><ol start="2"><li>JSON 对象的 parse 和 stringify （对象中不含有函数的话。JSON 解析反解析就行了,对于有函数属性的话，不起作用，会直接去除 function）</li><li><code>$.extend( [deep]</code>, <code>target</code>, <code>object1 [, objectN] )</code> jquery 的方法 <code>extend b=$.extend(true,[],a)</code>;</li><li><p>递归复制</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a)) <span class="comment">//深复制包含子对象</span></span><br><span class="line"><span class="keyword">let</span> c = &#123; ...a &#125; <span class="comment">//拷贝一层但不包含子对象</span></span><br><span class="line">b = a <span class="comment">//浅拷贝</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型 是深拷贝</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 2, 1 ，a b指向不同的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型指向同一份数据</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">c</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a.c = <span class="number">2</span></span><br><span class="line"><span class="built_in">console</span>.log(a.c, b.c) <span class="comment">// 2, 2 全是 2，a b 指向同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法 1:通过递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> c = c || &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> o[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (o[i].constructor === <span class="built_in">Array</span>) &#123;</span><br><span class="line">        c[i] = []</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c[i] = &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      deepCopy(c[i], o[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      c[i] = o[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法 2:通过 json 解析 function不可复制</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(test))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断函数是否是Promise函数</title>
      <link href="//0929-%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AFPromise%E5%87%BD%E6%95%B0/"/>
      <url>//0929-%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AFPromise%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断函数是否是Promise函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    !!obj &amp;&amp;</span><br><span class="line">    (<span class="keyword">typeof</span> obj === <span class="string">'object'</span> || <span class="keyword">typeof</span> obj === <span class="string">'function'</span>) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> obj.then === <span class="string">'function'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usort自定义排序</title>
      <link href="//0925-usort%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
      <url>//0925-usort%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="usort-自定义排序"><a href="#usort-自定义排序" class="headerlink" title="usort 自定义排序"></a>usort 自定义排序</h2><blockquote><p>工作上需要对 php 数组自定义排序，使用了 usort 函数，但若比较参数中，出现空字符串时，这样含有空字符串的元素就是拍在前面</p></blockquote><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$demo = [<span class="string">"3"</span>, <span class="string">"2"</span> ,<span class="string">""</span>, <span class="string">"5"</span>, <span class="string">""</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义排序函数</span></span><br><span class="line">usort($demo, <span class="string">"myusort"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不考虑元素为空字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myusort</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 差值</span></span><br><span class="line">   $diff = strtotime($a) - strtotime($b);</span><br><span class="line">   <span class="keyword">if</span> ($diff == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> $diff &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 结果为</span></span><br><span class="line"><span class="comment">array (size=5)</span></span><br><span class="line"><span class="comment">  0 =&gt; string "" (length=0)</span></span><br><span class="line"><span class="comment">  1 =&gt; string "" (length=0)</span></span><br><span class="line"><span class="comment">  2 =&gt; string "2" (length=1)</span></span><br><span class="line"><span class="comment">  3 =&gt; string "3" (length=1)</span></span><br><span class="line"><span class="comment">  4 =&gt; string "5" (length=1)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>现需求为元素为空字符串时，排在末尾</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 考虑元素为空字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $a 为后一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $b 为前一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int 返回1，则位置不变化，返回-1则调换位置</span></span><br><span class="line"><span class="comment"> * 返回0时、如果两个元素比较结果相同，则它们在排序后的数组中的顺序未经定义。</span></span><br><span class="line"><span class="comment"> * 到 PHP 4.0.6 之前，用户自定义函数将保留这些元素的原有顺序。</span></span><br><span class="line"><span class="comment"> * 但是由于在 4.1.0 中引进了新的排序算法，结果将不是这样了，因为对此没有一个有效的解决方案</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myusort</span><span class="params">($a, $b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单独做处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($a)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($b)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 差值</span></span><br><span class="line">   $diff = strtotime($a) - strtotime($b);</span><br><span class="line">   <span class="keyword">if</span> ($diff == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">return</span> $diff &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果为</span></span><br><span class="line"><span class="comment">array (size=5)</span></span><br><span class="line"><span class="comment">  0 =&gt; string "2" (length=1)</span></span><br><span class="line"><span class="comment">  1 =&gt; string "3" (length=1)</span></span><br><span class="line"><span class="comment">  2 =&gt; string "5" (length=1)</span></span><br><span class="line"><span class="comment">  3 =&gt; string "" (length=0)</span></span><br><span class="line"><span class="comment">  4 =&gt; string "" (length=0)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parseInt兼容性</title>
      <link href="//0911-parseInt%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
      <url>//0911-parseInt%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * parseInt在不同的浏览器下有不同的默认行为处理</span></span><br><span class="line"><span class="comment"> * 需要传为第二个参数10，采用10进制转化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'09'</span>) <span class="comment">// IE8下，默认用八进制转化，结果为0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'09'</span>, <span class="number">10</span>) <span class="comment">// IE8下，结果正常</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="//0907-React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>//0907-React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="comment">// 只要组件存在constructor,就必要要写super,否则this指向会错误</span></span><br><span class="line">  <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">    spuer(props, context)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件将要加载</span></span><br><span class="line">  componentWillMount() &#123;&#125;</span><br><span class="line">  <span class="comment">// 组件加载完成，只在render后，调用一次</span></span><br><span class="line">  componentDidMount() &#123;&#125;</span><br><span class="line">  <span class="comment">// 接受新props时调用</span></span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;&#125;</span><br><span class="line">  <span class="comment">// 接受下次props、state，判断是否更新组件，初始化时不调用</span></span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;&#125;</span><br><span class="line">  <span class="comment">// 组件更改时</span></span><br><span class="line">  componentWillUpdate(nextProps, nextState) &#123;&#125;</span><br><span class="line">  <span class="comment">// 组件更改完成</span></span><br><span class="line">  componentDidUpdate(prevProps, prevState) &#123;&#125;</span><br><span class="line">  <span class="comment">// React 16 处理错误信息生命周期函数</span></span><br><span class="line">  componentDidCatch() &#123;&#125;</span><br><span class="line">  <span class="comment">// 组件从DOM中移除前触发</span></span><br><span class="line">  componentWillUnmount() &#123;&#125;</span><br><span class="line">  <span class="comment">// 渲染</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Demo</span><br></pre></td></tr></table></figure><h3 id="constructor-构建函数"><a href="#constructor-构建函数" class="headerlink" title="constructor 构建函数"></a>constructor 构建函数</h3><ul><li>constructor 参数接受两个参数 props,context 可以获取到父组件传下来的的 props,context,如果你想在&gt;constructor 构造函数内部(注意是内部哦，在组件其他地方是可以直接接收的)使用 props 或 context,则需&gt;要传入，并传入 super 对象。</li></ul><h3 id="componentWillMount-组件将要挂载"><a href="#componentWillMount-组件将要挂载" class="headerlink" title="componentWillMount 组件将要挂载"></a>componentWillMount 组件将要挂载</h3><ul><li>组件刚经历 constructor,初始完数据</li><li>组件还未进入 render，组件还未渲染完成，dom 还未渲染</li></ul><h3 id="componentDidMount-组件渲染完成-只执行一次"><a href="#componentDidMount-组件渲染完成-只执行一次" class="headerlink" title="componentDidMount 组件渲染完成(只执行一次)"></a>componentDidMount 组件渲染完成(只执行一次)</h3><ul><li>组件第一次渲染完成，此时 dom 节点已经生成，可以在这里调用 ajax 请求，返回数据 setState 后组件会重新渲染</li></ul><h3 id="componentWillReceiveProps-nextProps-父组件-props-改变时调用、"><a href="#componentWillReceiveProps-nextProps-父组件-props-改变时调用、" class="headerlink" title="componentWillReceiveProps (nextProps) 父组件 props 改变时调用、"></a>componentWillReceiveProps (nextProps) 父组件 props 改变时调用、</h3><ul><li>使用 this.props 访问当前的 props，可以在此 setState 更新，重新渲染组件</li></ul><h3 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps,nextState)"></a>shouldComponentUpdate(nextProps,nextState)</h3><ul><li>return boolean， true 更新组件，false 为阻止更新</li><li>因为 react 父组件的重新渲染会导致其所有子组件的重新渲染，这个时候其实我们是不需要所有子组件都跟着重新渲染的，因此需要在子组件的该生命周期中做判断</li></ul><h3 id="componentWillUpdate-nextProps-nextState"><a href="#componentWillUpdate-nextProps-nextState" class="headerlink" title="componentWillUpdate (nextProps,nextState)"></a>componentWillUpdate (nextProps,nextState)</h3><ul><li>shouldComponentUpdate 返回 true 以后，组件进入重新渲染的流程，进入 componentWillUpdate,这里同样可以拿到 nextProps 和 nextState</li></ul><h3 id="render-函数"><a href="#render-函数" class="headerlink" title="render 函数"></a>render 函数</h3><ul><li>render 函数会插入 jsx 生成的 dom 结构，react 会生成一份虚拟 dom 树，在每一次组件更新时，在此 react 会通过其 diff 算法比较更新前后的新旧 DOM 树，比较以后，找到最小的有差异的 DOM 节点，并重新渲染</li></ul><h3 id="componentDidUpdate-prevProps-prevState"><a href="#componentDidUpdate-prevProps-prevState" class="headerlink" title="componentDidUpdate(prevProps,prevState)"></a>componentDidUpdate(prevProps,prevState)</h3><ul><li>组件更新完毕后，react 只会在第一次初始化成功会进入 componentDidmount,之后每次重新渲染后都会进入这个生命周期，这里可以拿到 prevProps 和 prevState，即更新前的 props 和 state。</li></ul><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount ()"></a>componentWillUnmount ()</h3><ul><li>在组件从 DOM 中移除的时候立刻被调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记博客搭建</title>
      <link href="//0822-%E8%AE%B0%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>//0822-%E8%AE%B0%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1、 之前写过 WordPress 版的博客，使用别人造好的轮，但是始终感觉缺点什么 <a href="http://utone.xiaohuaiqing.com/" target="_blank" rel="noopener">博客地址</a><br>2、 还用过 Hexo 搭建过博客，基本也是拿来主义 <a href="http://github.xiaohuaiqing.com/" target="_blank" rel="noopener">博客地址</a><br>3、趁着工作中使用 React、Express 前后端分离的项目结构，决心搭建一个属于自己的博客系统<br>4、奉行”先有再优“、后续会不断优化完善博客<br>5、感谢<a href="https://199508.com/" target="_blank" rel="noopener">大雄博客</a>，灵感及页面样式从中获取很多</p></blockquote><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>前后端分离，前端使用 React 框架，分为前台、后台两个项目。后端使用 Express 框架</li><li>React<br>1、React 版本为 <code>&quot;react&quot;: &quot;^16.4.1&quot;</code><br>2、使用 Ant Design 的一些基本组件，如弹出、表单组件，版本为<code>&quot;antd&quot;: &quot;^3.8.0&quot;</code><br>2、使用 Dvajs 和 Umi，重构了博客系统，也修改了样式布局<br>3、使用 scss，css 的扩展，写样式更加简洁</li><li>Express<br>1、使用 Express 的脚手架搭建、版本为 <code>&quot;express&quot;: &quot;~4.16.0&quot;</code><br>2、在加载路由前后，使用了一些中间件，后续将中间件整理出来<br>3、使用 JWT，来验证请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Fragment, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BackTop, Icon, Row, Col &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'dva'</span></span><br><span class="line"><span class="comment">// import &#123; WiredCard &#125; from "wired-elements";</span></span><br><span class="line"><span class="keyword">import</span> withRouter <span class="keyword">from</span> <span class="string">'umi/withRouter'</span></span><br><span class="line"><span class="keyword">import</span> &#123; TransitionGroup, CSSTransition &#125; <span class="keyword">from</span> <span class="string">'react-transition-group'</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./header/components/Header'</span></span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./footer/components/Footer'</span></span><br><span class="line"><span class="keyword">import</span> Siderbar <span class="keyword">from</span> <span class="string">'./siderbar/components/siderbar'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Layout</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.location.pathname === <span class="keyword">this</span>.props.location.pathname) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * xs  &lt;576px</span></span><br><span class="line"><span class="comment">   * sm  ≥576px</span></span><br><span class="line"><span class="comment">   * md  ≥768px</span></span><br><span class="line"><span class="comment">   * lg  ≥992px</span></span><br><span class="line"><span class="comment">   * xl  ≥1200px</span></span><br><span class="line"><span class="comment">   * xxl ≥1600px</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; children, location &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前台布局</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Fragment&gt;</span><br><span class="line">        &lt;div className=<span class="string">"body"</span>&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">          &lt;div className=<span class="string">"main"</span>&gt;</span><br><span class="line">            &lt;TransitionGroup&gt;</span><br><span class="line">              &lt;CSSTransition</span><br><span class="line">                key=&#123;location.key&#125;</span><br><span class="line">                appear=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                classNames=<span class="string">"example"</span></span><br><span class="line">                timeout=&#123;&#123; <span class="attr">enter</span>: <span class="number">300</span>, <span class="attr">exit</span>: <span class="number">100</span> &#125;&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                &#123;children&#125;</span><br><span class="line">              &lt;<span class="regexp">/CSSTransition&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>TransitionGroup&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;Footer /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function mapStateToProps(state) &#123;</span></span><br><span class="line"><span class="regexp">  return &#123;&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withRouter(connect(mapStateToProps)(Layout))</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> DvaJs </tag>
            
            <tag> Umi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode常用插件</title>
      <link href="//0815-VScode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>//0815-VScode%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>Annotator<br>查看 git 提交记录</li><li>Code Outline<br>展示代码结构树</li><li>Git Blame<br>在状态栏显示当前行的 Git 信息</li><li><p>GitLens<br>显示文件最近的 commit 和作者，显示当前行 commit 信息</p></li><li><p>Git History(git log)<br>查看 git log</p></li><li>HTML CSS Support<br>css 提示（支持 vue）</li><li>Guides<br>高亮缩进基准线</li><li><p>Prettify JSON<br>格式化 JSON</p></li><li><p>Prettier - Code formatter<br>代码格式化</p></li><li><p>SCSS IntelliSense<br>scss 智能提示</p></li><li><p>TSLint<br>TSLint</p></li><li>TypeScript Importer<br>TypeScript Importer</li><li>vscode-icons<br>图标</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VsCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>array_diff 数组差集</title>
      <link href="//0815-array_diff%20%E6%95%B0%E7%BB%84%E5%B7%AE%E9%9B%86/"/>
      <url>//0815-array_diff%20%E6%95%B0%E7%BB%84%E5%B7%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="array-diff"><a href="#array-diff" class="headerlink" title="array_diff"></a>array_diff</h2><blockquote><p>定义：比较两个数组的键值，并返回差集，函数返回两个数组的差集数组。该数组包括了所有在被比较的数组中，但是不在任何其他参数数组中的键值。在返回的数组中，键名保持不变。</p></blockquote><blockquote><p>用法：array_diff(array1,array2,array3…); 可传多个数组，后续数组，与第一个数组对比，只能对比一维数组、对比二维数组时，抛出一个异常（Notice）</p></blockquote><blockquote><p>返回数组：返回差集数组，该数组包括了所有在被比较的数组（array1）中，但是不在任何其他参数数组（array2 或 array3 等等）中的键值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git新建远程版本库</title>
      <link href="//0815-git%E6%96%B0%E5%BB%BA%E8%BF%9C%E7%A8%8B%E7%89%88%E6%9C%AC%E5%BA%93/"/>
      <url>//0815-git%E6%96%B0%E5%BB%BA%E8%BF%9C%E7%A8%8B%E7%89%88%E6%9C%AC%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前提为已安装好-git"><a href="#前提为已安装好-git" class="headerlink" title="前提为已安装好 git"></a>前提为已安装好 git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 新建一个文件夹，文件名为项目名</span><br><span class="line">mkdir hexo.git</span><br><span class="line"></span><br><span class="line">// 进入文件夹，初始化</span><br><span class="line"><span class="built_in">cd</span> hexo.git</span><br><span class="line">git init --bare</span><br><span class="line"></span><br><span class="line">// 生成好初始git文件后，更改文件夹的所属组，所属用户</span><br><span class="line">chown -R git:git hexo.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向代理、反向代理</title>
      <link href="//0815-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E3%80%81%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>//0815-%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E3%80%81%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>github 博客地址：<a href="https://shixiaohu2206.github.io/" target="_blank" rel="noopener">https://shixiaohu2206.github.io/</a></p></blockquote><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><ul><li>一般情况下，若没有特别说明的代理技术，通常指的是正向代理</li><li>正向代理(forward)是一个位于客户端【用户 A】和原始服务器(origin server)【服务器 B】之间的服务器【代理服务器 Z】，为了从原始服务器取得内容，用户 A 向代理服务器 Z 发送一个请求并指定目标(服务器 B)，然后代理服务器 Z 向服务器 B 转交请求并将获得的内容返回给客户端。客户端必须要进行一些特别的设置才能使用正向代理。（抄的）</li><li>自己的理解：用户想要访问原始服务器的内容，但是不能直接获取到，因为各种墙的缘故，但是中间的代理服务器可以访问的到，所以，用户就携带自己想要访问的地址（A 网址），先去访问代理服务器，代理服务器接受（A 网址），这时代理服务器再去访问（A 网址），获得到内容，返回给代理服务器，代理服务器再返回给用户。完成正向代理的一个流程。（翻墙就是正向代理）</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ul><li>网上都在说什么正向代理与反向代理正好相反，这个相反在我看来只是相对的某一个点</li><li>反向代理的用户客户端，不需要做任何设置，需要设置的是反向代理服务器。</li><li>对于客户端而言它就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间(name-space)中的内容发送普通请求，接着反向代理将判断向何处(原始服务器)转交请求，并将获得的内容返回给客户端，就像这些内容原本就是它自己的一样。</li><li>自己的理解：用户访问（A 网址），A 网址的代理服务器接受到用户的请求，但是真实的资源不在该代理服务器上，该代理服务器携带用户请求去访问原始的服务器，获得到内容，返回给代理服务器，代理服务器再返回给用户。完成反向代理的一个流程。用户不知道（A 网址）其实不是原始服务器，资源不在（A 网址）上</li></ul><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>负载均衡是在反向代理的基础上实现的。当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器 B 的时候，让不同的代理服务器 Z（x）去应答不同的用户，然后发送不同用户需要的资源。</li><li>当然反向代理服务器像正向代理服务器一样拥有 CACHE 的作用，它可以缓存原始资源服务器 B 的资源，而不是每次都要向原始资源服务器 B 请求数据，特别是一些静态的数据，比如图片和文件，如果这些反向代理服务器能够做到和用户 X 来自同一个网络，那么用户 X 访问反向代理服务器 X，就会得到很高质量的速度。这正是 CDN 技术的核心。</li></ul><h3 id="借用阿笠的一张图"><a href="#借用阿笠的一张图" class="headerlink" title="借用阿笠的一张图"></a>借用阿笠的一张图</h3><p><a href="http://http://img.blog.csdn.net/20171023163129273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDQzMjI3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" target="_blank" rel="noopener"></a></p><h3 id="Nginx-反向代理配置"><a href="#Nginx-反向代理配置" class="headerlink" title="Nginx 反向代理配置"></a>Nginx 反向代理配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#反向代理,需要配置在server外面</span><br><span class="line">upstream github.xiaohuaiqing.com &#123;</span><br><span class="line">        server 119.29.9.63:4000;</span><br><span class="line">        keepalive 2000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        #listen [::]:80;</span><br><span class="line">        server_name github.xiaohuaiqing.com;</span><br><span class="line">        index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">        include other.conf;</span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        #反向代理</span><br><span class="line">        location /</span><br><span class="line">        &#123;</span><br><span class="line">            proxy_pass http://github.xiaohuaiqing.com;</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #单独加个css、js配置</span><br><span class="line">        location ~ .*.(js|css)$</span><br><span class="line">        &#123;</span><br><span class="line">            proxy_pass http://github.xiaohuaiqing.com;</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /home/wwwlogs/github.xiaohuaiqing.com.log;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取首字符拼音首字母</title>
      <link href="//0720-%E8%8E%B7%E5%8F%96%E9%A6%96%E5%AD%97%E7%AC%A6%E6%8B%BC%E9%9F%B3%E9%A6%96%E5%AD%97%E6%AF%8D/"/>
      <url>//0720-%E8%8E%B7%E5%8F%96%E9%A6%96%E5%AD%97%E7%AC%A6%E6%8B%BC%E9%9F%B3%E9%A6%96%E5%AD%97%E6%AF%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取首字符拼音首字母</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 判断是否为汉字 !preg_match("/^[x&#123;4e00&#125;-x&#123;9fa5&#125;]+$/u", $s0)</span></span><br><span class="line"><span class="comment"> * 已知 “泸”，无法识别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstPing</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $s0 = mb_substr($str, <span class="number">0</span>, <span class="number">1</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">    $fchar = ord($s0&#123;<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">if</span> ($fchar &gt;= ord(<span class="string">"A"</span>) <span class="keyword">and</span> $fchar &lt;= ord(<span class="string">"z"</span>)) <span class="keyword">return</span> strtoupper($s0&#123;<span class="number">0</span>&#125;);</span><br><span class="line">    $s1 = iconv(<span class="string">"UTF-8"</span>, <span class="string">"gb2312"</span>, $s0);</span><br><span class="line">    $s2 = iconv(<span class="string">"gb2312"</span>, <span class="string">"UTF-8"</span>, $s1);</span><br><span class="line">    <span class="keyword">if</span> ($s2 == $s0) &#123;</span><br><span class="line">        $s = $s1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $s = $s0;</span><br><span class="line">    &#125;</span><br><span class="line">    $asc = ord($s&#123;<span class="number">0</span>&#125;) * <span class="number">256</span> + ord($s&#123;<span class="number">1</span>&#125;) - <span class="number">65536</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-20319</span> &amp;&amp; $asc &lt;= <span class="number">-20284</span>) <span class="keyword">return</span> <span class="string">"A"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-20283</span> &amp;&amp; $asc &lt;= <span class="number">-19776</span>) <span class="keyword">return</span> <span class="string">"B"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-19775</span> &amp;&amp; $asc &lt;= <span class="number">-19219</span>) <span class="keyword">return</span> <span class="string">"C"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-19218</span> &amp;&amp; $asc &lt;= <span class="number">-18711</span>) <span class="keyword">return</span> <span class="string">"D"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-18710</span> &amp;&amp; $asc &lt;= <span class="number">-18527</span>) <span class="keyword">return</span> <span class="string">"E"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-18526</span> &amp;&amp; $asc &lt;= <span class="number">-18240</span>) <span class="keyword">return</span> <span class="string">"F"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-18239</span> &amp;&amp; $asc &lt;= <span class="number">-17923</span>) <span class="keyword">return</span> <span class="string">"G"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-17922</span> &amp;&amp; $asc &lt;= <span class="number">-17418</span>) <span class="keyword">return</span> <span class="string">"H"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-17922</span> &amp;&amp; $asc &lt;= <span class="number">-17418</span>) <span class="keyword">return</span> <span class="string">"I"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-17417</span> &amp;&amp; $asc &lt;= <span class="number">-16475</span>) <span class="keyword">return</span> <span class="string">"J"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-16474</span> &amp;&amp; $asc &lt;= <span class="number">-16213</span>) <span class="keyword">return</span> <span class="string">"K"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-16212</span> &amp;&amp; $asc &lt;= <span class="number">-15641</span>) <span class="keyword">return</span> <span class="string">"L"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-15640</span> &amp;&amp; $asc &lt;= <span class="number">-15166</span>) <span class="keyword">return</span> <span class="string">"M"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-15165</span> &amp;&amp; $asc &lt;= <span class="number">-14923</span>) <span class="keyword">return</span> <span class="string">"N"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-14922</span> &amp;&amp; $asc &lt;= <span class="number">-14915</span>) <span class="keyword">return</span> <span class="string">"O"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-14914</span> &amp;&amp; $asc &lt;= <span class="number">-14631</span>) <span class="keyword">return</span> <span class="string">"P"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-14630</span> &amp;&amp; $asc &lt;= <span class="number">-14150</span>) <span class="keyword">return</span> <span class="string">"Q"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-14149</span> &amp;&amp; $asc &lt;= <span class="number">-14091</span>) <span class="keyword">return</span> <span class="string">"R"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-14090</span> &amp;&amp; $asc &lt;= <span class="number">-13319</span>) <span class="keyword">return</span> <span class="string">"S"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-13318</span> &amp;&amp; $asc &lt;= <span class="number">-12839</span>) <span class="keyword">return</span> <span class="string">"T"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-12838</span> &amp;&amp; $asc &lt;= <span class="number">-12557</span>) <span class="keyword">return</span> <span class="string">"W"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-12556</span> &amp;&amp; $asc &lt;= <span class="number">-11848</span>) <span class="keyword">return</span> <span class="string">"X"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-11847</span> &amp;&amp; $asc &lt;= <span class="number">-11056</span>) <span class="keyword">return</span> <span class="string">"Y"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($asc &gt;= <span class="number">-11055</span> &amp;&amp; $asc &lt;= <span class="number">-10247</span>) <span class="keyword">return</span> <span class="string">"Z"</span>;</span><br><span class="line">    <span class="keyword">return</span> $s0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP连接MySql常用方法</title>
      <link href="//1130-3%E7%A7%8DPHP%E8%BF%9E%E6%8E%A5MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>//1130-3%E7%A7%8DPHP%E8%BF%9E%E6%8E%A5MYSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="面向过程连接"><a href="#面向过程连接" class="headerlink" title="面向过程连接"></a>面向过程连接</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span><br><span class="line">$mysql_server=<span class="string">"localhost"</span>;</span><br><span class="line">$mysql_username=<span class="string">"数据库用户名"</span>;</span><br><span class="line">$mysql_password=<span class="string">"数据库密码"</span>;</span><br><span class="line">$mysql_database=<span class="string">"数据库名"</span>;</span><br><span class="line"><span class="comment">// 建立数据库链接</span></span><br><span class="line">$conn = mysql_connect($mysql_server,$mysql_username,$mysql_password) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库链接错误"</span>);</span><br><span class="line"><span class="comment">// 选择某个数据库</span></span><br><span class="line">mysql_select_db($mysql_database,$conn);</span><br><span class="line">mysql_query(<span class="string">"set names "</span>utf8<span class="string">""</span>);</span><br><span class="line"><span class="comment">// 执行MySQL语句</span></span><br><span class="line">$result=mysql_query(<span class="string">"SELECT id,name FROM 数据库表"</span>);</span><br><span class="line"><span class="comment">// 提取数据</span></span><br><span class="line">$row=mysql_fetch_row($result);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="面向对象连接"><a href="#面向对象连接" class="headerlink" title="面向对象连接"></a>面向对象连接</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$db=<span class="keyword">new</span> mysqli($dbhost,$username,$userpass,$dbdatabase);</span><br><span class="line"><span class="keyword">if</span>(mysqli_connect_error())&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Could not connect to database."</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$result=$db-&gt;query(<span class="string">"SELECT id,name FROM user"</span>);</span><br><span class="line">$row=$result-&gt;fetch_row();</span><br></pre></td></tr></table></figure><h2 id="PDO-连接方式"><a href="#PDO-连接方式" class="headerlink" title="PDO 连接方式"></a>PDO 连接方式</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$dsn=<span class="string">"mysql:host="</span>.$dbhost.<span class="string">";dbname="</span>.$dbdatabase.<span class="string">";"</span></span><br><span class="line">$dbh=<span class="keyword">new</span> PDO($dsn,$username,$userpass);</span><br><span class="line">$stmt=$dbh-&gt;query(<span class="string">"SELECT id,name FROM user"</span>);</span><br><span class="line">$row=$stmt-&gt;fetch();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slice、splice、split异同</title>
      <link href="//1101-slice%E3%80%81splice%E3%80%81split%E5%BC%82%E5%90%8C/"/>
      <url>//1101-slice%E3%80%81splice%E3%80%81split%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="arguments-参数"><a href="#arguments-参数" class="headerlink" title="arguments 参数"></a>arguments 参数</h2><ul><li>生成<br>JavaScript 在创建函数时，会自动生成一个 Arguments 对象实例 arguments，可以用数组下标的方式”[]”引用 arguments 的元素。arguments.length 为函数实参个数，arguments.callee 引用函数自身。</li><li><p>注意：<br>在严格模式下，第 5 版 ECMAScript (ES5) 禁止使用 arguments.callee()。当一个函数必须调用自身的时候, 避免使用 arguments.callee(), 通过要么给函数表达式一个名字,要么使用一个函数声明.</p></li><li><p>特性：<br>arguments 对象和 Function 是分不开的。因为 arguments 这个对象不能显式创建，arguments 对象只有函数开始时才可用。</p></li><li><p>使用方法：<br>虽然 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同</p></li></ul><h2 id="Array-prototype-slice-apply-arguments-用意"><a href="#Array-prototype-slice-apply-arguments-用意" class="headerlink" title="Array.prototype.slice.apply(arguments)用意"></a>Array.prototype.slice.apply(arguments)用意</h2><p>直接调用 arguments.slice()将返回一个”Object doesn”t support this property or method”错误，因为 arguments 不是一个真正的数组。调用 Array.prototype.slice.apply(arguments)的意义就在于它能将函数的参数对象转化为一个真正的数组。</p><h2 id="Array-prototype-slice-apply-arguments，-1-用意"><a href="#Array-prototype-slice-apply-arguments，-1-用意" class="headerlink" title="Array.prototype.slice.apply(arguments， [1])用意"></a>Array.prototype.slice.apply(arguments， [1])用意</h2><p>首先这段代码的目的是为了拿到参数里除第一个以外后面的所有参数。</p><p>现在 arguments 不是数组，所以不能直接调用 slice 方法，在 JavaScript 中借用其它对象的方法可以通过 apply 或者 call，以 call 为例，上述例子应该改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要借用的方法slice在Array.prototype 上，然后call接受两个参数</span></span><br><span class="line"><span class="comment">// 第一个是需要借用方法的对象</span></span><br><span class="line"><span class="comment">// 第二个是传进方法的参数，也就是1</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 也可以写成</span></span><br><span class="line">[].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="apply-方法与-call-方法"><a href="#apply-方法与-call-方法" class="headerlink" title="apply 方法与 call 方法"></a>apply 方法与 call 方法</h2><p>apply 方法与 call 方法是一样的，区别只是传参的形式，需要把方法参数按数组形式传进：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.apply(<span class="built_in">arguments</span>, [<span class="number">1</span>]) <span class="comment">// 数组传入</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.apply(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git生成ssh秘钥</title>
      <link href="//1020-GIT%E7%94%9F%E6%88%90ssh%E7%A7%98%E9%92%A5/"/>
      <url>//1020-GIT%E7%94%9F%E6%88%90ssh%E7%A7%98%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 查看是否存在秘钥</span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line"></span><br><span class="line">// 配置用户相关信息</span><br><span class="line">$ git config –global user.name ‘xxxxx’</span><br><span class="line">$ git config –global user.email ‘xxx@xx.xxx’</span><br><span class="line"></span><br><span class="line">// 查看用户配置的相关信息</span><br><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br><span class="line"></span><br><span class="line">// 生成秘钥 (邮箱为上方配置的邮箱)</span><br><span class="line">$ ssh-keygen -t rsa -C ‘xxx@xx.xxx’</span><br><span class="line"></span><br><span class="line">// 连按三个空格</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/Mr.Yang/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/Mr.Yang/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)</span><br><span class="line">The key<span class="string">"s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    +E .         |</span></span><br><span class="line"><span class="string">| ..+oo+          |</span></span><br><span class="line"><span class="string">| oo+*+.o         |</span></span><br><span class="line"><span class="string">|o.*===+o         |</span></span><br><span class="line"><span class="string">|==+*... S        |</span></span><br><span class="line"><span class="string">|B.+.o .o         |</span></span><br><span class="line"><span class="string">|++o. +  .        |</span></span><br><span class="line"><span class="string">| +o.+ .          |</span></span><br><span class="line"><span class="string">|.  o.o           |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p><strong>~/ .ssh 文件夹下，生成两个文件，id_rsa（私有秘钥）和 id_rsa.pub（公有密钥）<br>d_rsa.pub（公有密钥）可上传至远端，免密 push</strong></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装NodeJS</title>
      <link href="//1018-Linux%E5%AE%89%E8%A3%85NodeJS/"/>
      <url>//1018-Linux%E5%AE%89%E8%A3%85NodeJS/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-NodeJS"><a href="#安装-NodeJS" class="headerlink" title="安装 NodeJS"></a>安装 NodeJS</h2><blockquote><p>首先下载 node 安装包，下载编译好的，下载完毕，解压后，直接软连接设置成全局，即可使用</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入安装包放置的位置</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载安装包，这个是编译好的安装包，不要make &amp;&amp; make install</span></span><br><span class="line">wget https://nodejs.org/dist/v6.11.4/node-v6.11.4-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并进入 // 可能会报错（gzip: stdin: not in gzip format） 去掉z参数</span></span><br><span class="line">tar -zxvf node-v6.11.4-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment">#软链接、设置成全局</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/src/node-v6.11.4-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/src/node-v6.11.4-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node版本</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="安装-Express-框架"><a href="#安装-Express-框架" class="headerlink" title="安装 Express 框架"></a>安装 Express 框架</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先安装马云爸爸的淘宝cnpm命令</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//建立软链接</span></span><br><span class="line">ln -s /usr/local/src/node-v6<span class="number">.11</span><span class="number">.4</span>-linux-x64/bin/cnpm /usr/local/bin/cnpm</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先安装express-generator脚手架(新版本须装)</span></span><br><span class="line">cnpm install -g express-generator</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装Express</span></span><br><span class="line">cnpm install -g express</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立软链接</span></span><br><span class="line">ln -s /usr/local/src/node-v6<span class="number">.11</span><span class="number">.4</span>-linux-x64/bin/express /usr/local/bin/express</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目</span></span><br><span class="line">cd /project</span><br><span class="line">express app</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入app项目，安装相关依赖</span></span><br><span class="line">cnpm install</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动node进程</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器访问http://127.0.0.1:3000</span></span><br><span class="line">Express欢迎页面呈现</span><br></pre></td></tr></table></figure><h2 id="安装-Forever-守护模块"><a href="#安装-Forever-守护模块" class="headerlink" title="安装 Forever 守护模块"></a>安装 Forever 守护模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/foreverjs/forever</span></span><br><span class="line"><span class="comment">// 可以使用Lniux命令，后台运行node服务</span></span><br><span class="line">nohup npm start &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
